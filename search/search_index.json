{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to My Notebook","text":"<p>\u8fd9\u91cc\u662f GoPoux \u7684\u4e2a\u4eba\u7b14\u8bb0\u672c</p>"},{"location":"links/","title":"\u53cb\u94fe","text":"<p>45gfg9</p><p>kami</p>"},{"location":"cs/","title":"Computer Science","text":"<p>Abstract</p> <p>\u5f52\u6863\u5927\u5b66\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u8bfe\u7a0b\u7684\u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0</p>"},{"location":"cs/computer_logic/","title":"\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840","text":"<p>Info</p> <p>\u672c\u6587\u6863\u4e3a\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840\u7684\u5b66\u4e60\u7b14\u8bb0\uff0c\u6388\u8bfe\u6559\u5e08\u4e3a \u8463\u4e9a\u6ce2 \u3002</p> <p>\u5b9e\u9a8c\u62a5\u544a</p>"},{"location":"cs/computer_logic/chapter1/","title":"\u8ba1\u7b97\u673a\u903b\u8f91\u8bbe\u8ba1\u57fa\u7840","text":"<ul> <li>\u6570\u5b66\u57fa\u7840</li> <li>\u5e03\u5c14\u4ee3\u6570</li> <li>\u903b\u8f91\u4ee3\u6570\u57fa\u7840</li> <li>\u5355\u5143\u7535\u8def</li> <li>\u903b\u8f91\u95e8\u7535\u8def\u3001\u89e6\u53d1\u5668</li> <li>\u6027\u80fd\u5206\u6790\u548c\u5e94\u7528</li> <li>\u7ec4\u5408\u903b\u8f91\u7535\u8def\u7684\u5206\u6790\u3001\u8bbe\u8ba1\u4e0e\u5e94\u7528</li> <li>\u65f6\u5e8f\u903b\u8f91\u7535\u8def\u7684\u5206\u6790\u3001\u8bbe\u8ba1\u4e0e\u5e94\u7528</li> </ul>"},{"location":"cs/computer_logic/chapter1/#chapter-1-digital-systems-and-information","title":"Chapter 1 Digital Systems and Information","text":""},{"location":"cs/computer_logic/chapter1/#_2","title":"\u6570\u5b57\u7cfb\u7edf","text":"<p>Discrete Information Processing System \u79bb\u6563\u4fe1\u606f\u5904\u7406\u7cfb\u7edf</p> <p>\u63a5\u53d7\u79bb\u6563\u8f93\u5165\uff0c\u4ea7\u751f\u79bb\u6563\u8f93\u51fa\u3002</p> <p>System State \u4fdd\u5b58\u72b6\u6001\uff08\u5185\u5b58\uff09</p>"},{"location":"cs/computer_logic/chapter1/#type-of-digital-systems","title":"Type of Digital Systems","text":"<ul> <li>No state present \u6ca1\u6709\u72b6\u6001\u7684\u7cfb\u7edf</li> </ul> <p>\u7ec4\u5408\u903b\u8f91\u7cfb\u7edf Combinational Logical System</p> <p>Output = F(Input)</p> <ul> <li>State system</li> </ul> <p>\u5206\u7c7b\u4f9d\u636e\uff1a\u72b6\u6001\u66f4\u65b0\u65f6\u673a</p> <ul> <li> <p>State update at discrete times</p> <p>Synchronous Sequential System \u540c\u6b65\u65f6\u5e8f\u7cfb\u7edf</p> </li> <li> <p>State updated at any times</p> <p>Asyn Sequential System \u5f02\u6b65\u65f6\u5e8f\u7cfb\u7edf</p> </li> </ul> <p>\u72b6\u6001\u66f4\u65b0 State = F(State, Input)</p> <p>\u8f93\u51fa Output = F(State) or F(State, Input)</p> <p>Computer: Syn, \u4e3b\u9891\uff1a\u66f4\u65b0\u72b6\u6001\u9891\u7387</p> <ul> <li>Embedded System \u5d4c\u5165\u5f0f\u7cfb\u7edf</li> </ul> <p>\u8f93\u5165\u8f93\u51fa\u901a\u5e38\u548c\u7269\u7406\u4e16\u754c\u76f4\u63a5\u76f8\u8fde\uff0c\u5982\u6536\u97f3\u3001\u4f20\u611f\u5668\u3002</p> <p>\u6a21\u62df\u4fe1\u53f7-&gt;\u6570\u5b57\u4fe1\u53f7</p> <ol> <li>\u5468\u671f\u91c7\u6837\uff08\u9999\u519c\u91c7\u6837\u5b9a\u7406\uff1a\u91c7\u6837\u9891\u7387\u9ad8\u4e8e\u4fe1\u53f7\u6700\u9ad8\u9891\u7387\u7684\u4e24\u500d\u4ee5\u4e0a\uff09</li> <li>\u91cf\u5316\uff1a\u4e8c\u8fdb\u5236\u5e8f\u5217\u91cf\u5316\uff080-5V \u5185\u5206\u4e3a 16 \u4efd\uff0c\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff09</li> </ol> <p>Signal Examples Over Time</p> <ol> <li>Analog \u6a21\u62df\u4fe1\u53f7: Continuous in value &amp; time</li> <li>Digital \u6570\u5b57\u4fe1\u53f7: Syn \u540c\u6b65\u3001Asyn \u5f02\u6b65</li> </ol> <p>Threshold Region \u566a\u58f0\u5bb9\u9650\uff1a\u589e\u52a0\u4f20\u8f93\u8fc7\u7a0b\u6297\u5e72\u6270\u80fd\u529b</p>"},{"location":"cs/computer_logic/chapter1/#binary-arithmetic","title":"Binary Arithmetic","text":"<ul> <li> <p>Addition   Carries</p> </li> <li> <p>Subtraction   Borrows</p> </li> <li> <p>Multiplication</p> </li> <li> <p>Convert   \u9664\u4ee5 base \u53d6\u6574</p> </li> </ul>"},{"location":"cs/computer_logic/chapter1/#binary-coding","title":"Binary Coding","text":"<p>\u4e8c\u8fdb\u5236\u7f16\u7801</p> <ul> <li> <p>\u975e\u6570\u503c\u7f16\u7801 Non-numeric   \u4e0d\u8868\u793a\u6570\u503c\uff08\u8868\u793a\u989c\u8272\u3001\u7b26\u53f7\u7b49\uff09</p> </li> <li> <p>\u6570\u503c\u7f16\u7801 Numeric</p> </li> <li>8,4,-2,-1 Code \u6bcf\u4e00\u4f4d\u6709\u4f4d\u6743\u3002</li> <li>Excess 3 Code</li> </ul> <p>\u6bcf\u4e2a\u6570\u5b57\u6982\u7387\u76f8\u540c\uff0c1 \u51fa\u73b0\u7684\u6982\u7387\u76f8\u540c</p> <ul> <li> <p>BCD \u7801\uff088,4,2,1 Code\uff09     \u6bcf\u4e00\u5341\u8fdb\u5236\u6570\u4f4d\u7528\u4e8c\u8fdb\u5236\u8868\u793a     \u4f18\u70b9\uff1a\u548c\u4eba\u4ea4\u4e92\u66f4\u76f4\u89c2</p> </li> <li> <p>BCD Arithmentic   \u8fdb\u4f4d\uff1a8 + 4 = 13 &gt; 9   13 + 6 -&gt; 1101 + 6 -&gt; 10011 -&gt; 10000 + 3</p> </li> <li> <p>ASCII Code   7 \u4f4d\u4e8c\u8fdb\u5236   '0'-&gt;0x30   'A'-&gt;0x41   'a'-&gt;0x61</p> </li> </ul>"},{"location":"cs/computer_logic/chapter1/#parity-bit-error-detection-codes","title":"Parity Bit Error-Detection Codes","text":"<p>\u68c0\u6d4b\u4f20\u8f93\u4fe1\u606f\u6b63\u786e\u6027 Error Detection.</p> <p>\u539f\u7406\uff1a\u5197\u4f59\u4fe1\u606f Redundancy</p> <p>\u5947\u5076\u6821\u68c0\u7801\uff0c\u5728\u672b\u5c3e\u589e\u52a0\u4e00\u4e2a\u4e8c\u8fdb\u5236\u4f4d\uff0c\u4fdd\u8bc1\u6574\u4f53 1 \u7684\u4e2a\u6570\u5947\u5076\u6027\u4e00\u81f4\u3002\u63a5\u6536\u7aef\u5224\u65ad 1 \u7684\u5947\u5076\u3002(odd parity and even parity)</p>"},{"location":"cs/computer_logic/chapter1/#gray-code","title":"Gray Code \u683c\u96f7\u7801","text":"<p>\u76f8\u90bb\u4e24\u6570\u4e4b\u95f4\u4e00\u4f4d\u4e0d\u540c\u3002</p> <p>\u65cb\u8f6c\u7f16\u7801\u5668</p> <p></p> <p>\u5149\u4f20\u611f\u5668\u63a5\u6536\uff0c\u907f\u514d\u51fa\u73b0\u4e2d\u95f4\u7ed3\u679c\uff0c\u6bcf\u6b21\u5230\u8fbe\u4e0b\u4e00\u4e2a\u72b6\u6001\u53ea\u4f1a\u53d8\u4e00\u4f4d\u3002</p>"},{"location":"cs/computer_logic/chapter1/#unicode","title":"UNICODE","text":"<p>16-bit (2-byte)</p>"},{"location":"cs/computer_logic/chapter2/","title":"Chapter 2 Combinational Logic Circuits \u7ec4\u5408\u903b\u8f91\u7535\u8def","text":""},{"location":"cs/computer_logic/chapter2/#gate-circuits-and-boolean-equations","title":"Gate Circuits and Boolean Equations","text":""},{"location":"cs/computer_logic/chapter2/#binary-logic-and-gates","title":"Binary Logic and Gates","text":"<p>Binary Variables 1/0, true/false, on/off</p> <p>Logical Operations</p> <ul> <li><code>AND</code> (\\(\\cdot\\))</li> <li><code>OR</code> (+)</li> <li><code>NOT</code> (\\(\\bar A\\) or \\(A'\\) or ~\\(A\\))</li> <li><code>XOR</code> </li> </ul> <p>Truth tables a tabular listing of the values of a function for all possible combinations of values on its arguments.</p> <p>Logic Function Implementation</p> <p>Using Switches \u5f00\u5173\u7535\u8def</p> <p>Logic Gates</p> <p>\u7ee7\u7535\u5668 (relay) \u5b9e\u73b0\u5f00\u5173\u3002\u4e0d\u53ef\u9760\uff0c\u5bff\u547d\u6709\u9650\uff0c\u4f53\u79ef\u5927</p> <p>\u7535\u5b50\u7ba1 (vacuum rube) \u5b9e\u73b0\u5f00\u5173\u3002\u9700\u8981\u9884\u70ed\uff0c\u4f53\u79ef\u5927\uff0c\u5bff\u547d\u6709\u9650</p> <p>\u534a\u5bfc\u4f53 (transistor) \u5b9e\u73b0\u5f00\u5173\u3002</p> \u534a\u5bfc\u4f53 <p>\u5bfc\u7535\u7279\u6027\u5904\u4e8e\u5bfc\u4f53\u548c\u7edd\u7f18\u4f53\u4e4b\u95f4\u3002</p> <p>\u5206\u7c7b</p> <ul> <li> <p>\u672c\u5f81\u534a\u5bfc\u4f53</p> <p>\u4e0d\u542b\u6742\u8d28\u4e14\u5177\u6709\u6676\u4f53\u7ed3\u6784\u7684\u534a\u5bfc\u4f53</p> <p>T = 0K \u65f6\uff0c\u4e0d\u5bfc\u7535</p> </li> <li> <p>\u6742\u8d28\u534a\u5bfc\u4f53</p> <ul> <li> <p>N \u578b\u534a\u5bfc\u4f53 (Negative)</p> <p>\u63ba\u5165 5 \u4ef7\u539f\u5b50\uff0c\u5b58\u5728\u81ea\u7531\u7535\u5b50</p> </li> <li> <p>P \u578b\u534a\u5bfc\u4f53 (Positive)</p> <p>\u63ba\u5165 3 \u4ef7\u539f\u5b50\uff0c\u5b58\u5728\u7535\u5b50\u7a7a\u7f3a</p> </li> </ul> </li> </ul> <p>PN \u7ed3</p> <p>\u4e00\u4fa7 P \u578b\uff0c\u4e00\u4fa7 N \u578b\uff0c\u4ea4\u754c\u5904\u5f62\u6210 PN \u7ed3\uff0c\u4e2d\u95f4\u7535\u5b50\u548c\u7a7a\u7a74\u7ed3\u5408\u3002</p> <ul> <li>\u5916\u52a0\u6b63\u5411\u7535\u538b\uff08\u548c\u5185\u90e8\u7535\u538b\u76f8\u53cd\uff09\uff0cPN \u7ed3\u88ab\u8017\u5c3d\u540e\u7535\u6d41\u5bfc\u901a</li> <li>\u5916\u52a0\u53cd\u5411\u7535\u538b\uff0cPN \u7ed3\u6269\u5927\uff0c\u7535\u6d41\u66f4\u5c0f\u3002\u9971\u548c\u7535\u6d41\u968f\u6e29\u5ea6\u5347\u9ad8\u800c\u53d8\u5316\u3002</li> </ul> <p>\u4f0f\u5b89\u7279\u6027\u66f2\u7ebf\uff1a</p> <p></p> \u4e09\u6781\u7ba1 <p>\u534a\u5bfc\u4f53\u4e09\u6781\u7ba1\u3001\u6676\u4f53\u4e09\u6781\u7ba1\u3002</p> <p>\u5206\u7c7b</p> <ul> <li> <p>NPN \u578b</p> <p></p> <p>\u653e\u5927\u7279\u6027\uff1a\\(I_b = \\beta I_c\\)</p> <p>\u53ef\u770b\u4e3a\u53c8\u57fa\u6781\u63a7\u5236\u7684\u5f00\u5173\uff0c\u57fa\u6781\u7535\u6d41\u5f88\u5c0f\u770b\u4f5c\u65ad\u5f00\uff0c\u7535\u6d41\u5f88\u5927\u770b\u4f5c\u95ed\u5408\u3002</p> </li> <li> <p>PNP \u578b</p> <p></p> </li> </ul> <p>CMOS Circuits \u7535\u538b\u63a7\u5236</p> <p>\u4e0a\u9762 PMOS \u7ba1\uff0c\u5e38\u95ed\uff1b\u4e0b\u9762 NMOS \u7ba1\uff0c\u5e38\u5f00\u3002</p> <p>\u4e0e\u975e(NAND)\u548c\u6216\u975e(NOR)\u95e8\uff08\u80fd\u591f\u6784\u9020\u51fa\u6240\u6709\u903b\u8f91\u5173\u7cfb\uff09</p> <p>\u8f93\u5165\u6bb5\u53ef\u63a5\u5728\u4e00\u8d77\uff0c\u8f93\u51fa\u7aef\u4e0d\u80fd\u63a5\u5728\u4e00\u8d77\uff0c\u53ef\u80fd\u77ed\u8def\u3002</p> <p>Logical Gate Symbols</p> <p>Waveform Behavior in Time</p> <p>Gate Delay</p> <p>\u9650\u5236\u6700\u9ad8\u5de5\u4f5c\u9891\u7387\u3002</p> <p>Logic Diagrams and Expressions</p> <p>\u771f\u503c\u8868\u552f\u4e00\uff0c\u903b\u8f91\u51fd\u6570\u548c\u903b\u8f91\u7535\u8def\u56fe\u6709\u5f88\u591a\u53d8\u5f62\u3002</p>"},{"location":"cs/computer_logic/chapter2/#bool-algebra","title":"Bool Algebra","text":"<p>\u91cd\u70b9\uff1a\\(X + YZ = (X + Y)(X + Z)\\)</p> <p>\u5bf9\u5076\uff1a\u4e0e\u53d8\u6216\uff0c\u6216\u53d8\u4e0e\uff0c0 \u53d8 1 \uff0c\u4f18\u5148\u7ea7\u4e0d\u53d8\uff0c\u975e\u4e0d\u53d8\u3002</p> Boolean Algebraic Proof 1 <p></p> Boolean Algebraic Proof 2 \\[ AB + \\bar A C + BC = AB + \\bar A C \\] \\[ \\begin{align}     AB + \\bar A C + BC &amp;= AB + \\bar A C + BC(A + \\bar A) \\\\                        &amp;= A(B+BC) + \\bar A(C+BC) \\\\                        &amp;= AB + \\bar A C \\end{align} \\] Boolean Algebraic Proof 3 \\[ \\bar{(X+Y)}Z +X\\bar Y = \\bar Y(X+Z) \\] \\[ \\begin{align}     \\bar{(X+Y)}Z +X\\bar Y &amp;= \\bar X \\bar Y Z + X \\bar Y \\\\                           &amp;= \\bar Y (\\bar X Z + X) \\\\                           &amp;= \\bar Y (X + \\bar X)(X + Z) \\\\                           &amp;= \\bar Y(X+Z) \\end{align} \\] <p>Useful Theorems</p> <ul> <li>Minimization: \\(x \\cdot y + \\bar x \\cdot y = y, (x + y)(\\bar x + y) = y\\)</li> <li>Absorption: \\(x + xy = x, x(x+y) = x\\) </li> <li>Simplification: \\(x + \\bar x y = x + y, x(\\bar x + y) = xy\\)</li> <li>Consensus: \\(xy + \\bar xz + yz = xy + \\bar xz\\) \\((x+y)(\\bar x+z)(y+z) = (x+y)(\\bar x+z)\\)</li> <li>DeMorgan's Law: \\(\\overline{x + y} = \\bar x\\bar y, \\overline{xy} = \\bar x + \\bar y\\)</li> </ul> <p>Expression Simplification \u51cf\u5c11\u5ef6\u8fdf\uff0c\u964d\u4f4e\u6210\u672c</p>"},{"location":"cs/computer_logic/chapter2/#standard-forms","title":"Standard Forms","text":"<p>Canonical Forms in common usage:</p> <ul> <li>SOM: Sum of Minterms</li> <li>POM: Product of Maxterm</li> </ul>"},{"location":"cs/computer_logic/chapter2/#minterms-and-maxterms","title":"Minterms and Maxterms","text":"<ul> <li>Minterm: <code>AND</code> terms with every variable present in either true or complemented form.</li> <li>Maxterm: <code>OR</code> terms with every variable in true or complemented form.</li> </ul> <p>Index of minterms and maxterms</p> <p>The index for the minterm or maxterm, expressed as a binary number, is used to determine whether the variable is shown in the true form or complemented form.</p> <p>For Minterms:</p> <ul> <li>\"1\" means the variable is \"Not Complemented\" (\\(x\\))</li> <li>\"0\" means the variable is \"Complemented\" (\\(\\bar x\\))</li> </ul> <p>For Maxterms, the situation is opposite.</p> <p>Use subscript to show index and \"m\" for Minterm, \"M\" for Maxterm. \\(M_i = \\bar m_i\\).</p> <p>Function Tables for both</p>"},{"location":"cs/computer_logic/chapter2/#canonical-forms","title":"Canonical Forms","text":"<p>Canonical Sum of Minterms</p> <ul> <li>For the function table, the minterms used are the terms corresponding to the 1's</li> <li>For expressions, expand all terms first to explicitly list all minterms. Do this by \"ANDing\" any term missing a variable v with a term \\(v + \\bar v\\)</li> </ul> <p>Example</p> <p>Implement \\(f = x + \\bar x \\bar y\\) as a SOM.</p> <ul> <li>\\(f = x (y + \\bar y) + \\bar x \\bar y\\)</li> <li>\\(f = xy + x \\bar y + \\bar x \\bar y\\)</li> <li>\\(f = m_3 + m_2 + m_0\\) or \\(f(x, y, z) = \\sum_m(0, 2, 3)\\)</li> </ul> <p>Canonical Product of Maxterms</p> <ul> <li>For the function table, the maxterms used are the terms corresponding to the 0's</li> <li>For expressions, expand all terms first to explicitly list all maxterms. Do this by \"ORing\" any term missing a variable v with a term \\(v \\bar v\\)</li> </ul> <p>Example</p> <p>Implement \\(f = x + \\bar x \\bar y\\) as a POM.</p> <ul> <li>\\(f(x, y, z) = (x + bar x)(x + \\bar y) = x + \\bar y\\)</li> <li>\\(f = x + \\bar y + 0 = x + \\bar y + z \\bar z\\)</li> <li>\\(f = (x + \\bar y + z)(x + \\bar y + \\bar z)\\)</li> <li>\\(f = M_2 M_3 = \\prod_M (2, 3)\\)</li> </ul> <p>Function Complements</p> <p>The complement of a function expressed as a sum of minterms is constructed by selecting the minterms missing in the sum-of-minterms canonical forms.</p> <p>Minterm \u548c Maxterm \u5728\u771f\u503c\u8868\u4e2d\u9009\u62e9\u7684\u9879\u4e92\u8865\uff0c\u53ef\u4ee5\u901a\u8fc7 SOM \u63a8\u7b97\u51fa POM\u3002</p> <p>Note</p> <p>Method to get maxterm.</p> <p>\u5148\u5316\u6210 SOM\uff0c\u518d\u9009\u53d6\u4e92\u8865\u7684\u9879\u7b97\u51fa POM\u3002</p> <ul> <li>\\(F(x, y, z) = \\sum_m(1,3,5,7)\\)</li> <li>\\(F(x,y,z) = \\prod_M(0,2,4,6)\\)</li> </ul> <p>Standard Forms</p> <ul> <li>Standard Sum-of-Products (SOP) form: equations are written as an OR of AND terms</li> <li>Standard Product-of-Sums (POS) form: equations are written as an AND of OR terms</li> </ul> <p>SOP and POS are two-level network of gates. \u4e00\u7ea7\u6216\u95e8\u518d\u4e00\u7ea7\u4e0e\u95e8\uff08\u6216\u8005\u76f8\u53cd\uff09\uff0c\u6700\u5c11\u5c42\u6b21\u7684\u7535\u8def\u5b9e\u73b0\u65b9\u6cd5\u3002</p> <p>\u76ee\u7684\uff1a\u51cf\u5c11\u5ef6\u8fdf\u3001\u6210\u672c\u3002</p>"},{"location":"cs/computer_logic/chapter2/#circuit-optimization","title":"Circuit Optimization","text":"<p>Goal: To obtain the simplest implementation for a given function.</p> <p>Requires a cost criterion to measure the simplicity of a circuit.</p>"},{"location":"cs/computer_logic/chapter2/#two-level-optimization","title":"Two-Level Optimization","text":"<p>Cost criteria:</p> <ul> <li>\\(L\\) - Literal cost</li> <li>\\(G\\) - Gate input cost</li> <li>\\(GN\\) - Gate input cost with NOTs</li> </ul>"},{"location":"cs/computer_logic/chapter2/#literal-cost","title":"Literal Cost","text":"<p>The number of literal appearances in a Boolean expression corresponding to the logic circuit diagram.</p> <p>\u5f0f\u4e2d\u53d8\u91cf\u603b\u4e2a\u6570\u5373\u4e3a Literal Cost.</p>"},{"location":"cs/computer_logic/chapter2/#gate-input-cost","title":"Gate Input Cost","text":"<p>The number of inputs to the gates in the implementation corresponding exactly to the given equation or equations.</p> <p>Consist of:</p> <ul> <li>All literal appearances</li> <li>The number of terms excluding single literal terms (G)</li> <li>Optionally, the number of distinct complemented single literals (GN)</li> </ul> <p>Example</p> <ul> <li>\\(F = BD + A\\bar BC + A\\bar C \\bar D \\qquad L = 8, G = 11, GN = 14\\)</li> <li>\\(F = (A +\\bar B)(A + D)(B + C + \\bar D)(\\bar B + \\bar C + D) \\qquad L = 10, G = 14, GN = 18\\)</li> </ul> <p>Cost Criteria</p> <p> </p>"},{"location":"cs/computer_logic/chapter2/#map-manipulation","title":"Map Manipulation","text":"<p>Karnaugh Maps(K-map)</p> <p>A K-map is a collection of squares</p> <ul> <li>Each square represents a minterm</li> <li>The collection of squares is a graphical representation of a Boolean function</li> <li>Adjacent squares differ in the value of one variable</li> <li>Alternative algebraic expressions for the same function are derived by recognizing patterns of squares</li> </ul>"},{"location":"cs/computer_logic/chapter2/#two-variable-maps","title":"Two Variable Maps","text":"<p>K-Map Function Representation</p> <p>\\(F(x,y) = x\\bar y + xy\\)</p> <p></p> <p>Then \\(F(x,y) = x\\bar y + xy = x\\)</p>"},{"location":"cs/computer_logic/chapter2/#three-variable-maps","title":"Three Variable Maps","text":"<p>Note</p> <p>Topological warps of 3-variable K-maps that show all adjacencies:</p> <p></p>"},{"location":"cs/computer_logic/chapter2/#four-variable-maps","title":"Four Variable Maps","text":"<p>Example Shapes of Rectangles (WXYZ)</p>"},{"location":"cs/computer_logic/chapter2/#five-variable-or-more-k-maps","title":"Five Variable or More K-Maps","text":"<p>For five variable problems, we use two adjacent K-maps.(VWXYZ)</p>"},{"location":"cs/computer_logic/chapter2/#dont-cares-in-k-maps","title":"Don't Cares in K-Maps","text":"<p>\u53ef\u80fd\u6709\u65e0\u5173\u9879\uff0c\u8f93\u5165\u65e0\u5173\u8f93\u5165\u7ec4\u5408\u65f6\uff0c\u8f93\u51fa\u662f 0 \u662f 1 \u90fd\u65e0\u6240\u8c13\u3002\u5728 K-map \u4e2d\u7528 <code>x</code> \u8868\u793a\uff0c\u53ef\u753b\u5165\u4e5f\u53ef\u4e0d\u753b\u5165\u5361\u8bfa\u5708\u4e2d\uff08\u53d6\u51b3\u4e8e\u662f\u5426\u80fd\u5316\u5230\u6700\u7b80\uff09</p> <p>Example</p> <p>\\(F(A,B,C,D) = \\sum_m(3,9,11,12,13,14,15) + \\sum_d(1,4,6)\\)</p> <ul> <li>Find the optimum SOP solution    \\(F = AB + \\bar BD\\)</li> <li>Find the optimum POS solution    \\(F = (B + D)(A + \\bar B)\\)</li> </ul>"},{"location":"cs/computer_logic/chapter2/#systematic-simplification","title":"Systematic Simplification","text":"<p>A Prime Implicant (\u8d28\u8574\u6db5\u9879) is a product term obtained by combining the maximum possible number of adjacent squares in the map into a rectangle with the number of squares a power of 2.</p> <p>A prime implicant is called an Essential Prime Implicant if it is the only prime implicant that covers (includes) one or more minterms.</p> <p>\u8d28\u8574\u6db5\u9879\u662f\u80fd\u591f\u6846\u4f4f\u67d0\u4e2a <code>1</code> \u7684\u6700\u5927\u5361\u8bfa\u5708\u3002\u5bf9\u67d0\u4e2a <code>1</code> \u800c\u8a00\u5982\u679c\u5b83\u7684\u8d28\u8574\u6db5\u9879\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48\u5b83\u662f\u5fc5\u8981\u7684\u3002</p> <p>Example</p> <p></p>"},{"location":"cs/computer_logic/chapter2/#multi-level-circuit-optimization","title":"Multi-Level Circuit Optimization","text":"<p>\u4e8c\u7ea7\u95e8\u4f20\u8f93\u5ef6\u8fdf\u6700\u5c0f\uff0c\u4f46\u95e8\u8f93\u5165\u6210\u672c\u9ad8\u3002</p> <p>\u591a\u7ea7\u95e8\u4f20\u8f93\u5ef6\u8fdf\u8f83\u9ad8\uff0c\u4f46\u95e8\u8f93\u5165\u6210\u672c\u4f4e\u3002</p> <p>\u5982\u4f55\u8bbe\u8ba1\uff0c\u53d6\u51b3\u4e8e\u9700\u8981\u964d\u4f4e\u4f20\u8f93\u5ef6\u8fdf\u8fd8\u662f\u95e8\u8f93\u5165\u6210\u672c\u3002</p> <p>Transformation Examples</p> <p> \u6700\u540e\u5316\u4e3a\u4e09\u7ea7\u95e8\u7535\u8def\uff0c\u95e8\u8f93\u5165\u6210\u672c\u964d\u4f4e\u3002</p>"},{"location":"cs/computer_logic/chapter2/#additional-gates-and-circuits","title":"Additional Gates and Circuits","text":""},{"location":"cs/computer_logic/chapter2/#integrated-circuits","title":"Integrated Circuits","text":"<p>\u96c6\u6210\u7535\u8def</p> <p>Integrated circuit (informally, a \u201cchip\u201d) is a semiconductor crystal (most often silicon) containing the electronic components for the digital gates and storage elements which are interconnected on the chip.</p> <p>\u5206\u7c7b\uff1a</p>"},{"location":"cs/computer_logic/chapter2/#technology-parameters","title":"Technology Parameters","text":"<ul> <li>Fan-in The number of inputs available on a gate</li> <li>Fan-out The number of standard loads driven by a gate output</li> <li>Logic Levels The signal value ranges for 1 and 0 on the inputs and 1 and 0 on the outputs</li> <li>Noise Margin the maximum external noise voltage superimposed on a normal input value that will not cause an undesirable change in the circuit output</li> <li>Cost for a gate a measure of the contribution by the gate to the cost of the integrated circuit</li> <li>Propagation Delay The time required for a change in the value of a signal to propagate from an input to an output</li> <li>Power Dissipation The amount of power drawn from the power supply and consumed by the gate</li> </ul>"},{"location":"cs/computer_logic/chapter2/#fan-out","title":"Fan-out","text":"<p>The number of standard loads driven by a gate output</p> <p>\u4e00\u4e2a\u95e8\u7684\u8f93\u51fa\u80fd\u5e26\u52a8\u591a\u5c11\u95e8\u7684\u8f93\u5165</p> <p>\u8861\u91cf\u6247\u51fa\u7cfb\u6570\uff1a</p> <p>Transition time - the time required for the gate output to change from H to L, \\(t_{HL}\\), or from L to H, \\(t_{LH}\\)</p> <p>\u5e26\u7684\u95e8\u8d8a\u591a\uff0c\u4e0a\u5347\u4e8b\u4ef6\u5c31\u8d8a\u957f\u3002\u89c4\u5b9a\u4e0a\u5347\u4e0b\u964d\u6700\u5927\u65f6\u95f4\uff0c\u4ece\u800c\u5f97\u51fa maximum fan-out \u6700\u5927\u6247\u51fa\u7cfb\u6570\u3002</p>"},{"location":"cs/computer_logic/chapter2/#cost","title":"Cost","text":"<p>In integrated circuits, chip area, number and size of the transistors, amount of wiring, gate input count</p> <p>\u4e3b\u8981\u7531\u95e8\u8f93\u5165\u6210\u672c\u51b3\u5b9a\u3002</p>"},{"location":"cs/computer_logic/chapter2/#propagation-delay","title":"Propagation Delay","text":"<p>Delay is usually measured at the 50% point with respect to the H and L output voltage levels</p> <p>\u8f93\u5165\u53d8\u5316\u5230\u8f93\u51fa\u53d8\u5316\u7684\u65f6\u95f4\u3002\u901a\u5e38\u4ece\u4e0a\u5347\u6216\u4e0b\u964d 50% \u5904\u5f00\u59cb\u8ba1\u7b97\u3002</p> <ul> <li>High-to-Low \\(t_{PHL}\\) \u8f93\u51fa \u4ece\u9ad8\u7535\u5e73\u5230\u4f4e\u7535\u5e73\u7684\u65f6\u95f4</li> <li>Low-to-High \\(t_{PLH}\\) \u8f93\u51fa \u4ece\u4f4e\u7535\u5e73\u5230\u9ad8\u7535\u5e73\u7684\u65f6\u95f4</li> </ul> <p>Propagation Delay of <code>NOT</code></p> <p></p>"},{"location":"cs/computer_logic/chapter2/#delay-models","title":"Delay Models","text":"<ul> <li>Transport delay \u4f20\u8f93\u5ef6\u8fdf change in the output in response to a change on the inputs occurs after a fixed specified delay</li> <li> <p>Inertial delay \u60ef\u6027\u5ef6\u8fdf similar to transport delay, except that if the input changes such that the output is to change twice in a time interval less than the  rejection time, the output changes do not occur. Models typical electronic circuit behavior, namely, rejects narrow \u201cpulses\u201d on the outputs</p> <p>\u5f88\u5c0f\u7684\u8109\u51b2\u8df3\u53d8\u4f1a\u88ab\u6d88\u9664\u3002</p> </li> </ul> <p>Example</p> <p></p>"},{"location":"cs/computer_logic/chapter2/#circuit-delay","title":"Circuit Delay","text":"<p>Example</p> <p>  \u8003\u8651\u4f20\u8f93\u5ef6\u8fdf\uff0c\u8f93\u51fa\u6ce2\u5f62\u6539\u53d8\u3002</p> <p>\\(S\\) \u7684\u4e24\u6761\u8def\u5f84\u5ef6\u8fdf\u4e0d\u540c\uff0c\\(Y\\) \u5904\u4ea7\u751f\u5c16\u5cf0\uff0c\u79f0\u4e3a\u7535\u8def\u8fdb\u884c\u7684 \u7ade\u4e89\u5192\u9669</p>"},{"location":"cs/computer_logic/chapter2/#fan-out-and-delay","title":"Fan-out and Delay","text":"<p>The fan-out loading a gate\u2019s output affects the gate\u2019s propagation delay</p> <p>standard load: \u5e26\u4e00\u4e2a\u975e\u95e8\u6240\u9700\u8981\u7684\u8d1f\u8f7d\u3002</p> <p>Example</p> <p>One realistic equation for \\(t_{pd}\\) for a NAND gate with 4 inputs is</p> \\[ t_{pd} = 0.07 + 0.021 SL \\text{ns} \\] <p>\\(SL\\): the number of standard loads the gate is driving.</p>"},{"location":"cs/computer_logic/chapter2/#costperformance-tradeoffs","title":"Cost/Performance Tradeoffs","text":"<p>Gate-Level Example</p> <p>NAND gate G with 20 standard loads on its output has a delay of 0.45 ns and has a normalized cost of 2.0.</p> <p>A buffer H has a normalized cost of 1.5. The NAND gate driving the buffer with 20 standard loads gives a total delay of 0.33 ns.</p> <p>In which if the following cases should the buffer be added?</p> <ol> <li>The cost of this portion of the circuit cannot be more than 2.5</li> <li>The delay of this portion of the circuit cannot be more than 0.40 ns</li> <li>The delay of this portion of the circuit must be less than 0.40 ns and the cost less than 3.0</li> </ol> <p>Answer:</p> <ol> <li>No buffer</li> <li>Need buffer</li> <li>Cannot achieve by using buffer or not</li> </ol> <p>Tradeoffs can also be accomplished much higher in the design hierarchy.</p> <p>Constraints on cost and performance have a major role in making tradeoffs.</p>"},{"location":"cs/computer_logic/chapter2/#other-gate-types","title":"Other Gate Types","text":"<ul> <li> <p>Buffer \u7f13\u51b2\u5668 \\(F = X\\)</p> <p>\u4f5c\u7528\uff1a\u6269\u5927\u6247\u51fa\u7cfb\u6570\uff0c\u51cf\u5c11\u4f20\u8f93\u5ef6\u8fdf\uff0c\u63d0\u9ad8\u8d1f\u8f7d\u80fd\u529b\u3002</p> </li> <li> <p>NAND gate \u4e0e\u975e\u95e8 \\(F = \\overline{XY}\\)</p> <p>\u4f5c\u7528\uff1a\u5b9e\u73b0\u4efb\u610f\u903b\u8f91\u51fd\u6570\uff0c\u51cf\u5c11\u95e8\u8f93\u5165\u6210\u672c\u3002</p> </li> <li> <p>NOR gate \u6216\u975e\u95e8 \\(F = \\overline{X + Y}\\)</p> <p>\u5bf9\u5076\u5173\u7cfb</p> </li> <li> <p>Exclusive-OR gate \u5f02\u6216\u95e8 \\(F = X \\oplus Y\\)</p> <p>Exclusive-NOR gate \u5f02\u6216\u975e\u95e8\uff08\u540c\u6216\u95e8\uff09 \\(F = \\overline{X \\oplus Y}\\)</p> <p>\\(X \\oplus Y = X \\bar{Y} + \\bar{X}Y\\), \\(\\overline{X \\oplus Y} = XY + \\bar{X}\\bar{Y}\\)</p> </li> </ul>"},{"location":"cs/computer_logic/chapter2/#exclusive-or-operator-and-gates","title":"Exclusive-OR Operator and Gates","text":"<ul> <li> <p>XOR identities</p> \\[ X \\oplus Y \\oplus Z = \\bar X \\bar Y Z + \\bar X Y \\bar Z + X \\bar Y \\bar Z + XYZ \\] \\[ X \\oplus \\bar Y = \\overline{X \\oplus Y} \\] \\[ X \\oplus 0 = X, X \\oplus 1 = \\bar X \\text{\uff08\u53ef\u63a7\u975e\u95e8\uff09} \\] </li> <li> <p>XOR implementation</p> <p></p> <p></p> </li> <li> <p>Odd and Even Functions</p> <p>Odd Function: \\(F = 1\\) if and only if the index of the minterm has an odd number of 1s</p> <p>Even Function: \\(F = 1\\) if and only if the index of the minterm has an even number of 1s</p> <p>The not of an odd function is an even function, and vice versa.</p> </li> <li> <p>Parity Generators and Checkers \u5947\u5076\u6821\u9a8c</p> <p>Parity Generator: \\(P = X \\oplus Y \\oplus Z\\)</p> <p>Parity Checker: \\(F = X \\oplus Y \\oplus Z \\oplus P\\)</p> </li> </ul>"},{"location":"cs/computer_logic/chapter2/#high-impedance-outputs","title":"High-Impedance Outputs","text":"<p>\u5230 VCC \u548c GND \u7684\u7535\u963b\u90fd\u5f88\u5927\uff0c\u76f8\u5f53\u4e8e\u65ad\u8def\u3002\u7b80\u79f0 <code>Hi-Z</code>\u3002</p> <p>The 3-State Buffer \u771f\u503c\u8868\uff1a</p> Enable Input Output 0 X Hi-Z 1 0 0 1 1 1"},{"location":"cs/computer_logic/chapter3/","title":"Combinational Logic Design","text":""},{"location":"cs/computer_logic/chapter3/#combinational-logic","title":"Combinational Logic","text":""},{"location":"cs/computer_logic/chapter3/#functions-and-functional-blocks","title":"Functions and Functional Blocks","text":"<p>verilog \u4e2d\uff0c\u8c03\u7528\u6a21\u5757\u4f1a\u5728\u7535\u8def\u4e2d\u589e\u52a0\u5b9e\u4f8b\uff0c\u4f1a\u589e\u52a0\u5f00\u9500\u3002</p> <p>verilog \u4e2d\u5e76\u884c\u8fd0\u884c\u3002</p>"},{"location":"cs/computer_logic/chapter3/#multiple-bit-rudiementary-functions","title":"Multiple-bit Rudiementary Functions","text":"<p>A wide line is used to represent a bus (\u603b\u7ebf). The bus can be split into individual lines.</p>"},{"location":"cs/computer_logic/chapter3/#enable-function","title":"Enable Function","text":"<p>\u4e0e\u95e8 + \u975e\u95e8</p>"},{"location":"cs/computer_logic/chapter3/#decoding","title":"Decoding \u8bd1\u7801","text":"<p>the conversion of an n-bit input code to an m-bit output code with \\(n \\leq m \\leq 2^n\\) such that each valid code word produces a unique output code</p> <p>Example:</p> <ul> <li> <p>1-to-2-line decoder</p> <p></p> </li> <li> <p>2-to-4-line decoder</p> <p></p> </li> </ul> <p>\u884c\u5217\u8bd1\u7801\u5668\uff1a\u5c06\u8f93\u5165\u4e0d\u65ad\u4e8c\u5206\uff0c\u4f8b\u5982 4-to-16 \u62c6\u6210 2-to4 \u548c 2-to-4\uff0c\u518d\u5c06 2-to-4 \u62c6\u6210 1-to-2 \u548c 1-to-2\u3002</p>"},{"location":"cs/computer_logic/chapter3/#logic-functions-implementation","title":"Logic Functions Implementation","text":"<p>\u5b9e\u73b0\u4efb\u610f\u903b\u8f91\u51fd\u6570\uff1a\u8bd1\u7801\u5668 + \u6216\u95e8</p> <p>\u8bd1\u7801\u5668\u8f93\u51fa\u662f\u6240\u6709\u6700\u5c0f\u9879\uff0c\u901a\u8fc7\u6216\u95e8\u5b9e\u73b0\u903b\u8f91\u51fd\u6570\u3002</p>"},{"location":"cs/computer_logic/chapter3/#bcd-to-segment-decoder","title":"BCD-to-Segment Decoder","text":"<p>Implement:</p> <ul> <li> <p>Common anode \u5171\u9633\u6781: </p> <ul> <li>\u63a7\u5236\u4eae\uff1aLED \u53e6\u4e00\u7ea7\u63a5\u4f4e\u7535\u5e73(0)</li> <li>\u63a7\u5236\u706d\uff1aLED \u53e6\u4e00\u7ea7\u63a5\u9ad8\u7535\u5e73(1)</li> </ul> </li> <li> <p>Common cathode \u5171\u9634\u6781</p> <ul> <li>\u63a7\u5236\u4eae\uff1aLED \u53e6\u4e00\u7ea7\u63a5\u9ad8\u7535\u5e73(1)</li> <li>\u63a7\u5236\u706d\uff1aLED \u53e6\u4e00\u7ea7\u63a5\u4f4e\u7535\u5e73(0)</li> </ul> </li> </ul>"},{"location":"cs/computer_logic/chapter3/#encoding","title":"Encoding \u7f16\u7801","text":"<p>the conversion of an m-bit input code to an n-bit output code with \\(m \\geq n\\) such that each valid code word produces a unique output code (index to code)</p>"},{"location":"cs/computer_logic/chapter3/#decimal-to-bcd-encoder","title":"Decimal-to-BCD Encoder","text":"<ul> <li>Input: 10 bits (0-9)</li> <li>Output: 4 bits (0000-1001)</li> <li>Function: if input bit \\(D_i\\) is 1, then output \\((A_3, A_2, A_1, A_0)\\) is the BCD code for \\(i\\).</li> </ul> <p>Commonly don't use truth table.</p> <p>Equations:</p> \\[\\begin{align} A_0 &amp;= D_1 + D_3 + D_5 + D_7 + D_9 \\\\ A_1 &amp;= D_2 + D_3 + D_6 + D_7 \\\\ A_2 &amp;= D_4 + D_5 + D_6 + D_7 \\\\ A_3 &amp;= D_8 + D_9 \\end{align}\\]"},{"location":"cs/computer_logic/chapter3/#priority-encoder","title":"Priority Encoder","text":"<p>Accepts multiple inputs and use the highest priority input.</p> <p>where \\(V\\) indicates at least one 1 present.</p> <p>Use K-map to get equations:</p> \\[\\begin{align} F_1 &amp;= D_3 + D_2 \\\\ A_2 &amp;= D_4 \\\\ A_1 &amp;= \\bar D_4 D_3 + \\bar D_4 \\bar D_3 D_2 = \\bar D_4 F_1 \\\\ A_0 &amp;= \\bar D_4 D_3 + \\bar D_4 \\bar D_3 \\bar D_2 D_1 = \\bar D_4 (D_3 + \\bar D_2 D_1) \\\\ V &amp;= D_4 + F_1 + D_1 + D_0 \\end{align}\\]"},{"location":"cs/computer_logic/chapter3/#multiplexers","title":"Multiplexers \u591a\u8def\u9009\u62e9\u5668","text":"<p>A multiplexer selects information from an input line and directs the information to an output line.</p> <p>Decoder + Enable.</p>"},{"location":"cs/computer_logic/chapter3/#2-to-1-line-multiplexer","title":"2-to-1-line Multiplexer","text":""},{"location":"cs/computer_logic/chapter3/#4-to-1-line-multiplexer","title":"4-to-1-line Multiplexer","text":""},{"location":"cs/computer_logic/chapter3/#multiplexer-width-expansion","title":"Multiplexer Width Expansion","text":"<p>Select \"vector bits\" instead of \"bits\".</p>"},{"location":"cs/computer_logic/chapter3/#other-multiplexers","title":"Other Multiplexers","text":"<p>Use three-state drivers.</p>"},{"location":"cs/computer_logic/chapter3/#combinational-logic-implementation","title":"Combinational Logic Implementation","text":""},{"location":"cs/computer_logic/chapter3/#multiplexer-approach-1","title":"Multiplexer Approach 1","text":"<p>n inputs, m outputs</p> <p>Use m-width \\(2^n\\)-to-1-line multiplexer</p> <p>Gray to Binary Code</p> <ul> <li> <p>Truth table:</p> <p></p> </li> <li> <p>Mux:</p> <p></p> </li> </ul>"},{"location":"cs/computer_logic/chapter3/#multiplexer-approach-2","title":"Multiplexer Approach 2","text":"<p>n + 1 inputs, m outputs</p> <p>Use m-width \\(2^n\\)-to-1-line multiplexer.</p> <p>Design:</p> <ul> <li>Find the truth table for the function.</li> <li>Based on the values of the first n variables, separate the truth table rows into pairs. \u6839\u636e\u524d n \u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u5c06\u771f\u503c\u8868\u5206\u6210\u4e24\u884c\u4e00\u5bf9\u3002</li> <li>For each pair and output, define a rudimentary function of the final variable \\((0, 1, X, \\bar X)\\)</li> <li>Use the first n variables as the select inputs of a multiplexer and the rudimentary functions as the data inputs.</li> </ul> <p>Gray to Binary Code</p> <ul> <li> <p>Truth table:</p> <p></p> </li> <li> <p>Mux:</p> <p></p> </li> </ul>"},{"location":"cs/computer_logic/chapter3/#design-procedure","title":"Design Procedure","text":""},{"location":"cs/computer_logic/chapter3/#combinational-circuits","title":"Combinational Circuits","text":"<p>\u8f93\u5165\u4e0e\u8f93\u51fa\u4e25\u683c\u5bf9\u5e94</p>"},{"location":"cs/computer_logic/chapter3/#beginning-hierarchical-design","title":"Beginning Hierarchical Design","text":"<ul> <li>Top-Down: \u4ece\u9876\u5c42\u5f00\u59cb\u8bbe\u8ba1\uff0c\u9010\u6b65\u7ec6\u5316</li> <li>Bottom-Up: \u4ece\u6700\u5e95\u5c42\u5f00\u59cb\u8bbe\u8ba1\uff0c\u9010\u6b65\u5408\u5e76</li> </ul>"},{"location":"cs/computer_logic/chapter3/#design-procedure_1","title":"Design Procedure","text":"<ul> <li>Specification \u7b80\u5316</li> <li> <p>Formulation \u516c\u5f0f\u5316</p> <p>Derive a truth table or initial Boolean equations for each output function.</p> <p>Apply hierarchical design to the output functions.</p> </li> <li> <p>Optimization \u4f18\u5316</p> <p>Apply multiple-level logic optimization to the output functions.</p> <p>Draw logic diagrams.</p> </li> <li> <p>Technology Mapping \u6280\u672f\u6620\u5c04</p> <p>Map the logic diagrams into a specific technology.</p> </li> <li> <p>Verification \u9a8c\u8bc1</p> <p>Verify the design by simulation.</p> </li> </ul> <p>Design BCD to Excess-3 Code Converter</p> <ul> <li> <p>Specification</p> <ul> <li>BCD code words for digits 0 through 9 are 0000 through 1001, respectively.</li> <li>Excess-3 code words for digits 0 through 9 consisting of 3 added to the BCD code words.</li> </ul> </li> <li> <p>Formulation</p> <p>write truth table (A-F \u65e0\u5173\u9879)</p> <p>Input BCD: ABCD, Output Excess-3: WXYZ</p> </li> <li> <p>Optimization</p> <ol> <li> <p>Use K-maps:</p> \\[\\begin{align} W &amp;= A + BC + BD \\\\ X &amp;= \\bar BC + \\bar BD + B\\bar C\\bar D \\\\ Y &amp;= CD + \\bar C \\bar D \\\\ Z &amp;= \\bar D \\end{align}\\] <p>G = 23</p> </li> <li> <p>Multiple-level logic optimization</p> <p>\\(T_1 = C + D\\), then</p> \\[\\begin{align} T_1 = C + D , G &amp;&amp;= 2 \\\\ \\bar T_1 , G &amp;&amp;= 1 \\\\ W &amp;= A + B(T_1) , G &amp;&amp;= 4 \\\\ X &amp;= \\bar B(T_1) + B\\bar T_1 , G &amp;&amp;= 6  \\\\ Y &amp;= CD + \\bar T_1 , G &amp;&amp;= 4 \\\\ Z &amp;= \\bar D, G &amp;&amp;= 0 \\end{align}\\] <p>G = 17</p> </li> <li> <p>Technology mapping</p> <p>Convert to NAND gates or NOR gates.</p> </li> </ol> </li> </ul>"},{"location":"cs/computer_logic/chapter3/#chip-design-styles","title":"Chip Design Styles","text":"<ul> <li> <p>Full custom: \u4e3a\u7279\u5b9a\u5e94\u7528\u8bbe\u8ba1</p> <p>\u4f18\u70b9\uff1a\u6700\u5c0f\u9762\u79ef\uff0c\u6700\u5feb\u901f\u5ea6\uff0c\u751f\u4ea7\u6210\u672c\u4f4e</p> <p>\u7f3a\u70b9\uff1a\u8bbe\u8ba1\u5468\u671f\u957f\uff0c\u8bbe\u8ba1\u6210\u672c\u9ad8</p> </li> <li> <p>Standard cell: \u5305\u542b\u6807\u51c6\u6a21\u5757\uff08\u7c7b\u4f3c\u6807\u51c6\u5e93\uff09</p> <p>\u4f18\u70b9\uff1a\u8bbe\u8ba1\u5468\u671f\u77ed\uff0c\u8bbe\u8ba1\u6210\u672c\u4f4e</p> <p>\u7f3a\u70b9\uff1a\u9762\u79ef\u5927\uff0c\u901f\u5ea6\u6162\uff0c\u751f\u4ea7\u6210\u672c\u9ad8</p> </li> <li> <p>Gate array: \u95e8\u9635\u5217\uff08\u53ef\u7f16\u7a0b\uff09</p> <p>\u4f18\u70b9\uff1a\u6210\u672c\u6700\u4f4e</p> <p>\u7f3a\u70b9\uff1a\u9762\u79ef\u5927\uff0c\u901f\u5ea6\u6162</p> </li> </ul>"},{"location":"cs/computer_logic/chapter3/#cell-libraries","title":"Cell Libraries","text":"<ul> <li>Cell: pre-designed logic block</li> <li>Cell library: a collection of cells</li> <li>Cell characterization: a detailed specification of the cell for use.</li> </ul> <p>Cell Library</p> <p></p>"},{"location":"cs/computer_logic/chapter3/#mapping-to-nand-gate","title":"Mapping to NAND gate","text":"<p>Convert any circuits to NAND gates.</p> <p>Assumptions</p> <ul> <li>Gate loading and delay are ignored.</li> <li>\u53ef\u4ee5\u7528\u4efb\u610f\u591a\u8f93\u5165\u7684 NAND \u95e8</li> </ul> <ol> <li> <p>Convert AND and OR gates to NAND gates</p> <ul> <li>\\(A + B = \\overline{\\overline{A + B}} = \\overline{\\bar A \\bar B}\\)</li> <li>\\(AB = \\overline{\\overline{AB}}\\)</li> </ul> </li> <li> <p>Pushing inverters through circuit fan-out points</p> </li> </ol> <p>Mapping to NOR is similar.</p>"},{"location":"cs/computer_logic/chapter3/#verificaiton","title":"Verificaiton","text":"<ul> <li> <p>Manual Logic Analysis (Simple Circuits)</p> <ul> <li>Write a truth table.</li> <li>Derive Boolean equations.</li> </ul> </li> <li> <p>Simulation</p> <ol> <li>Write a test program.</li> <li>Simulate the circuit.</li> </ol> <p>apply all possible input combinations or important input combinations</p> </li> </ul>"},{"location":"cs/computer_logic/chapter3/#arithmetic-functions","title":"Arithmetic Functions","text":""},{"location":"cs/computer_logic/chapter3/#iterative-combinational-circuits","title":"Iterative Combinational Circuits","text":"<p>Use blocked diagram to process each bit.</p>"},{"location":"cs/computer_logic/chapter3/#half-adder","title":"Half Adder","text":"<p>inputs: \\(X, Y\\); outputs: \\(S, C\\) (sum, carry)</p> \\[\\begin{align} S &amp;= A \\oplus B \\\\ C &amp;= AB \\end{align}\\]"},{"location":"cs/computer_logic/chapter3/#full-adder","title":"Full Adder","text":"<p>inputs: \\(X, Y, Z\\) (\\(Z\\): carry); outputs: \\(S, C\\)</p> \\[\\begin{align} S &amp;= X \\oplus Y \\oplus Z \\\\ C &amp;= XY + XZ + YZ = XY + (X \\oplus Y)Z \\end{align}\\] <p>Implement:</p> \\[\\begin{align} G = XY, P = X \\oplus Y \\\\ S = P \\oplus Z, C = G + PZ \\end{align}\\]"},{"location":"cs/computer_logic/chapter3/#4-bit-ripple-carry-adder","title":"4-bit Ripple-Carry Adder","text":"<p>\u7f3a\u70b9\uff1a\u5ef6\u8fdf\u9ad8\uff08Carry \u9700\u8981\u4f20\u9012\uff09</p> <p>Carry Lookahead</p> <p>\\(P_i = X_i \\oplus Y_i, G_i = X_iY_i\\)</p> <p>\\(C_4 = G_3 + P_3G_2 + P_3P_2G_1 + P_3P_2P_1G_0 + P_3P_2P_1P_0C_0\\)</p> <p>\u7f3a\u70b9\uff1a\u95e8\u8f93\u5165\u6210\u672c\u5927\u3001\u6247\u51fa\u7cfb\u6570\u5927\u5bfc\u81f4\u5ef6\u8fdf\u9ad8\uff0c\u968f\u7740\u4f4d\u6570\u589e\u52a0\uff0c\u6210\u672c\u5927\u5927\u589e\u52a0</p> <p>Group Carry Lookahead Logic</p> <p>16-bit adder: 4 groups</p> \\[\\begin{align} G_{0\\sim 3} &amp;= G_3 + P_3G_2 + P_3P_2G_1 + P_3P_2P_1G_0 \\\\ P_{0\\sim 3} &amp;= P_3P_2P_1P_0 \\end{align}\\] <p></p> <p>CLA: input \\(G_0, P_0, G_1, P_1, G_2, P_2, G_3, P_3\\), output \\(G_{0\\sim 3}, P_{0\\sim 3}\\)</p> <p></p> <p>\u7b2c\u4e00\u5c42\u6700\u53f3 CLA: input \\(G_0, P_0, G_1, P_1, G_2, P_2, G_3, P_3\\), output \\(G_{0\\sim 3}, P_{0\\sim 3}\\)</p> <p>\u7b2c\u4e8c\u5c42 CLA: input \\(C_0, G_{0\\sim 3}, P_{0\\sim 3}, G_{4\\sim 7}, P_{4\\sim 7}, G_{8\\sim 11}, P_{8\\sim 11}, G_{12\\sim 15}, P_{12\\sim 15}\\), output \\(C_4, C_8, C_{12}, C_{16}\\)</p> <p>Longest Delays:</p> <p>\\(A_0, B_0 \\to CLA \\to G_0, P_0 \\to CLA \\to C_{12} \\to CLA \\to C_{16}\\)</p>"},{"location":"cs/computer_logic/chapter3/#unsigned-subtraction","title":"Unsigned Subtraction","text":"<p>Note</p> <p>compute: \\(N - M\\)</p> <ul> <li>\\(N \\geq M\\): \u65e0\u501f\u4f4d</li> <li>\\(N &lt; M\\): \\(N - M = -(2^n - (M - N))\\) \u6700\u9ad8\u4f4d\u501f\u4f4d</li> </ul> <p>\u4e00\u822c\u4e0d\u7528\u8fd9\u79cd\u65b9\u6cd5\u3002</p> <p>2's Complements:</p> <ul> <li>Diminished Radix Complement (DRC) \u53cd\u7801 \\(2^n - M - 1\\)</li> <li>Radix Complement (RC) \u8865\u7801 \\(2^n - M\\)</li> </ul> <p>\\(M - N = M + (2^n - N)\\) (n-bit)</p> <ul> <li>\\(M \\geq N\\): \\(2^n\\) \u6ea2\u51fa\uff0c\\(M - N\\) \u4fdd\u7559</li> <li>\\(M &lt; N\\): \u7ed3\u679c\u4e3a\u8d1f\u6570\uff0c\u6c42\u5f97\u8865\u7801\u3002</li> </ul> <p>\u5982\u679c\u6709\u8fdb\u4f4d\uff0c\u5219\u8bf4\u660e\u7ed3\u679c\u4e3a\u6b63\u6570\uff0c\u65e0\u501f\u4f4d\uff1b\u5426\u5219\u7ed3\u679c\u4e3a\u8d1f\u6570\uff0c\u6709\u501f\u4f4d\u3002</p>"},{"location":"cs/computer_logic/chapter3/#signed-integer","title":"Signed Integer","text":"<p>\u6700\u9ad8\u4f4d\u662f\u7b26\u53f7\u4f4d\uff0c0 \u8868\u793a\u6b63\u6570\uff0c1 \u8868\u793a\u8d1f\u6570\u3002\u4e00\u822c\u91c7\u7528 2's Complements \u5373\u7b26\u53f7\u4f4d+\u8865\u7801\u3002</p> <p>\u7535\u8def\u4e2d\u7684\u5b9e\u73b0</p> <ul> <li>\u52a0\u6cd5\uff1a\u76f4\u63a5\u76f8\u52a0</li> <li>\u51cf\u6cd5\uff1a\u5c06\u51cf\u6570\u53d6\u53cd\u52a0\u4e00\uff08\u53d8\u4e3a\u51cf\u6570\u53d6\u53cd\u4e4b\u540e\u7684\u8865\u7801\uff09\uff0c\u518d\u4e0e\u88ab\u51cf\u6570\u76f8\u52a0</li> </ul> <p></p>"},{"location":"cs/computer_logic/chapter3/#overflow-detection","title":"Overflow Detection","text":"<p>\u901a\u8fc7\u7b26\u53f7\u4f4d\u5224\u65ad\u6ea2\u51fa\uff0c\u6709 8 \u79cd\u60c5\u51b5\uff1a</p> <ul> <li> <p>\u65e0\u6ea2\u51fa</p> <p></p> </li> <li> <p>\u6709\u6ea2\u51fa</p> <p></p> </li> </ul> <p>\uff08\u6ce8\uff1a\u51cf\u8d1f\u6570\u76f8\u5f53\u4e8e\u52a0\u6b63\u6570\uff0c\\(C_{n-1}\\) \u4e3a 0\uff1b\u52a0\u8d1f\u6570\u76f8\u5f53\u4e8e\u51cf\u6b63\u6570\uff0c\\(C_{n-1}\\) \u4e3a 1\uff09</p> <p>\u5f97\u5230\u6ea2\u51fa\u5224\u65ad\u516c\u5f0f\uff1a\\(V = C_{n-1} \\oplus C_{n}\\)\uff0c\u8fd9\u91cc \\(C_{n}\\) \u4e3a\u7ed3\u679c\u7684\u7b26\u53f7\u4f4d\u3002</p>"},{"location":"cs/computer_logic/chapter3/#other-arithmetic-functions","title":"Other Arithmetic Functions","text":"<ul> <li> <p>Incrementer</p> <ul> <li>Adding a fixed value to an arithmetic variable</li> <li>fixec value = 1, called counting up</li> <li>Functional block is called an incrementer</li> </ul> </li> <li> <p>Decrementer</p> <ul> <li>Subtracting a fixed value from an arithmetic variable</li> <li>fixec value = 1, called counting down</li> <li>Functional block is called a decrementer</li> </ul> </li> <li> <p>Multiplier by a Constant: shift left</p> </li> <li>Divider by a Constant: shift right</li> <li> <p>Zero Fill and Extension</p> <ul> <li>Zero fill: add 0s to the MSB or LSB</li> <li>Extension: add 0s or 1s to the MSB to extend the length of the variable (usually copy the sign bit)</li> </ul> </li> </ul> <p>A + 1 Incrementer</p> <p></p>"},{"location":"cs/computer_logic/chapter3/#arithmetic-logic-unit-alu","title":"Arithmetic Logic Unit (ALU)","text":"<p>Decompose the arithmetic circuit into:</p> <ul> <li>An n-bit parallel adder</li> <li>A block of logic that selects four choices for the B input of the adder</li> </ul>"},{"location":"cs/computer_logic/chapter4/","title":"Sequential Circuits","text":""},{"location":"cs/computer_logic/chapter4/#storage-elements-and-analysis","title":"Storage Elements and Analysis","text":""},{"location":"cs/computer_logic/chapter4/#introduction-to-sequential-circuits","title":"Introduction to Sequential Circuits","text":"<p>A Sequential circuit contains:</p> <ul> <li>Storage elements: Latches or Flip-Flops </li> <li> <p>Combinational Logic:</p> <ul> <li>Implements a multiple-output switching function</li> <li>Inputs are signals from the outside.</li> <li>Outputs are signals to the outside.</li> <li>Other inputs, State or Present State, are signals from storage elements. </li> <li>The remaining outputs, Next State are inputs to storage elements. </li> </ul> </li> </ul> <p>Combinatorial Logic:</p> <ul> <li>Next state function \u6b21\u6001\u65b9\u7a0b: Next State = f(Inputs, State)</li> <li>Output function (Mealy \u6a21\u578b): Outputs = g(Inputs, State)</li> <li>Output function (Moore \u6a21\u578b): Outputs = h(State)</li> </ul> <p>Output function type depends on specification and affects the design significantly</p>"},{"location":"cs/computer_logic/chapter4/#types-of-sequential-circuits","title":"Types of Sequential Circuits","text":"<ul> <li> <p>Synchronous \u540c\u6b65</p> <ul> <li>Behavior defined from knowledge of its signals at discrete instances of time</li> <li>Storage elements observe inputs and can change state only in relation to a timing signal (clock pulses from a clock)</li> </ul> <p>\u6240\u6709\u5143\u4ef6\u540c\u6b65\u66f4\u65b0\uff0c\u5728\u65f6\u949f\u5468\u671f\u5185\u66f4\u65b0\u3002\u6709\u5229\u4e8e\u5206\u6790\u548c\u8bbe\u8ba1\u3002</p> </li> <li> <p>Asynchronous \u5f02\u6b65</p> <ul> <li>Behavior defined from knowledge of inputs an any instant of time and the order in continuous time in which inputs change</li> <li>If clock just regarded as another input, all circuits are asynchronous. \u5982\u679c\u65f6\u949f\u4e5f\u88ab\u770b\u505a\u4e00\u4e2a\u8f93\u5165\uff0c\u90a3\u4e48\u6240\u6709\u7535\u8def\u90fd\u662f Asynchronous</li> </ul> <p>\u72b6\u6001\u66f4\u65b0\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u95f4\u53d1\u751f\u3002\u53ef\u4ee5\u6709\u9700\u8981\u7684\u65f6\u5019\u66f4\u65b0\u7535\u8def\uff0c\u964d\u4f4e\u7535\u8def\u7684\u529f\u8017\u3002</p> </li> </ul>"},{"location":"cs/computer_logic/chapter4/#discrete-event-simulation","title":"Discrete Event Simulation \u79bb\u6563\u4e8b\u4ef6\u4eff\u771f","text":"<p>In order to understand the time behavior of a sequential circuit.</p> <p>Gates modeled by an ideal (instantaneous) function and a fixed gate delay. \u6240\u6709\u95e8\u7684\u5ef6\u8fdf\u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u62bd\u8c61\u6210\u7406\u60f3\u7535\u8def\u95e8\u548c\u56fa\u5b9a\u5ef6\u8fdf\u3002</p>"},{"location":"cs/computer_logic/chapter4/#latch","title":"Latch","text":""},{"location":"cs/computer_logic/chapter4/#basic-nand-sr-latch","title":"Basic (NAND) SR Latch","text":"<p>\u5f53 \\(S = R = 1\\) \u65f6\uff0c\u9501\u5b58\u5668\u5c06\u4fdd\u6301\u539f\u6765\u7684\u72b6\u6001\u3002</p> <p>\u5f53 \\(S = 0, R = 0\\) \u65f6\uff0c\u9501\u5b58\u5668\u7684\u72b6\u6001\u672a\u5b9a\u4e49\u3002</p> <p>\u5176\u4f59\u7ec4\u5408\uff0c\u6709 \\(Q = \\bar S\\)\u3002</p> <p>\u8fd9\u79cd\u5b9e\u73b0\u88ab\u79f0\u4f5c \\(\\bar S-\\bar R\\) latch\u3002</p>"},{"location":"cs/computer_logic/chapter4/#basic-nor-sr-latch","title":"Basic (NOR) SR Latch","text":"<p>\u548c NAND SR Latch \u76f8\u53cd\u3002</p>"},{"location":"cs/computer_logic/chapter4/#clocked-sr-latch","title":"Clocked SR Latch","text":"<p>\u5f53 \\(C = 0\\) \u65f6\uff0c\u9501\u5b58\u5668\u4fdd\u6301\u539f\u6765\u7684\u72b6\u6001\uff0c\u5373\u540e\u9762\u7684 \\(\\bar S-\\bar R\\) latch \u5904\u4e8e\u9501\u5b9a\u72b6\u6001\u3002</p> <p>\u5f53 \\(C = 1\\) \u65f6\uff0c\u9501\u5b58\u5668\u7684\u72b6\u6001\u7531 SR latch \u51b3\u5b9a\u3002</p>"},{"location":"cs/computer_logic/chapter4/#d-latch","title":"D Latch","text":"<p>\u6d88\u9664\u4e86\u4e0d\u786e\u5b9a\u72b6\u6001\uff0c\\(C\\) \u63a7\u5236\u9501\u5b58\uff0c\\(D\\) \u63a7\u5236\u8f93\u51fa\u3002\\(C = 1\\) \u65f6 \\(Q = D\\)\u3002</p> <p>Info</p> <p>\u5728\u7b97\u95e8\u8f93\u5165\u6210\u672c\u7684\u65f6\u5019\uff0c\u6211\u4eec\u8981\u5206\u5f00\u7b97 G \u548c GN. \u56e0\u4e3a\u9501\u5b58\u5668\u540c\u65f6\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86 \\(Q\\) \u548c \\(\\bar Q\\)\uff0c\u9501\u5b58\u5668\u53ef\u4ee5\u4e3a\u540e\u9762\u7684\u7ec4\u5408\u7535\u8def\u63d0\u4f9b\u539f\u53d8\u91cf\u548c\u53cd\u53d8\u91cf\u3002</p> <p>The Latch Timing Problem</p> <p>For a clocked D-latch, the output Q depends on the input D whenever the clock input C has value 1.</p> <p>\u9501\u5b58\u5668\u65e0\u6cd5\u505a\u5230\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\u53ea\u66f4\u65b0\u4e00\u6b21\u3002</p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1a\u5c06\u9501\u5b58\u5668\u7684\u8f93\u5165\u548c\u8f93\u51fa\u5206\u5f00\uff0c\u4f7f\u8f93\u5165\u4e0d\u80fd\u76f4\u63a5\u4f5c\u7528\u5728\u8f93\u51fa\u4e0a\u3002</p>"},{"location":"cs/computer_logic/chapter4/#flip-flops","title":"Flip-Flops","text":""},{"location":"cs/computer_logic/chapter4/#sr-master-slave-flip-flop","title":"SR Master-Slave Flip-Flop","text":"<p>\u524d\u9762\u7684\u9501\u5b58\u5668\u79f0\u4e3a Master\uff0c\u540e\u9762\u7684\u9501\u5b58\u5668\u79f0\u4e3a Slave\u3002</p> <p>\u5f53 \\(C = 0\\) \u65f6\uff0cMaster \u9501\u5b58\u5668\u4e0d\u53d8\u3002</p> <p>\u5f53 \\(C = 1\\) \u65f6\uff0cMaster \u9501\u5b58\u5668\u7684\u72b6\u6001\u7531 SR latch \u51b3\u5b9a\uff0cSlave \u9501\u5b58\u5668\u88ab\u9501\u5b9a\u3002</p> <p>\u5f53 \\(C\\) \u4ece 1 \u53d8\u4e3a 0 \u65f6\uff0cMaster \u9501\u5b58\u5668\u7684\u72b6\u6001\u88ab\u9501\u5b9a\uff0cSlave \u9501\u5b58\u5668\u7684\u8f93\u5165\u63a5\u6536 Master \u9501\u5b58\u5668\u7684\u8f93\u51fa\uff0c\u72b6\u6001\u88ab\u6539\u53d8\u3002</p> <p>1s catching \u4e00\u6b21\u6027\u91c7\u6837\u95ee\u9898</p> <p>\u5f53 \\(C = 1\\) \u65f6\uff0c\u82e5 \\(S,R\\) \u51fa\u73b0\u5c0f\u6270\u52a8\uff0c\u4f46\u662f\u5728 \\(C\\) \u53d8\u4e3a 0 \u4e4b\u524d\u6062\u590d\uff0c\u90a3\u4e48 \\(Q\\) \u7684\u72b6\u6001\u5c06\u4f1a\u88ab\u6539\u53d8\u3002</p> <p>\u89e3\u51b3\u65b9\u6cd5\uff1aUse edge-triggering instead of master-slave \u4f7f\u7528\u8fb9\u6cbf\u89e6\u53d1\u4ee3\u66ff\u4e3b\u4ece\u9501\u5b58\u5668\u3002</p>"},{"location":"cs/computer_logic/chapter4/#edge-triggered-d-flip-flop","title":"Edge-Triggered D Flip-Flop","text":"<p>The delay of the S-R master-slave flip-flop can be avoided since the 1s-catching behavior is not present with D replacing S and R inputs.</p> <p>It is called a negative-edge triggered flip-flop, \u8d1f\u8fb9\u6cbf\u89e6\u53d1\u5668\u3002</p> <p>\u540c\u6837\u6709\u6b63\u8fb9\u6cbf\u89e6\u53d1\u5668\uff1a</p>"},{"location":"cs/computer_logic/chapter4/#actual-circuit-of-edge-triggered-d-flip-flop","title":"Actual Circuit of Edge-Triggered D Flip-Flop:","text":""},{"location":"cs/computer_logic/chapter4/#standard-symbols-for-storage-elements","title":"Standard Symbols for Storage Elements","text":"<p>Direct Inputs</p> <p>Direct R and/or S inputs that control the state of the latches within the flip-flops are used for initialization. \u76f4\u63a5\u8f93\u5165\u7684 R \u548c/\u6216 S \u7528\u4e8e\u521d\u59cb\u5316\u89e6\u53d1\u5668\u72b6\u6001\uff0c\u8fd9\u4e00\u64cd\u4f5c\u4e00\u822c\u662f\u5f02\u6b65\u7684\u3002</p> <p></p>"},{"location":"cs/computer_logic/chapter4/#sequential-circuit-analysis","title":"Sequential Circuit Analysis","text":"<p>General Model:</p> <ul> <li>Current State at time (t) is stored in an array of flip-flops.\u00a0</li> <li>Next State at time (t+1) is a Boolean function of State and Inputs.</li> <li>Outputs at time (t) are a Boolean function of State (t) and (sometimes) Inputs (t).</li> </ul> <p>Example</p> <p></p> <ul> <li>Current State: \\(A, B\\)</li> <li>Next State: \\(A(t+1) = AX + BX, B(t+1) = \\bar AX\\)</li> <li>Output: \\(Y = (A + B)\\bar X\\)</li> </ul>"},{"location":"cs/computer_logic/chapter4/#state-table","title":"State Table","text":"<p>A multiple variable table with the following four sections:</p> <ul> <li>Present State: the values of the state variables for each allowed state.</li> <li>Inputs: the input combinations allowed</li> <li>Next state: the value of the state at time (t+1) based on the present state and the input.</li> <li>Outputs: the value of the output as a function of the present state and (sometimes) the input.</li> </ul> <p>Example</p> <p>\u4e0a\u4e00\u4f8b\u4e2d\u7684\u7535\u8def\u56fe\u7684\u72b6\u6001\u8868\uff1a</p> <p></p> <p>\u6216\u8005\u5199\u6210\uff1a</p> <p></p>"},{"location":"cs/computer_logic/chapter4/#state-diagrams","title":"State Diagrams","text":"<p>The sequential circuit function can be represented in graphical form as a state diagram.</p> <p>Label form:</p> <ul> <li>On circle with output included:<ul> <li>state/output</li> <li>Moore type output depends only on state</li> </ul> </li> <li>On directed arc with the output included:<ul> <li>input/output</li> <li>Mealy type output depends on state and input</li> </ul> </li> </ul> <p>Example</p> <p></p> <p>Equivalent State Definitions</p> <p>Two states are equivalent if their outputs produced for each input symbol is identical and their next states for each input symbol are the same or equivalent.</p> <p>\u82e5\u4e24\u4e2a\u72b6\u6001\u63a5\u53d7\u76f8\u540c\u8f93\u5165\u540e\u8f93\u51fa\u76f8\u540c\uff0c\u4e14\u4e0b\u4e00\u4e2a\u72b6\u6001\u76f8\u540c\u6216\u7b49\u4ef7\uff0c\u5219\u4e24\u4e2a\u72b6\u6001\u7b49\u4ef7\u3002</p> Example <p></p> <p>\u56fe\u4e2d S1\u3001S2\u3001S3 \u7b49\u4ef7\uff0c\u53ef\u4ee5\u5199\u6210\u4e00\u4e2a\u72b6\u6001\uff1a</p> <p></p>"},{"location":"cs/computer_logic/chapter4/#moore-and-mealy-models","title":"Moore and Mealy Models","text":"<p>Sequential Circuits or Sequential Machines are also called Finite State Machines (FSMs). Two formal models exist:</p> <ul> <li> <p>Moore Model: the outputs depend only on the present state.</p> <p>State Diagram \u4e2d\uff0c\u8f93\u51fa\u5199\u5728\u72b6\u6001\u8282\u70b9\u4e0a\u3002</p> </li> <li> <p>Mealy Model: the outputs depend on the present state and the inputs.</p> <p>State Diagram \u4e2d\uff0c\u8f93\u51fa\u5199\u5728\u72b6\u6001\u8f6c\u79fb\u8fb9\u4e0a\u3002</p> </li> </ul>"},{"location":"cs/computer_logic/chapter4/#flip-flop-timing-parameters","title":"Flip-Flop Timing Parameters","text":"<ul> <li>\\(t_s\\): setup time \u51c6\u5907\u65f6\u95f4\uff0c\u5728\u72b6\u6001\u8fdb\u884c\u66f4\u65b0\u4e4b\u524d\u9700\u8981\u51c6\u5907\u597d</li> <li>\\(t_h\\): hold time \u4e00\u822c\u4e3a 0\uff0c\u4fdd\u6301\u65f6\u95f4\uff0c\u5728\u72b6\u6001\u66f4\u65b0\u4e4b\u540e\u9700\u8981\u4fdd\u6301\u4e00\u6bb5\u65f6\u95f4</li> <li>\\(t_w\\): clock pulse width, usually \\(t_{wH} = t_{wL}\\)</li> <li>\\(t_{px}\\): propagation delay<ul> <li>\\(t_{PHL}\\): High-to-Low</li> <li>\\(t_{PLH}\\): Low-to-High</li> <li>\\(t_{pd}\\): \\(\\max(t_{PHL}, t_{PLH})\\) </li> </ul> </li> </ul>"},{"location":"cs/computer_logic/chapter4/#circuit-and-system-level-timing","title":"Circuit and System Level Timing","text":"<p>\u8ba1\u7b97\u89e6\u53d1\u5668\u4ece\u8f93\u51fa\u5230\u8f93\u5165\u7684\u5ef6\u8fdf\uff0c\u53ef\u4ee5\u5c06\u51fa\u53d1\u5668\u7684\u8f93\u51fa\u548c\u8f93\u5165\u62c6\u5f00\uff0c\u66f4\u52a0\u76f4\u89c2\u5730\u8ba1\u7b97\u5ef6\u8fdf\u3002</p> <p>If the clock period is too short, some data changes will not propagate through the circuit to flip-flop inputs before the setup time interval begins.</p> <p>New timing components:</p> <ul> <li>\\(t_p\\): clock period \u65f6\u949f\u5468\u671f</li> <li>\\(t_{pd,COMB}\\): total delay of combinational logic along the path from flip-flop output to flip-flop input</li> <li>\\(t_{slack}\\): extra time in the clock period in addition to the sum of the delays and setup time on a path </li> </ul> <p>\u964d\u4f4e\u5ef6\u8fdf\uff1a\u4e3b\u8981\u8003\u8651\u4f18\u5316 \\(t_{pd,COMB}\\)\uff0c\u51cf\u5c11\u7ec4\u5408\u903b\u8f91\u7684\u5ef6\u8fdf\u3002</p> <p>Time equation</p> \\[ t_p \\geq \\max(t_{pd,FF} + t_{pd,COMB} + t_s) \\] <p>for all paths from flip-flop output to flip-flop input.</p> <p>Example</p> <ul> <li>\\(t_{pd,FF} = 1.0 ns\\)</li> <li>\\(t_s = 0.3 ns\\) for edge-triggered flip-flops</li> <li>\\(t_s = t_{wH} = 2.0 ns\\) for master-slave flip-flops</li> <li>Clock frequency = 250 MHz</li> </ul> <p>Calculations:</p> <p>\\(t_p = 1 / 250 MHz = 4.0 ns\\)</p> <ul> <li> <p>Edge-triggered: \\(4.0 \\geq 1.0 + t_{pd,COMB} + 0.3 \\Rightarrow t_{pd,COMB} \\leq 2.7 ns\\)</p> <p>Approximately 9 gates allowed on a path</p> </li> <li> <p>Master-slave: \\(4.0 \\geq 1.0 + t_{pd,COMB} + 2.0 \\Rightarrow t_{pd,COMB} \\leq 1.0 ns\\)</p> <p>Approximately 3 gates allowed on a path</p> </li> </ul>"},{"location":"cs/computer_logic/chapter4/#sequential-circuit-design","title":"Sequential Circuit Design","text":"<p>The Design Procedure:</p> <ul> <li>Specification</li> <li>Formulation: Obtain a state diagram or state table</li> <li>State Assignment: Assign binary codes to the states</li> <li>Flip-Flop Input Equation Determination</li> <li>Output Equation Determination</li> <li>Optimization</li> <li>Technology Mapping</li> <li>Verification</li> </ul>"},{"location":"cs/computer_logic/chapter4/#specification","title":"Specification","text":"<p>Component Forms of Specification</p> <ul> <li>State Diagram</li> <li>State Equations</li> <li>HDL codes</li> <li>...</li> </ul>"},{"location":"cs/computer_logic/chapter4/#formulation","title":"Formulation","text":"<p>A state is an abstraction of the history of the past applied inputs to the circuit.</p> <p>\u89e6\u53d1\u5668\u6570\u91cf\u9009\u62e9\uff1a\\(n = \\lceil \\log_2 m \\rceil\\)\uff0c\\(m\\) \u4e3a\u72b6\u6001\u6570\u3002</p> <p>Sequence Recognizer Procedure \u5e8f\u5217\u8bc6\u522b\u5668</p> <p>\u7528\u5904\uff1a\u8bc6\u522b\u8f93\u5165\u5e8f\u5217\uff08\u6bd4\u5982\u8bc6\u522b\u901a\u4fe1\u5e8f\u5217\u4e2d\u7684\u5f00\u59cb\u548c\u7ed3\u675f\uff09\u3002</p> <p>Example: Recognize the sequence 1101.</p> <ul> <li> <p>\u8bc6\u522b 1101:</p> <p></p> </li> <li> <p>\u8003\u8651\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\uff1a</p> <p></p> </li> <li> <p>\u5f97\u5230\u72b6\u6001\u8868</p> <p></p> </li> </ul> <p>\u4e0a\u8ff0\u8fc7\u7a0b\u662f Mealy Model\uff0c\u5982\u679c\u662f Moore Model\uff0c\u5219\u8fd8\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u72b6\u6001\uff1a</p> <p></p> <p></p>"},{"location":"cs/computer_logic/chapter4/#simplification-of-state-diagrams","title":"Simplification of State Diagrams","text":"<p>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u539f\u59cb\u72b6\u6001\u56fe\u548c\u539f\u59cb\u72b6\u6001\u8868\u4e2d\u5b58\u5728\u7740\u591a\u4f59\u7684\u72b6\u6001\u3002\u72b6\u6001\u4e2a\u6570\u8d8a\u591a\uff0c\u7535\u8def\u4e2d\u6240\u9700\u7684\u89e6\u53d1\u5668\u7684\u6570\u76ee\u4e5f\u8d8a\u591a\uff0c\u5236\u9020\u6210\u672c\u5c31\u8d8a\u9ad8\u3002\u4e3a\u964d\u4f4e\u5236\u9020\u6210\u672c\uff0c\u9700\u8981\u53bb\u6389\u591a\u4f59\u7684\u72b6\u6001\u3002</p> <p>\u6240\u8c13\u72b6\u6001\u7b80\u5316\uff0c\u5c31\u662f\u8981\u83b7\u5f97\u4e00\u4e2a\u6700\u5c0f\u5316\u7684\u72b6\u6001\u8868\u3002\u8fd9\u4e2a\u8868\u4e0d\u4ec5\u80fd\u6b63\u786e\u5730\u53cd\u6620\u8bbe\u8ba1\u7684\u5168\u90e8\u8981\u6c42\uff0c\u800c\u4e14\u72b6\u6001\u7684\u6570\u76ee\u6700\u5c11\u3002</p> <p>\u72b6\u6001\u7b49\u6548\uff1a\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u8f93\u5165\u5e8f\u5217\uff0c\u4e24\u4e2a\u72b6\u6001\u7684\u8f93\u51fa\u5e8f\u5217\u76f8\u540c\uff0c\u4e14\u4e0b\u4e00\u4e2a\u72b6\u6001\u76f8\u540c\u6216\u7b49\u6548\uff0c\u5219\u4e24\u4e2a\u72b6\u6001\u7b49\u6548\uff0c\u53ef\u4ee5\u5408\u5e76\u3002</p> <p>\u72b6\u6001\u7b49\u6548\u5224\u522b\uff1a</p> <p>\u9996\u5148\u8f93\u51fa\u76f8\u540c\uff0c\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u4e09\u4e2a\u6761\u4ef6\u4e4b\u4e00\uff1a</p> <ul> <li>\u6b21\u6001\u76f8\u540c</li> <li>\u6b21\u6001\u4ea4\u9519</li> <li>\u6b21\u6001\u5faa\u73af</li> </ul> <p>Example</p> <ul> <li> <p>\u6b21\u6001\u76f8\u540c</p> <p></p> </li> <li> <p>\u6b21\u6001\u76f8\u540c\u6216\u4ea4\u9519</p> <p></p> </li> <li> <p>\u6b21\u6001\u76f8\u540c\u6216\u7b49\u6548\uff08\\(S_k, S_l\\) \u7b49\u6548\uff09</p> <p></p> </li> <li> <p>\u6b21\u6001\u4ea4\u9519\u6216\u76f8\u540c\u6216\u5faa\u73af</p> <p></p> </li> </ul> <p>\u5316\u7b80\u65b9\u6cd5\uff1a</p> <ol> <li> <p>\u89c2\u5bdf\u6cd5\u5316\u7b80</p> <p>\u4ece\u72b6\u6001\u56fe/\u72b6\u6001\u8868\u4e2d\u89c2\u5bdf\u51fa\u7b49\u6548\u72b6\u6001\uff0c\u7136\u540e\u5408\u5e76\u3002</p> </li> <li> <p>\u9690\u542b\u8868\u6cd5\u5316\u7b80</p> <p>\u72b6\u6001 \\(S_1, \\dots, S_n\\)\uff0c\u4f5c \\((n-1) \\times (n-1)\\) \u7684\u68af\u5f62\u56fe\uff0c\u5217\u5206\u5e03\u4ee3\u8868 \\(S_1, \\dots, S_{n-1}\\)\uff0c\u884c\u5206\u522b\u4ee3\u8868 \\(S_2, \\dots, S_n\\), \u6bcf\u4e2a\u683c\u5b50\u4ee3\u8868 \\(S_i, S_j\\) \u7684\u6b21\u6001\u662f\u5426\u76f8\u540c\uff0c\u82e5\u65e0\u6cd5\u786e\u5b9a\uff0c\u5219\u5199\u4e0a\u4f9d\u8d56\u7684\u72b6\u6001\u5bf9\u3002\u53ef\u4ee5\u5bb9\u6613\u5730\u770b\u51fa\u4f9d\u8d56\u5173\u7cfb\uff0c\u4ece\u800c\u8fdb\u884c\u5316\u7b80\u3002</p> <p>Example</p> <p>\u5316\u7b80\uff1a</p> <p></p> <p>\u753b\u51fa\u9690\u542b\u8868\uff1a</p> <p></p> <p>\u53ef\u4ee5\u770b\u51fa\uff1a</p> <ul> <li>\\(AB \\rightarrow CF \\rightarrow equivalent\\)</li> <li>\\(AE \\leftrightarrows BE \\rightarrow CF \\rightarrow equivalent \\Rightarrow ABE \\rightarrow equivalent\\)</li> </ul> <p>\u786e\u5b9a\u6700\u5927\u7b49\u6548\u7c7b\uff0c\u4f5c\u6700\u5c0f\u5316\u72b6\u6001\u8868\uff1a</p> <ul> <li>\u56db\u4e2a\u7b49\u6548\u5bf9 \\((A,B), (A,E), (B,E), (C,F)\\)</li> <li>\u6700\u5927\u7b49\u6548\u7c7b \\((A,B,E)\\)</li> <li>\u56db\u4e2a\u72b6\u6001 \\((A,B,E), (C,F), (D), (G)\\)</li> </ul> <p>\u4ee4\u4ee5\u4e0a\u56db\u4e2a\u72b6\u6001\u4f9d\u6b21\u4e3a \\(a, b, c, d\\)\uff0c\u753b\u51fa\u6700\u5c0f\u5316\u72b6\u6001\u8868\uff1a</p> <p></p> </li> </ol>"},{"location":"cs/computer_logic/chapter4/#state-assignment","title":"State Assignment","text":"<p>If the number of states is \\(m\\), then \\(n = \\lceil \\log_2 m \\rceil\\) bits are required to represent the states.</p> <p>There are \\((2^n)!/m!\\) assignments of codes with a minimum number of bits.</p>"},{"location":"cs/computer_logic/chapter4/#find-flip-flop-input-and-output-equations","title":"Find Flip-Flop Input and Output Equations","text":"<p>Use K-maps to compute the equations of \\(D_i, X_{output}\\) with respect to \\(X_{input}, Q_i\\).</p> <p>\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u72b6\u6001\u5206\u914d\u7684\u65b9\u6848\u4e0d\u4e00\u6837\uff0c\u6240\u5f97\u5230\u7684\u8f93\u51fa\u51fd\u6570\u548c\u6fc0\u52b1\u51fd\u6570\u7684\u8868\u8fbe\u5f0f\u4e5f\u4e0d\u540c\uff0c\u7531\u6b64\u800c\u8bbe\u8ba1\u51fa\u6765\u7684\u7535\u8def\u590d\u6742\u5ea6\u4e5f\u4e0d\u540c\u3002</p> <p>\u5b9e\u9645\u5e94\u7528\u65f6\u90fd\u662f\u91c7\u7528\u5de5\u7a0b\u8fd1\u4f3c\u7684\u65b9\u6cd5\uff0c\u4f9d\u636e\u4ee5\u4e0b\u56db\u6761\u4ef6\u539f\u5219\u6765\u8fdb\u884c\u72b6\u6001\u5206\u914d\uff1a</p> <ul> <li>\u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u8f93\u51fa \u5b8c\u5168\u76f8\u540c \u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801</li> <li>\u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f91 <code>0</code></li> </ul> <p>\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7b2c\u4e00\u6761\u539f\u5219\u8f83\u4e3a\u91cd\u8981\uff0c\u9700\u4f18\u5148\u8003\u8651\uff0c\u5176\u6b21\u8981\u8003\u8651\u7531\u524d\u4e09\u6761\u539f\u5219\u5f97\u5230\u7684\u5e94\u5206\u914d\u76f8\u90bb\u4ee3\u7801\u7684\u72b6\u6001\u5bf9\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6b21\u6570\u591a\u7684\u72b6\u6001\u5bf9\u5e94\u4f18\u5148\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u3002</p> <p>Example</p> <p>\u5bf9\u4e0b\u5217\u72b6\u6001\u8868\u8fdb\u884c\u72b6\u6001\u5206\u914d\uff1a</p> <p></p> <ul> <li>\u5728\u76f8\u540c\u8f93\u5165\u6761\u4ef6\u4e0b\u5177\u6709\u76f8\u540c\u6b21\u6001\u7684\u73b0\u6001\uff0c\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1aA \u548c B\uff0cA \u548c C \u5e94\u76f8\u90bb</li> <li>\u5728\u76f8\u90bb\u8f93\u5165\u6761\u4ef6\uff0c\u540c\u4e00\u73b0\u6001\u7684\u6b21\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1aC \u548c D\uff0cC \u548c A\uff0cB \u548c D\uff0cA \u548c B \u5e94\u76f8\u90bb</li> <li>\u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u7684\u73b0\u6001\u5e94\u5c3d\u53ef\u80fd\u5206\u914d\u76f8\u90bb\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\uff1a A\uff0cB\uff0cC \u4e09\u8005\u5e94\u76f8\u90bb\uff0c\u5373 A \u548c B\uff0cA \u548c C\uff0cB \u548c C\u5e94\u76f8\u90bb</li> <li>\u6700\u5c0f\u5316\u72b6\u6001\u8868\u4e2d\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u72b6\u6001\u6216\u521d\u59cb\u72b6\u6001\u5e94\u5206\u914d\u903b\u8f91 0\uff1aA \u5206\u914d\u4e3a\u903b\u8f91 0</li> </ul> <p>\u7531\u6b64\u5f97\u5230\u72b6\u6001\u5206\u914d\u65b9\u6848\uff1a</p> <p></p>"},{"location":"cs/computer_logic/chapter4/#sequential-design-example","title":"Sequential Design Example","text":"<p>Design a sequential modulo 3 accumulator for 2-bit operands.</p> <ul> <li>Modulo n adder: an adder that gives the result of the addition as the remainder of the sum divided by n.</li> <li>Accumulator: a circuit that \"accumulates\" the sum of its input operands over time - it adds each input operand to the stored sum, which is initially 0. </li> </ul> <p>Stored sum: \\((Y_1, Y_0)\\). Input: \\((X_1, X_0)\\). Output: \\((Z_1, Z_0)\\)</p> <p>State diagram:</p> <p>State table:</p> <p>State assignment \\(\\to\\) Flip-flop input equations.</p>"},{"location":"cs/computer_logic/chapter4/#other-flip-flop-types","title":"Other Flip-Flop Types","text":""},{"location":"cs/computer_logic/chapter4/#j-k-flip-flop","title":"J-K Flip-flop","text":"<p>Similar to SR flip-flop, but without the invalid state.</p> <p>\\(J = K = 1\\) \u65f6\uff0c\u72b6\u6001\u6c42\u53cd\u3002</p> <p>\u4e3b\u4ece\u89e6\u53d1\u5668\u5b9e\u73b0\uff0c\u6709 1s catching \u95ee\u9898\u3002</p> <p>\u7528 D \u89e6\u53d1\u5668\u5b9e\u73b0\uff0c\u907f\u514d 1s catching \u95ee\u9898\uff1a</p> <p>\u4e0a\u5347\u6cbf\u89e6\u53d1\u3002</p>"},{"location":"cs/computer_logic/chapter4/#t-flip-flop","title":"T Flip-flop","text":"<ul> <li>For \\(T = 0\\), no change in state</li> <li>For \\(T = 1\\), changes to opposite state</li> </ul> <p>Same as a J-K flip-flop with \\(J = K = T\\)</p> <p>\u4e00\u822c\u4f1a\u5f3a\u5236\u8bbe\u7f6e\u521d\u6001\u3002</p> <p>\u7528 D \u89e6\u53d1\u5668\u5b9e\u73b0\uff1a</p>"},{"location":"cs/computer_logic/chapter4/#basic-flip-flop-descriptors","title":"Basic Flip-Flop Descriptors","text":"<p>Used in analysis:</p> <ul> <li>characteristic table \u7279\u5f81\u8868: defines the next state of the flip-flop in terms of flip-flop inputs and current state</li> <li>characteristic equation \u7279\u5f81\u65b9\u7a0b: defines the next state of the flip-flop as a Boolean function of flip-flop inputs and current state</li> </ul> <p>Used in design:</p> <ul> <li>excitation table \u6fc0\u52b1\u8868: defines the flip-flop input variable values as function of the current state and next state</li> </ul> <p>D Flip-Flop Descriptors</p> <p>Characteristic table:</p> <p></p> <p>Characteristic equation:</p> \\[     Q(t + 1) = D \\] <p>Excitation table:</p> <p></p> <p>S-R Flip-Flop Descriptors</p> <p>Characteristic table:</p> <p></p> <p>Characteristic equation:</p> \\[     Q(t + 1) = S + \\bar R \\cdot Q(t), S \\cdot R = 0 \\] <p>Excitation table:</p> <p></p>"},{"location":"cs/intro_to_ai/ai/","title":"\u4eba\u5de5\u667a\u80fd\u5f15\u8bba","text":""},{"location":"cs/intro_to_ai/ai/#_2","title":"\u903b\u8f91\u4e0e\u63a8\u7406","text":""},{"location":"cs/intro_to_ai/ai/#_3","title":"\u547d\u9898\u903b\u8f91","text":""},{"location":"cs/quantum/introduction/","title":"Basic Definition in Quantum Computing","text":""},{"location":"cs/quantum/introduction/#qubit","title":"Qubit","text":"<p>A vector \\(a \\mathinner{|0\\rangle} + b \\mathinner{|1\\rangle}\\), \\(|a|^2 + |b|^2 = 1\\), in which</p> \\[ \\mathinner{|0\\rangle} = \\begin{pmatrix}1\\\\0\\end{pmatrix}, \\mathinner{|1\\rangle} = \\begin{pmatrix}0\\\\1\\end{pmatrix} \\]"},{"location":"cs/quantum/introduction/#classical-gate","title":"Classical Gate","text":"<p>AND, OR, NOT, NAND...</p> <p>Call a set of gates universal if it can compute any \\(f:\\{0, 1\\}^n \\rightarrow \\{0, 1\\}\\).</p> <p>Ex. {AND, OR, NOT}, {NAND}</p> <p>NAND \u80fd\u591f\u5b9e\u73b0 NOT\u3001AND \uff0cOR \u80fd\u88ab NOT\u3001AND \u5b9e\u73b0\u3002\u5219 {NAND} is universal.</p>"},{"location":"cs/quantum/introduction/#reversible-computing","title":"Reversible Computing","text":"<p>AND gate is not reversible. Cannot recover (x,y) pairs with the output f(x, y).</p> <p>Toffoli gate is reversible and universal:</p> <p>(x, y, z) -&gt; (x, y, (x AND y)\\(\\oplus\\) z)</p> <p>By reversible circuit:</p> <p></p> <p>Input: \\((x_1, \\cdots, x_n)\\).</p> <p>Output: \\((y_1, \\cdots, y_m)\\).</p> <p>Junk: \\((j_1, \\cdots, j_k)\\).</p> <p>\u53f3\u56fe\u5c06\u8f93\u51fa\u590d\u5236\uff0c\u518d\u5c06\u8fdb\u884c C \u7684\u9006\u8fd0\u7b97\uff0c\u6700\u540e\u4ec5\u83b7\u5f97\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u53bb\u6389 Junk \u90e8\u5206\u3002</p> <p>Whenever we compute \\(x \\to f(x)\\) efficiently, we can efficiently reversibly compute:</p> \\[ (x, y, 0) \\to (x, y \\oplus f(x), 0) \\]"},{"location":"cs/quantum/introduction/#postulates-in-quantum-computing","title":"Postulates in quantum computing","text":""},{"location":"cs/quantum/introduction/#quantum-states","title":"Quantum States","text":"<p>Qubit: \\(\\begin{pmatrix}a_0 \\\\ a_1\\end{pmatrix}, a_0, a_1 \\in \\mathbb{C}\\), called \"amplitude\", satisfy \\(|a_0|^2 + |a_1|^2 = 1\\)</p> <p>Basic vectors: \\(\\mathinner{|0\\rangle} = \\begin{pmatrix}1\\\\0\\end{pmatrix},\\mathinner{|1\\rangle} = \\begin{pmatrix}0\\\\1\\end{pmatrix}\\)</p> <p>Call them a computational basis for a qubit. Ex. \\(\\mathinner{|\\varphi\\rangle} = a_0 \\mathinner{|0\\rangle} + a_1 \\mathinner{|1\\rangle}\\). \"ket\"</p> <p>Dual vector \u5171\u8f6d\u8f6c\u7f6e \\(\\mathinner{\\langle\\varphi|} = a_0^*\\mathinner{\\langle0|} + a_1^*\\mathinner{\\langle1|}\\). \"bra\"</p> <p>Inner product</p> <p>\\(\\mathinner{\\langle\\phi|}\\mathinner{|\\varphi\\rangle} = \\mathinner{\\langle\\phi|\\varphi\\rangle}\\)</p> <p>\\(\\mathinner{\\langle\\varphi|\\varphi\\rangle} = 1\\)</p> <p>Outer product</p> <p>\\(\\mathinner{|0\\rangle}\\mathinner{\\langle0|} + \\mathinner{|1\\rangle}\\mathinner{\\langle1|} = \\mathbf{I}\\)</p> <p>Express All Quantum States</p> <p>\\(\\mathinner{|\\varphi\\rangle} = \\cos{\\frac{\\theta}{2}}\\mathinner{|0\\rangle} + e^{i\\phi}\\sin{\\frac{\\theta}{2}}\\mathinner{|1\\rangle}\\)</p> <p>Bloch Sphere</p> <p></p>"},{"location":"cs/quantum/introduction/#quantum-dynamics-time-evolution","title":"Quantum Dynamics / Time Evolution","text":"<p>Basic Assumption \u6240\u6709 quantum states \u4e8c\u8303\u6570\u4e0b\u4e0d\u53d8</p>"},{"location":"hpc/","title":"HPC","text":"<p>Abstract</p> <p>\u5f52\u6863 HPC \u7684\u4e00\u4e9b\u5b66\u4e60\u7b14\u8bb0</p>"},{"location":"hpc/cute/layout/","title":"Layout","text":""},{"location":"hpc/cute/layout/#layout_1","title":"Layout \u63cf\u8ff0","text":""},{"location":"hpc/cute/layout/#_1","title":"\u5386\u53f2\u9636\u6bb5","text":"<ul> <li>BLAS: row/column major + leading dimension</li> <li>Tensor: shape + stride</li> <li>Hierarchy Tensor</li> </ul>"},{"location":"hpc/cute/layout/#_2","title":"\u4e00\u7ef4\u5411\u91cf","text":"<p>shape(8), stride(1) \u8868\u793a\u5305\u62ec 8 \u4e2a\u903b\u8f91\u4f4d\u7f6e\uff0c\u903b\u8f91\u4f4d\u7f6e\u548c\u7269\u7406\u4f4d\u7f6e\u6620\u5c04\u65f6\u6bcf\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u4e3a 1</p> <p>\u5176\u8ba1\u7b97\u903b\u8f91\u4e3a \\(index_{physical} = index_{logical} * stride\\)</p> <pre><code>shape(8), stride(1)\nlogical:   0 1 2 3 4 5 6 7\nphysical:  0 1 2 3 4 5 6 7\n</code></pre> <pre><code>shape(8), stride(2)\nlogical:   0   1   2   3   4   5     6     7\nphysical:  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n</code></pre> <pre><code>shape(8), stride(0)\nlogical:   0 1 2 3 4 5 6 7\nphysical:  0\n</code></pre> <pre><code>shape(8), stride(-1)\nlogical:                        0 1 2 3 4 5 6 7\nphysical:  -7 -6 -5 -4 -3 -2 -1 0\n</code></pre>"},{"location":"hpc/cute/layout/#_3","title":"\u4e8c\u7ef4\u77e9\u9635","text":"<p>shape(2, 3), stride(3, 1) \u8868\u793a 2 \u884c 3 \u5217\u7684\u77e9\u9635\u3002\u5bf9\u4e8e\u6bcf\u884c\u4e4b\u95f4\uff0c\u903b\u8f91\u4f4d\u7f6e\u548c\u7269\u7406\u4f4d\u7f6e\u6620\u5c04\u65f6\u6bcf\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u4e3a 3\uff1b\u5bf9\u4e8e\u6bcf\u5217\u4e4b\u95f4\uff0c\u903b\u8f91\u4f4d\u7f6e\u548c\u7269\u7406\u4f4d\u7f6e\u6620\u5c04\u65f6\u6bcf\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u5dee\u4e3a 1</p> <p>\u4e8c\u7ef4\u7a7a\u95f4\u7684\u5217\u4f18\u5148\u63cf\u8ff0\uff1ashape(3, 4), stride(1, 3) \uff1b\u884c\u4f18\u5148\u63cf\u8ff0\uff1ashape(3, 4), stride(4, 1)</p> <pre><code>shape(2, 3), stride(3, 1)\n\nlogical:   (0,0) (0,1) (0,2)\n           (1,0) (1,1) (1,2)\n\noffset:    0 1 2\n           3 4 5\n\npyhsical:  0 1 2 3 4 5\n</code></pre> <p>\u5176\u6620\u5c04\u5173\u7cfb\u4e3a \\(index_{physical} = \\sum_{i:dim} index_{logical,i} * stride_i\\)</p>"},{"location":"hpc/cute/layout/#layout_2","title":"\u6709\u5c42\u6b21\u7684 Layout","text":"<p>\u5176\u4e2d</p> <pre><code>A:\n(4, 8) &lt;- shape\n(1, 4) &lt;- stride\n</code></pre> <p>\u8868\u793a 4 \u884c 8 \u5217\uff0c\u6bcf\u884c\u7269\u7406\u4f4d\u7f6e\u4e4b\u5dee\u4e3a 1\uff0c\u6bcf\u5217\u7269\u7406\u4f4d\u7f6e\u4e4b\u5dee\u4e3a 4</p> <pre><code>C:\n[4, (2, 4)] &lt;- shape\n[2, (1, 8)] &lt;- stride\n</code></pre> <p>\u8868\u793a 4 \u884c 8 \u5217\u7684\u77e9\u9635\uff0c\u4e14\u5bf9\u5217\u8fdb\u884c\u5206\u5757\u5927\u5c0f\u4e3a 2 \u7684\u5206\u5757\uff0c\u6bcf\u884c\u7269\u7406\u4f4d\u7f6e\u4e4b\u5dee\u4e3a 1\uff0c\u6bcf\u5217\u4e2d\u5206\u5757\u5185\u76f8\u90bb\u5143\u7d20\u7269\u7406\u4f4d\u7f6e\u4e4b\u5dee\u4e3a 1\uff0c\u76f8\u90bb\u5206\u5757\u4e4b\u95f4\u7269\u7406\u4f4d\u7f6e\u4e4b\u5dee\u4e3a 8\u3002</p> <p>cute \u63d0\u4f9b\u4e86 <code>make_shape</code> \u548c <code>make_stride</code> \u4e24\u4e2a\u51fd\u6570\u6765\u6784\u9020\u5c42\u6b21\u7684 shape \u548c stride.</p> <p>\u5e38\u91cf shape\uff1a</p> <pre><code>auto shape = make_shape(Int&lt;2&gt;{}, Int&lt;3&gt;{});\nauto shape1 = make_shape(shape, Int&lt;3&gt;{});\n</code></pre> <p>\u53d8\u91cf shape\uff1a</p> <pre><code>auto shape = make_shape(m, n);\n</code></pre>"},{"location":"hpc/cute/layout/#layout_3","title":"Layout \u7684\u4ee3\u6570\u548c\u51e0\u4f55\u89e3\u91ca","text":""},{"location":"hpc/cute/layout/#_4","title":"\u57fa\u672c\u5c5e\u6027","text":"<p>\u5982\u4e0a Layout \uff0c\u57fa\u672c\u5c5e\u6027\u5982\u4e0b\u8868\uff1a</p> shape stride size rank depth coshape cosize ((2, 4), (3, 5)) ((3, 6), (1, 24)) 120 2 2 120 120 <ul> <li>shape \u548c stride \u8868\u793a layout \u7684\u903b\u8f91\u5f62\u72b6\u548c\u6bcf\u4e2a\u7ef4\u5ea6\u5728\u5730\u5740\u4e2d\u7684\u6b65\u957f</li> <li>size \u8868\u793a\u903b\u8f91\u7a7a\u95f4\u7684\u5927\u5c0f</li> <li>rank \u8868\u793a layout \u7684\u79e9\uff0c\u7b49\u4e8e shape \u7b2c\u4e00\u5c42\u7684\u5143\u7d20\u4e2a\u6570</li> <li>depth \u8868\u793a layout \u7684\u5d4c\u5957\u6df1\u5ea6\uff0c\u5b9a\u4e49\u975e\u5d4c\u5957 layout \u7684 depth \u4e3a 1</li> <li>coshape \u8868\u793a codomain \u7684\u7a7a\u95f4\u5927\u5c0f</li> <li>cosize \u8868\u793a\u5360\u7528\u7a7a\u95f4\u5927\u5c0f\uff0c\u5982\u679c stride \u4e0d\u7d27\u51d1\uff0c\u5219 cosize \u53ef\u80fd\u5927\u4e8e size</li> </ul>"},{"location":"hpc/cute/layout/#coordinate","title":"Coordinate \u5750\u6807","text":"<ul> <li>\u4e00\u5c42 layout\uff1a\u6307\u5b9a\u884c\u5217\u5750\u6807<code>auto coord = make_coord(1, 2);</code> </li> <li> <p>\u591a\u5c42\uff1a\u5c06 make_coord \u8fdb\u884c\u5d4c\u5957\uff1a</p> <pre><code>auto coord = make_coord(make_coord(1, 3), make_coord(2, 4));\n</code></pre> <p>\u6ce8\u610f make_coord \u53c2\u6570\u4ece\u5185\u5230\u5916\u3002\u4e0a\u8ff0\u6307\u5b9a\u7684\u5750\u6807\u5982\u4e0b\uff1a</p> <p></p> </li> </ul>"},{"location":"hpc/cute/layout/#slice","title":"Slice \u5207\u7247","text":"<p>cute \u63d0\u4f9b\u4e86 Underscore \u7c7b\u578b\u5bf9\u67d0\u4e2a\u7ef4\u5ea6\u8fdb\u884c\u5168\u9009\uff0c\u5bf9\u5e94\u53d8\u91cf\u4e3a <code>_</code>\uff0c\u7c7b\u4f3c python \u4e2d <code>:</code> \u3002</p>"},{"location":"hpc/cute/layout/#complement","title":"Complement \u8865\u96c6","text":"<p>\u5f53 codomain \u4e0d\u8fde\u7eed\u65f6\uff0c\u53ef\u4ee5\u6784\u9020\u539f layout \u7684\u8865\u96c6 layout2 \u8865\u4e0a codomain \u7a7a\u7f3a\u7684\u7a7a\u95f4\uff08\u6ce8\u610f\uff1alayout \u7684 codomain \u548c layout2 \u7684 codomain \u53ef\u80fd\u6709\u91cd\u5408\u90e8\u5206\uff09\uff0c\u4e3a\u4e86\u8868\u793a\u7684\u7b80\u6d01\u6027\uff0c\u8865\u96c6\u4f1a\u88ab\u538b\u7f29\u4e3a\u6700\u5c0f\u8868\u793a\uff0c\u5468\u671f\u6027\u91cd\u590d\u7684\u90e8\u5206\u4f1a\u88ab\u7ea6\u6389\u3002</p> <p></p>"},{"location":"hpc/cute/layout/#product","title":"Product \u4e58\u6cd5","text":""},{"location":"hpc/cute/tensor/","title":"Tensor","text":""},{"location":"hpc/cute/tensor/#tensor_1","title":"Tensor \u751f\u6210","text":"<pre><code>// \u6808\u4e0a\u5bf9\u8c61\uff1a\u9700\u540c\u65f6\u6307\u5b9a\u7c7b\u578b\u548cLayout\uff0clayout\u5fc5\u987b\u662f\u9759\u6001shape\nTensor make_tensor&lt;T&gt;(Layout layout);\n\n// \u5806\u4e0a\u5bf9\u8c61\uff1a\u9700\u6307\u5b9apointer\u548cLayout\uff0clayout\u53ef\u52a8\u53ef\u9759\nTensor make_tensor(Pointer pointer, Layout layout);\n\n// \u6808\u4e0a\u5bf9\u8c61\uff0ctensor\u7684layout\u5fc5\u987b\u662f\u9759\u6001\u7684\nTensor make_tensor_like(Tensor tensor); \n\n// \u6808\u4e0a\u5bf9\u8c61\uff0ctensor\u7684layout\u5fc5\u987b\u662f\u9759\u6001\u7684\nTensor make_fragment_like(Tensor tensor);\n</code></pre>"},{"location":"hpc/hpc101/","title":"HPC 101","text":"<p>Abstract</p> <p>\u5927\u4e00\u6691\u5047\u8d85\u7b97\u77ed\u5b66\u671f labs</p> <p>\u5b9e\u9a8c\u624b\u518c</p>"},{"location":"hpc/hpc101/cuda/","title":"NVIDIA CUDA C","text":"<p>Abstract</p> <p>GPU \u7f16\u7a0b\u539f\u7406\u4e0e NVIDIA CUDA C \u7f16\u7a0b\u5b9e\u9a8c</p>"},{"location":"hpc/hpc101/cuda/#gpu","title":"GPU \u7f16\u7a0b\u539f\u7406","text":""},{"location":"hpc/hpc101/cuda/#cpu-vs-gpu","title":"CPU vs. GPU","text":"CPU \uff1a <ul> <li>\u5c11\u91cf\u4e14\u590d\u6742\u7684\u6838\u5fc3</li> <li>\u4f4e\u5185\u5b58\u5ef6\u8fdf\u7684\u7f13\u5b58\uff08cache\uff09\u8f83\u5927</li> <li>\u5185\u5b58\u5927\u4f46\u6162</li> </ul> GPU \uff1a <ul> <li>\u5927\u91cf\u7b80\u5355\u6838\u5fc3</li> <li>\u4f4e\u5185\u5b58\u5ef6\u8fdf\u7684\u7f13\u5b58\uff08cache\uff09\u8f83\u5c0f</li> <li>\u5185\u5b58\u5c0f\u4f46\u5feb</li> </ul>"},{"location":"hpc/hpc101/cuda/#cuda-vs","title":"CUDA \u7f16\u7a0b\u6a21\u578b vs. \u786c\u4ef6\u6267\u884c\u6a21\u578b","text":""},{"location":"hpc/hpc101/cuda/#_1","title":"\u4f53\u7cfb\u7ed3\u6784\u7c7b\u522b\u548c\u7f16\u7a0b\u6a21\u578b","text":"<ul> <li>SISD\uff08Single instruction, single data\uff09\u5355\u6307\u4ee4\u6d41\u5355\u6570\u636e\u6d41\uff1a\u4f20\u7edf\u7684\u4e32\u884c\u8ba1\u7b97\u673a\u3002</li> <li>SIMD\uff08Single instruction, multiple data\uff09\u5355\u6307\u4ee4\u591a\u6570\u636e\u6d41\uff1aAVX\u3001SSE \u7b49\u6307\u4ee4\u96c6\u3002</li> <li>SPMD\uff08Single program, multiple data\uff09\u5355\u7a0b\u5e8f\u591a\u6570\u636e\u6d41\uff1a\u5bf9\u95ee\u9898\u8fdb\u884c\u5206\u89e3\uff0c\u518d\u8fdb\u884c\u5e76\u884c\u6c42\u89e3\u3002</li> </ul> <p>\u524d\u4e24\u4e2a\u662f\u4f53\u7cfb\u7ed3\u6784\u7c7b\u522b\uff0c\u6700\u540e\u4e00\u4e2a\u662f\u7f16\u7a0b\u6a21\u578b\u3002</p>"},{"location":"hpc/hpc101/cuda/#cuda-cc","title":"CUDA C/C++ \u7f16\u7a0b","text":"<p>\u7531 NVIDIA \u6df1\u5ea6\u5b66\u4e60\u57f9\u8bad\u4e2d\u5fc3 (DLI) \u63d0\u4f9b\u7684\u8bfe\u7a0b\uff0c\u5728\u7531 NVIDIA \u63d0\u4f9b\u7684\u4e91\u73af\u5883\u4e0a\u8fdb\u884c\u5b9e\u9a8c\u3002</p>"},{"location":"hpc/hpc101/cuda/#cuda-cc_1","title":"\u4f7f\u7528 CUDA C/C++ \u52a0\u901f\u7a0b\u5e8f","text":""},{"location":"hpc/hpc101/cuda/#_2","title":"\u52a0\u901f\u7cfb\u7edf","text":"<p>\u52a0\u901f\u7cfb\u7edf\u53c8\u79f0\u5f02\u6784\u7cfb\u7edf\uff0c\u7531 CPU \u548c GPU \u7ec4\u6210\u3002\u52a0\u901f\u7cfb\u7edf\u8fd0\u884c CPU \u7a0b\u5e8f\uff0c\u7531\u8fd9\u4e9b\u7a0b\u5e8f\u8c03\u5ea6\u8fd0\u884c\u4e8e GPU \u4e0a\u7684\u51fd\u6570\uff0c\u901a\u8fc7 GPU \u5b9e\u73b0\u51fd\u6570\u7684\u5e76\u884c\u8ba1\u7b97\u3002</p> <p>\u67e5\u8be2 GPU \u4fe1\u606f\u547d\u4ee4\uff1a</p> <pre><code>$ nvidia-smi\n</code></pre>"},{"location":"hpc/hpc101/cuda/#gpu_1","title":"GPU \u52a0\u901f\u539f\u7406","text":"<p>\u4e00\u4e2a\u7b80\u5355\u7684 GPU \u52a0\u901f\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u8fc7\u7a0b\uff1a</p> <p></p> <ul> <li><code>(1)</code> \u6bb5\uff1a\u6570\u636e\u7531 <code>cudaMallocManaged()</code> \u51fd\u6570\u5206\u914d\uff0c\u5e76\u80fd\u7531 CPU \u8bbf\u95ee\u5904\u7406\u3002</li> <li><code>(2)</code> \u6bb5\uff1a\u6570\u636e\u53ef\u88ab\u8fc1\u79fb\u81f3\u53ef\u6267\u884c\u5e76\u884c\u5de5\u4f5c\u7684 GPU \uff0c\u5e76\u7531 GPU \u6838\u51fd\u6570\u8bbf\u95ee\uff0c\u540c\u65f6 CPU \u53ef\u7ee7\u7eed\u6267\u884c\u5de5\u4f5c\uff08\u5f02\u6b65\u6267\u884c\uff09\u3002</li> <li>\u901a\u8fc7 <code>cudaDeviceSynchronize()</code> \uff0c\u5c06 CPU \u4e0e GPU \u7684\u5de5\u4f5c\u540c\u6b65\u3002</li> <li><code>(3)</code> \u6bb5\uff1a\u7ecf CPU \u8bbf\u95ee\u7684\u6570\u636e\u8fc1\u79fb\u56de CPU\u3002</li> </ul>"},{"location":"hpc/hpc101/cuda/#gpu_2","title":"GPU \u52a0\u901f\u5e94\u7528\u7a0b\u5e8f\u7f16\u5199","text":"<p>CUDA \u52a0\u901f\u7a0b\u5e8f\u6587\u4ef6\u6269\u5c55\u540d\u4e3a <code>.cu</code> \uff0c\u4e00\u4e2a\u7b80\u5355\u4f8b\u5b50\uff1a</p> <pre><code>void CPUFunction()\n{\n  printf(\"This function is defined to run on the CPU.\\n\");\n}\n\n__global__ void GPUFunction()\n{\n  printf(\"This function is defined to run on the GPU.\\n\");\n}\n\nint main()\n{\n  CPUFunction();\n\n  GPUFunction&lt;&lt;&lt;1, 1&gt;&gt;&gt;();\n  cudaDeviceSynchronize();\n}\n</code></pre> <p>\u4e00\u4e9b\u8bed\u6cd5\uff1a</p> <p><code>__global__ void GPUFunction()</code></p> <ul> <li><code>__global__</code> \u5173\u952e\u5b57\u8868\u660e\u4ee5\u4e0b\u51fd\u6570\u5c06\u5728 GPU \u4e0a\u8fd0\u884c\u5e76\u53ef \u5168\u5c40 \u8c03\u7528\u3002</li> <li>\u901a\u5e38\uff0c\u5c06\u5728 CPU \u4e0a\u6267\u884c\u7684\u4ee3\u7801\u79f0\u4e3a \u4e3b\u673a (Host) \u4ee3\u7801\uff0c\u800c\u5c06\u5728 GPU \u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u79f0\u4e3a \u8bbe\u5907(Device) \u4ee3\u7801\u3002</li> <li>\u4f7f\u7528 <code>__global__</code> \u5173\u952e\u5b57\u5b9a\u4e49\u7684\u51fd\u6570\u9700\u8981\u8fd4\u56de <code>void</code> \u7c7b\u578b\u3002</li> </ul> <p><code>GPUFunction&lt;&lt;&lt;1, 1&gt;&gt;&gt;();</code></p> <ul> <li>\u901a\u5e38\uff0c\u5f53\u8c03\u7528\u8981\u5728 GPU \u4e0a\u8fd0\u884c\u7684\u51fd\u6570\u65f6\uff0c\u5c06\u6b64\u79cd\u51fd\u6570\u79f0\u4e3a \u5df2\u542f\u52a8 \u7684 \u6838\u51fd\u6570 \u3002</li> <li>\u542f\u52a8\u6838\u51fd\u6570\u65f6\uff0c\u5fc5\u987b\u63d0\u4f9b \u6267\u884c\u914d\u7f6e \uff0c\u5373\u5728\u5411\u6838\u51fd\u6570\u4f20\u9012\u53c2\u6570\u4e4b\u524d\u4f7f\u7528 <code>&lt;&lt;&lt;number_of_blocks, threads_per_block&gt;&gt;&gt;</code> \u8bed\u6cd5\u5b8c\u6210\u914d\u7f6e\u3002</li> <li>\u5728\u5b8f\u89c2\u5c42\u9762\uff0c\u53ef\u901a\u8fc7\u6267\u884c\u914d\u7f6e\u4e3a\u6838\u51fd\u6570\u542f\u52a8\u6307\u5b9a \u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784 \uff0c\u4ece\u800c\u5b9a\u4e49\u7ebf\u7a0b\u7ec4\uff08\u79f0\u4e3a \u7ebf\u7a0b\u5757 \uff09\u7684\u6570\u91cf <code>number_of_blocks</code> \uff0c\u4ee5\u53ca\u8981\u5728\u6bcf\u4e2a\u7ebf\u7a0b\u5757\u4e2d\u6267\u884c\u7684 \u7ebf\u7a0b \u6570\u91cf <code>threads_per_block</code> \u3002\u5982\u6837\u4f8b\u4ee3\u7801\u4e2d\uff0c\u4f7f\u7528\u4e86\u5305\u542b <code>1</code> \u7ebf\u7a0b\u7684 <code>1</code> \u7ebf\u7a0b\u5757\u542f\u52a8\u6838\u51fd\u6570\u3002</li> </ul> <p><code>cudaDeviceSynchronize();</code></p> <ul> <li>\u6838\u51fd\u6570\u542f\u52a8\u65b9\u5f0f\u4e3a \u5f02\u6b65 \uff1aCPU \u4ee3\u7801\u5c06\u7ee7\u7eed\u6267\u884c\uff0c\u65e0\u9700\u7b49\u5f85\u6838\u51fd\u6570\u5b8c\u6210\u542f\u52a8\u3002</li> <li>\u8c03\u7528 CUDA \u8fd0\u884c\u65f6\u63d0\u4f9b\u7684\u51fd\u6570 <code>cudaDeviceSynchronize</code> \u4f7f\u5f97\u4e3b\u673a (CPU) \u4ee3\u7801\u6682\u4f5c\u7b49\u5f85\uff0c\u76f4\u81f3\u8bbe\u5907 (GPU) \u4ee3\u7801\u6267\u884c\u5b8c\u6210\uff0c\u624d\u80fd\u5728 CPU \u4e0a\u6062\u590d\u6267\u884c\u3002</li> </ul> <p>\u7f16\u8bd1\u8fd0\u884c CUDA \u52a0\u901f\u7a0b\u5e8f</p> <p>\u4f7f\u7528 <code>nvcc</code> \u547d\u4ee4\u7f16\u8bd1\u548c\u8fd0\u884c\u7a0b\u5e8f\uff1a</p> <pre><code>$ nvcc -arch=sm_70 -o hello-gpu hello-gpu.cu -run\n</code></pre> <ul> <li><code>nvcc</code> \u4e3a\u7f16\u8bd1\u5668\u547d\u4ee4\u3002</li> <li><code>-arch</code> \u9009\u9879\u6307\u5b9a\u67b6\u6784\u7c7b\u578b\u3002</li> <li><code>-o</code> \u6307\u5b9a\u7f16\u8bd1\u7a0b\u5e8f\u7684\u8f93\u51fa\u6587\u4ef6\u3002</li> <li><code>-run</code> \u6807\u5fd7\u6267\u884c\u6210\u529f\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002</li> </ul>"},{"location":"hpc/hpc101/cuda/#cuda","title":"CUDA \u7ebf\u6027\u5c42\u6b21\u7ed3\u6784","text":"<p>\u542f\u52a8\u6838\u51fd\u6570\u65f6\uff0c\u6838\u51fd\u6570\u4ee3\u7801\u7531\u6bcf\u4e2a\u5df2\u914d\u7f6e\u7684\u7ebf\u7a0b\u5757\u4e2d\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u6267\u884c\u3002</p> <p>CUDA \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7ebf\u7a0b\u5c42\u6b21\u7ed3\u6784\u53d8\u91cf\uff1a</p> <ul> <li><code>gridDim.x</code> \u7f51\u683c\u4e2d\u5757\u6570\uff1b<code>blockDim.x</code> \u6bcf\u5757\u4e2d\u7ebf\u7a0b\u6570\u3002</li> <li><code>blockIdx.x</code> \u5f53\u524d\u7ebf\u7a0b\u6240\u5728\u7ebf\u7a0b\u5757\u7d22\u5f15\uff1b<code>threadIdx.x</code> \u5f53\u524d\u7ebf\u7a0b\u5728\u7ebf\u7a0b\u5757\u4e2d\u7684\u7d22\u5f15\u3002</li> </ul>"},{"location":"hpc/hpc101/cuda/#_3","title":"\u52a0\u901f\u5faa\u73af","text":"<p>\u6b65\u9aa4\uff1a</p> <ul> <li>\u5fc5\u987b\u7f16\u5199\u5b8c\u6210 \u5faa\u73af\u7684\u5355\u6b21\u8fed\u4ee3 \u5de5\u4f5c\u7684\u6838\u51fd\u6570\u3002</li> <li>\u7531\u4e8e\u6838\u51fd\u6570\u4e0e\u5176\u4ed6\u6b63\u5728\u8fd0\u884c\u7684\u6838\u51fd\u6570\u65e0\u5173\uff0c\u56e0\u6b64\u6267\u884c\u914d\u7f6e\u5fc5\u987b\u4f7f\u6838\u51fd\u6570\u6267\u884c\u6b63\u786e\u7684\u6b21\u6570\uff0c\u4f8b\u5982\u5faa\u73af\u8fed\u4ee3\u7684\u6b21\u6570\u3002\uff08\u6ce8\u610f\uff1a\u5404\u4e2a\u7ebf\u7a0b\u6267\u884c\u987a\u5e8f\u4e0d\u5b9a\uff0c\u6545\u53ef\u52a0\u901f\u7684\u5faa\u73af\u9700\u8981\u5404\u6b21\u8fed\u4ee3\u65e0\u5173\u8054\u4e14\u987a\u5e8f\u65e0\u5f71\u54cd\uff09</li> </ul> <p>\u4f8b\u5b50\uff1a</p> <p>\u52a0\u901f\u524d\uff1a</p> <pre><code>for (int i = 0; i &lt; N; ++i)\n{\n  printf(\"%d\\n\", i);\n}\n</code></pre> <p>\u52a0\u901f\u540e\uff1a\u4f7f\u7528\u6838\u51fd\u6570\u5b9e\u73b0\u5355\u8bcd\u8fed\u4ee3</p> <pre><code>__global__ void loop() {\n    int idx = threadIdx.x + blockIdx.x * blockDim.x;\n    if (idx &lt; N)\n        printf(\"%d\\n\", idx);\n}\n</code></pre> <p>\u5e76\u8c03\u7528</p> <pre><code>loop&lt;&lt;&lt;number_of_blocks, threads_per_block&gt;&gt;&gt;();\n</code></pre> <p>\u6b64\u5904\u5fc5\u987b\u6709 <code>number_of_blocks * threads_per_block &gt;= N</code> \u3002</p>"},{"location":"hpc/hpc101/cuda/#_4","title":"\u5206\u914d\u5185\u5b58","text":"<p>\u56de\u5fc6\u4e00\u822c\u7684 CPU \u7a0b\u5e8f\u5206\u914d\u5e76\u91ca\u653e\u5185\u5b58\u7684\u65b9\u5f0f\uff1a</p> <pre><code>int *a;\na = (int *)malloc(size);\n...\nfree(a);\n</code></pre> <p>\u8981\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\uff0c\u5e76\u83b7\u53d6\u53ef\u5728\u4e3b\u673a\u548c\u8bbe\u5907\u4ee3\u7801\u4e2d\u5f15\u7528\u7684\u6307\u9488\uff0c\u5219\u9700\u8981\u4f7f\u7528 CUDA \u63d0\u4f9b\u7684\u51fd\u6570 <code>cudaMallocManaged()</code> \u548c <code>cudaFree()</code> \uff1a</p> <pre><code>int *a;\ncudaMallocManaged(&amp;a, size);\n...\ncudaFree(a);\n</code></pre> <p>\u5176\u4ed6\u4e00\u4e9b\u7528\u4e8e\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684 CUDA \u547d\u4ee4\uff1a</p> <ul> <li><code>cudaMalloc</code> \u547d\u4ee4\u5c06\u76f4\u63a5\u4e3a\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u7684 GPU \u5206\u914d\u5185\u5b58\u3002\u8fd9\u53ef\u9632\u6b62\u51fa\u73b0\u6240\u6709 GPU \u5206\u9875\u9519\u8bef\uff0c\u800c\u4ee3\u4ef7\u662f\u4e3b\u673a\u4ee3\u7801\u5c06\u65e0\u6cd5\u8bbf\u95ee\u8be5\u547d\u4ee4\u8fd4\u56de\u7684\u6307\u9488\u3002</li> <li><code>cudaMallocHost</code> \u547d\u4ee4\u5c06\u76f4\u63a5\u4e3a CPU \u5206\u914d\u5185\u5b58\u3002\u8be5\u547d\u4ee4\u53ef\u56fa\u5b9a\u5185\u5b58\uff08pinned memory\uff09\u6216\u9875\u9501\u5b9a\u5185\u5b58\uff08page-locked memory\uff09\u3002\u5141\u8bb8\u5c06\u5185\u5b58\u5f02\u6b65\u62f7\u8d1d\u81f3 GPU \u6216\u4ece GPU \u5f02\u6b65\u62f7\u8d1d\u81f3\u5185\u5b58\u3002\u4f46\u56fa\u5b9a\u5185\u5b58\u8fc7\u591a\u4f1a\u5e72\u6270 CPU \u6027\u80fd\uff0c\u56e0\u6b64\u9700\u907f\u514d\u65e0\u7aef\u4f7f\u7528\u8be5\u547d\u4ee4\u3002\u91ca\u653e\u56fa\u5b9a\u5185\u5b58\u65f6\u5e94\u4f7f\u7528 <code>cudaFreeHost</code> \u547d\u4ee4\u3002</li> <li><code>cudaMemcpy</code> \u547d\u4ee4\u53ef\u62f7\u8d1d\u5185\u5b58\u3002\u793a\u4f8b   <pre><code>// \u4ece host \u5411 device \u62f7\u8d1d\u5185\u5b58\ncudaMemcpy(device_a, host_a, size, cudaMemcpyHostToDevice);\n// \u4ece device \u5411 host \u62f7\u8d1d\u5185\u5b58\ncudaMemcpy(host_a, device_a, size, cudaMemcpyDeviceToHost);\n</code></pre></li> </ul>"},{"location":"hpc/hpc101/cuda/#_5","title":"\u8de8\u7f51\u683c\u5faa\u73af","text":"<p>\u5f53\u6570\u636e\u96c6\u6bd4\u7f51\u683c\u5927\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u6bcf\u4e2a\u7ebf\u7a0b\u5904\u7406\u591a\u4e2a\u6570\u636e\uff1a</p> <pre><code>__global__ void kernel(int *a, int N)\n{\n  int idx = threadIdx.x + blockIdx.x * blockDim.x;\n  int stride = gridDim.x * blockDim.x;\n\n  for (int i = idx; i &lt; N; i += stride)\n  {\n    // do work on a[i];\n  }\n}\n</code></pre>"},{"location":"hpc/hpc101/cuda/#_6","title":"\u9519\u8bef\u5904\u7406","text":"<ul> <li>\u8bb8\u591a CUDA \u51fd\u6570\u4f1a\u8fd4\u56de\u7c7b\u578b\u4e3a <code>cudaError_t</code> \u7684\u503c\uff0c\u53ef\u7528\u4e8e\u68c0\u67e5\u8c03\u7528\u662f\u5426\u51fa\u9519\u3002</li> <li>\u4e3a\u68c0\u67e5\u542f\u52a8\u6838\u51fd\u6570\u65f6\u662f\u5426\u53d1\u751f\u9519\u8bef\uff0cCUDA \u63d0\u4f9b\u4e86 <code>cudaGetLastError</code> \u51fd\u6570\uff0c\u8fd4\u56de\u7c7b\u578b\u4e3a <code>cudaError_t</code> \u7684\u503c\u3002</li> <li>\u4e3a\u6355\u6349\u5f02\u6b65\u9519\u8bef\uff08\u4f8b\u5982\uff0c\u5728\u5f02\u6b65\u6838\u51fd\u6570\u6267\u884c\u671f\u95f4\uff09\uff0c\u9700\u8981\u68c0\u67e5\u540e\u7eed\u540c\u6b65 CUDA \u8fd0\u884c\u65f6 API \u8c03\u7528\u6240\u8fd4\u56de\u7684\u72b6\u6001\uff08\u4f8b\u5982 <code>cudaDeviceSynchronize</code> \uff09\uff0c\u5982\u679c\u4e4b\u524d\u542f\u52a8\u7684\u5176\u4e2d\u4e00\u4e2a\u6838\u51fd\u6570\u5931\u8d25\uff0c\u5219\u5c06\u8fd4\u56de\u9519\u8bef\u3002</li> </ul> <p>\u9519\u8bef\u5927\u81f4\u53ef\u5206\u4e3a\u540c\u6b65\u9519\u8bef <code>synError</code> \u548c\u5f02\u6b65\u9519\u8bef <code>asynError</code> \u3002</p> <p>\u5bf9\u4e8e <code>cudaError_t</code> \u503c\uff0c\u5c06\u5176\u4e0e CUDA \u63d0\u4f9b\u7684 <code>cudaSuccess</code> \u8fdb\u884c\u6bd4\u8f83\uff0c\u5373\u53ef\u5224\u65ad\u662f\u5426\u51fa\u9519\uff0c\u540c\u65f6\u53ef\u4ee5\u4f7f\u7528\u51fd\u6570 <code>cudaGetErrorString()</code> \u83b7\u5f97\u9519\u8bef\u4fe1\u606f\u3002</p> <p>\u4e00\u4e2a\u5305\u88c5 CUDA \u51fd\u6570\u8c03\u7528\u7684\u5b8f\uff1a</p> <pre><code>inline cudaError_t checkCuda(cudaError_t result)\n{\n  if (result != cudaSuccess) {\n    fprintf(stderr, \"CUDA Runtime Error: %s\\n\", cudaGetErrorString(result));\n    assert(result == cudaSuccess);\n  }\n  return result;\n}\n\nint main()\n{\n\n/*\n * The macro can be wrapped around any function returning\n * a value of type `cudaError_t`.\n */\n\n  checkCuda( cudaDeviceSynchronize() )\n}\n</code></pre>"},{"location":"hpc/hpc101/cuda/#-","title":"\u8fdb\u9636\u5185\u5bb9 - \u591a\u7ef4\u7f51\u683c\u548c\u5757","text":"<p>\u53ef\u4ee5\u5c06\u7f51\u683c\u548c\u7ebf\u7a0b\u5757\u5b9a\u4e49\u4e3a\u6700\u591a\u5177\u6709 3 \u4e2a\u7ef4\u5ea6\uff0c CUDA \u63d0\u4f9b <code>dim3</code> \u7c7b\u578b\u5b9a\u4e49\u591a\u7ef4\u7f51\u683c\u548c\u5757\uff1a</p> <pre><code>dim3 threads_per_block(block_dim_x, block_dim_y, block_dim_z);\ndim3 number_of_blocks(grid_dim_x, grid_dim_y, grid_dim_z);\nsomeKernel&lt;&lt;&lt;number_of_blocks, threads_per_block&gt;&gt;&gt;();\n</code></pre> <p>\u5728\u6838\u51fd\u6570\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>threadIdx.y</code> \u53ca\u7c7b\u4f3c\u5f62\u5f0f\u83b7\u5f97\u76f8\u5173\u7d22\u5f15\u548c\u7ef4\u5ea6\u3002</p>"},{"location":"hpc/hpc101/cuda/#nsys","title":"\u7edf\u4e00\u5185\u5b58\u4f7f\u7528\u4e0e\u4f7f\u7528 nsys \u7ba1\u7406\u5185\u5b58","text":""},{"location":"hpc/hpc101/cuda/#nsys_1","title":"nsys \u4f7f\u7528","text":"<p>\u4f7f\u7528 <code>nsys profile</code> \u5206\u6790\u7f16\u8bd1\u597d\u7684\u53ef\u6267\u884c\u6587\u4ef6</p> <pre><code>$ nsys profile --stats=true ./test\n</code></pre> <p><code>nsys profile</code> \u5c06\u751f\u6210\u4e00\u4e2a <code>qdrep</code> \u62a5\u544a\u6587\u4ef6\uff0c\u4f7f\u7528 <code>--stats = true</code> \u6807\u5fd7\u8868\u793a\u5e0c\u671b\u6253\u5370\u8f93\u51fa\u6458\u8981\u7edf\u8ba1\u4fe1\u606f\u3002</p>"},{"location":"hpc/hpc101/cuda/#streaming-multiprocessors","title":"\u6d41\u591a\u5904\u7406\u5668\uff08Streaming Multiprocessors\uff09","text":"<p>GPU \u5177\u6709\u79f0\u4e3a\u6d41\u591a\u5904\u7406\u5668\uff08\u6216 SM\uff09\u7684\u5904\u7406\u5355\u5143\u3002\u5728\u6838\u51fd\u6570\u6267\u884c\u671f\u95f4\uff0c\u5c06\u7ebf\u7a0b\u5757\u63d0\u4f9b\u7ed9 SM \u4ee5\u4f9b\u5176\u6267\u884c\u3002SM \u540c\u65f6\u8c03\u5ea6\u6267\u884c\u7684\u7ebf\u7a0b\u5757\u53d6\u51b3\u4e8e warp \u5927\u5c0f\uff08\u4e00\u822c\u4e3a 32\uff09\u3002</p> <p>\u901a\u5e38\u53ef\u4ee5\u9009\u62e9\u7ebf\u7a0b\u6570\u91cf\u6570\u500d\u4e8e 32 \u7684\u7ebf\u7a0b\u5757\u5927\u5c0f\u6765\u63d0\u5347\u6027\u80fd\u3002</p>"},{"location":"hpc/hpc101/cuda/#gpu_3","title":"\u67e5\u8be2 GPU \u5c5e\u6027","text":"<pre><code>int deviceId;\ncudaGetDevice(&amp;deviceId);\n\ncudaDeviceProp props;\ncudaGetDeviceProperties(&amp;props, deviceId);\n</code></pre> <p><code>props</code> \u4e2d\u5305\u542b\u4e86 GPU \u8bbe\u5907\u5c5e\u6027\uff0c\u4e3b\u8981\u7528\u5230 warp \u5927\u5c0f <code>props.warpSize</code> \u3002</p>"},{"location":"hpc/hpc101/cuda/#um","title":"\u7edf\u4e00\u5185\u5b58\uff08UM\uff09\u884c\u4e3a","text":"<p>\u5206\u914d UM \u65f6\uff0c\u5185\u5b58\u5c1a\u672a\u9a7b\u7559\u5728\u4e3b\u673a\u6216\u8bbe\u5907\u4e0a\u3002\u4e3b\u673a\u6216\u8bbe\u5907\u5c1d\u8bd5\u8bbf\u95ee\u5185\u5b58\u65f6\u4f1a\u53d1\u751f\u9875\u9519\u8bef\uff08Page Fault\uff09\uff0c\u6b64\u65f6\u4e3b\u673a\u6216\u8bbe\u5907\u4f1a\u6279\u91cf\u8fc1\u79fb\u6240\u9700\u7684\u6570\u636e\u3002\u540c\u7406\uff0c\u5f53 CPU \u6216\u52a0\u901f\u7cfb\u7edf\u4e2d\u7684\u4efb\u4f55 GPU \u5c1d\u8bd5\u8bbf\u95ee\u5c1a\u672a\u9a7b\u7559\u5728\u5176\u4e0a\u7684\u5185\u5b58\u65f6\uff0c\u4f1a\u53d1\u751f\u9875\u9519\u8bef\u5e76\u89e6\u53d1\u8fc1\u79fb\u3002</p> <p>\u7a00\u758f\u8bbf\u95ee\u6570\u636e\u65f6\uff0c\u89e6\u53d1\u9875\u9519\u8bef\u5e76\u6309\u9700\u8fc1\u79fb\u5185\u5b58\u4f1a\u6709\u663e\u8457\u4f18\u52bf\u3002</p> <p>\u800c\u9700\u8981\u5927\u91cf\u8fde\u7eed\u7684\u5185\u5b58\u5757\u65f6\uff0c\u901a\u8fc7\u5f02\u6b65\u9884\u53d6\u5185\u5b58\u53ef\u4ee5\u6709\u6548\u89c4\u907f\u9875\u9519\u8bef\u548c\u6309\u9700\u6570\u636e\u8fc1\u79fb\u6240\u4ea7\u751f\u7684\u5f00\u9500\u3002</p>"},{"location":"hpc/hpc101/cuda/#_7","title":"\u5f02\u6b65\u5185\u5b58\u9884\u53d6","text":"<p>CUDA \u53ef\u901a\u8fc7 <code>cudaMemPrefetchAsync</code> \u51fd\u6570\uff0c\u5c06\u6258\u7ba1\u5185\u5b58\u5f02\u6b65\u9884\u53d6\u5230 GPU \u8bbe\u5907\u6216 CPU\uff1a</p> <pre><code>int deviceId;\ncudaGetDevice(&amp;deviceId);\n\n// Prefetch to GPU device.\ncudaMemPrefetchAsync(pointerToSomeUMData, size, deviceId);\n// Prefetch to host.\ncudaMemPrefetchAsync(pointerToSomeUMData, size, cudaCpuDeviceId); \n</code></pre>"},{"location":"hpc/hpc101/cuda/#cuda_1","title":"\u5e76\u53d1 CUDA \u6d41","text":"<p>\u6d41\u662f\u7531\u6309\u987a\u5e8f\u6267\u884c\u7684\u4e00\u7cfb\u5217\u547d\u4ee4\u6784\u6210\u3002\u5728 CUDA \u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6838\u51fd\u6570\u7684\u6267\u884c\u4ee5\u53ca\u4e00\u4e9b\u5185\u5b58\u4f20\u8f93\u5747\u5728 CUDA \u6d41\u4e2d\u8fdb\u884c\u3002\u672a\u4f5c\u7279\u6b8a\u58f0\u660e\u7684\u6838\u51fd\u6570\u5728\u9ed8\u8ba4\u6d41\u4e2d\u6267\u884c\u3002</p> <p>\u6b64\u5916\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u521b\u5efa\u975e\u9ed8\u8ba4\u6d41\uff0c\u5728\u4e0d\u540c\u7684\u6d41\u4e2d\u5e76\u53d1\u6267\u884c\u591a\u4e2a\u6838\u51fd\u6570\u3002</p> <p>\u9ed8\u8ba4\u6d41\u4f1a\u963b\u6b62\u5176\u4ed6\u6d41\u4e2d\u7684\u6240\u6709\u6838\u51fd\u6570\u3002\u5f53\u5176\u4ed6\u6d41\u4e2d\u7684\u6240\u6709\u6838\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0c\u9ed8\u8ba4\u6d41\u4e2d\u7684\u6838\u51fd\u6570\u624d\u5f00\u59cb\u6267\u884c\uff1b\u5f53\u9ed8\u8ba4\u6d41\u4e2d\u7684\u6838\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\uff0c\u5176\u4ed6\u6d41\u4e2d\u7684\u6838\u51fd\u6570\u624d\u53ef\u4ee5\u5f00\u59cb\u6267\u884c\u3002</p> <p></p> <p>\u521b\u5efa\u975e\u9ed8\u8ba4\u6d41\uff0c\u5e76\u5728\u975e\u9ed8\u8ba4\u6d41\u4e2d\u542f\u52a8\u6838\u51fd\u6570\uff1a</p> <pre><code>cudaStream_t stream;\ncudaStreamCreate(&amp;stream);\n\nsomeKernel&lt;&lt;&lt;number_of_blocks, threads_per_block, 0, stream&gt;&gt;&gt;();\n\ncudaStreamDestroy(stream);\n</code></pre>"},{"location":"labs/cnn/","title":"lab5 \u7b80\u5355\u795e\u7ecf\u7f51\u7edc\u8bad\u7ec3\u4e0e\u52a0\u901f","text":""},{"location":"labs/cnn/#_1","title":"\u5b9e\u9a8c\u8fc7\u7a0b","text":"<p>\u8be5\u90e8\u5206\u5b8c\u6574\u4ee3\u7801\u4f4d\u4e8e <code>./code/letnet5.py</code></p>"},{"location":"labs/cnn/#_2","title":"\u6570\u636e\u96c6\u5bfc\u5165\u4e0e\u52a0\u8f7d","text":"<p>\u4f7f\u7528 <code>torchvision.datasets.MNIST</code> \u5bfc\u5165\u6570\u636e\u3002</p> <p>\u5176\u4e2d\u4f7f\u7528 <code>torchvision.transforms.ToTensor()</code> \u5c06 PIL image \u8f6c\u6362\u4e3a Tensor \u3002</p> <pre><code># Load MNIST\ntrain_dataset = torchvision.datasets.MNIST('./data', \n                    train=True, \n                    transform=torchvision.transforms.ToTensor(), \n                    target_transform=None, \n                    download=True)\ntest_dataset =  torchvision.datasets.MNIST('./data', \n                    train=False, \n                    transform=torchvision.transforms.ToTensor(), \n                    target_transform=None, \n                    download=True)\n</code></pre> <p>\u4f7f\u7528 <code>torch.utils.data.DataLoader</code> \u52a0\u8f7d\u6570\u636e\uff0c<code>batch_size=64</code> \u8bbe\u7f6e\u4e00\u6b21\u8bad\u7ec3\u53ca\u6d4b\u8bd5\u6293\u53d6\u7684\u6570\u636e\u6837\u672c\u6570\u91cf\u4e3a 64 \uff0c\u5e76\u4e14\u8bad\u7ec3\u65f6\u5c06\u6570\u636e\u6253\u4e71\u3002</p> <pre><code># Data Loader\ntrain_loader = torch.utils.data.DataLoader(train_dataset, \n                    batch_size=64, shuffle=True)\ntest_loader = torch.utils.data.DataLoader(test_dataset, \n                    batch_size=64, shuffle=False)\n</code></pre>"},{"location":"labs/cnn/#_3","title":"\u6a21\u578b\u7f16\u5199","text":""},{"location":"labs/cnn/#_4","title":"\u7f51\u7edc\u7ed3\u6784","text":"<p>\u7ee7\u627f <code>torch.nn.Module</code> \u5b9a\u4e49\u6a21\u578b\uff0c\u5c06\u7f51\u7edc\u7ed3\u6784\u4ee5\u7c7b\u4fdd\u5b58\u3002</p> <p>\u6839\u636e LetNet-5 \u7684\u7ed3\u6784\uff0c\u5b9a\u4e49\u6a21\u578b\u4e2d\u5404\u4e2a\u5c42\u3002</p> <pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass LeNet_5(nn.Module):\n    def __init__(self):\n        super(LeNet_5, self).__init__()\n        # \u5377\u79ef\u5c42\n        self.conv1 = nn.Conv2d(1, 6, 5, stride=1)   \n        self.conv2 = nn.Conv2d(6, 16, 5, stride=1)\n        # \u6c60\u5316\u5c42\n        self.pool = nn.AvgPool2d(2, stride=2)\n        # \u5168\u8fde\u63a5\u5c42\n        self.full1 = nn.Linear(16 * 4 * 4, 120)\n        self.full2 = nn.Linear(120, 84)\n        self.full3 = nn.Linear(84, 10)\n    def forward(self, x):\n        x = F.gelu(self.conv1(x))\n        x = F.gelu(self.pool(x))\n        x = F.gelu(self.conv2(x))\n        x = F.gelu(self.pool(x))\n        x = x.view(-1, 16 * 4 * 4) # \u5f97\u5230\u4e00\u7ef4\u5411\u91cf\n        x = F.gelu(self.full1(x))\n        x = F.gelu(self.full2(x))\n        x = self.full3(x)\n        return x\n</code></pre>"},{"location":"labs/cnn/#_5","title":"\u635f\u5931\u51fd\u6570\u53ca\u4f18\u5316\u5668","text":"<p>\u635f\u5931\u51fd\u6570\u4f7f\u7528\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 <code>torch.nn.CrossEntropyLoss()</code> \u3002</p> <p>\u4f7f\u7528 NAdam \u4f18\u5316\u5668\uff0c\u7ecf\u591a\u6b21\u6d4b\u8bd5\uff0c\u9009\u7528 \\(3 \\times 10^{-3}\\) \u7684\u5b66\u4e60\u7387\u3002</p> <pre><code>criterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.NAdam(model.parameters(), lr=3e-3)\n</code></pre>"},{"location":"labs/cnn/#_6","title":"\u624b\u52a8\u8fc1\u79fb\u6a21\u578b\u53ca\u6570\u636e","text":"<p>\u5b9a\u4e49 <code>device</code> \u53d8\u91cf\uff0c\u5c06\u6a21\u578b\u548c\u6570\u636e\u8fc1\u79fb\u81f3 GPU \uff0c\u82e5\u65e0 GPU \u53ef\u7528\uff0c\u5219\u8fc1\u79fb\u81f3 CPU \u8bad\u7ec3\u3002</p> <pre><code>device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nmodel = model.to(device)\n</code></pre>"},{"location":"labs/cnn/#_7","title":"\u8bad\u7ec3\u8fc7\u7a0b","text":"<p>\u603b\u5171\u5728\u8bad\u7ec3\u96c6\u4e0a\u8fdb\u884c\u5341\u6b21\u8bad\u7ec3\uff0c\u6bcf\u6b21\u8bad\u7ec3\u65f6\u4e0d\u65ad\u4ece <code>Dataloader</code> \u4e2d\u53d6\u51fa\u6570\u636e\uff0c\u5e76\u4e14\u8f93\u51fa\u6bcf\u6b21\u8bad\u7ec3\u7684\u5e73\u5747\u635f\u5931\u3002</p> <pre><code>model.train()\n\nrunning_loss = 0.0\nfor batch_idx, (images, labels) in enumerate(train_loader):\n    # \u53d6\u51fa\u6570\u636e\uff0c\u5c06\u6570\u636e\u8fc1\u79fb\u81f3 device\n    images, labels = images.to(device), labels.to(device)\n    # \u5bf9\u6570\u636e\u8fdb\u884c\u6b63\u5411\u4f20\u64ad\n    outputs = model(images)\n    # \u4f7f\u7528\u635f\u5931\u51fd\u6570\u8ba1\u7b97\u8be5\u6b21\u8bad\u7ec3\u7684\u635f\u5931\n    loss = criterion(outputs, labels)\n    # \u53cd\u5411\u4f20\u64ad\u524d\u5c06\u68af\u5ea6\u6e05\u96f6\n    optimizer.zero_grad(set_to_none=True)\n    # \u53cd\u5411\u4f20\u64ad\n    loss.backward()\n    # \u53cd\u5411\u4f20\u64ad\u540e\u66f4\u65b0\u4f18\u5316\u5668\u53c2\u6570\n    optimizer.step()\n    # \u7edf\u8ba1\u635f\u5931\n    running_loss += loss.item()\n# \u8f93\u51fa\u5e73\u5747\u635f\u5931\nprint('Epoch: [{}], Average Loss: {:.6f}'.format(epoch + 1, \n                            running_loss / len(train_loader)))\n</code></pre>"},{"location":"labs/cnn/#_8","title":"\u6d4b\u8bd5\u8fc7\u7a0b","text":"<p>\u6bcf\u6b21\u8bad\u7ec3\u7ed3\u675f\u4e4b\u540e\uff0c\u8fdb\u884c\u4e00\u6b21\u6d4b\u8bd5\u3002\u8f93\u51fa\u6bcf\u6b21\u8bad\u7ec3\u4e4b\u540e\u7684\u51c6\u786e\u5ea6\u3002</p> <pre><code>model.eval()\n# \u7981\u7528\u68af\u5ea6\u8ba1\u7b97\nwith torch.no_grad():\n    corret = 0\n    total = 0\n    for batch_idx, (images, labels) in enumerate(test_loader):\n        # \u53d6\u51fa\u6570\u636e\uff0c\u5c06\u6570\u636e\u8fc1\u79fb\u81f3 device\n        images, labels = images.to(device), labels.to(device)\n        # \u5bf9\u6570\u636e\u8fdb\u884c\u6b63\u5411\u4f20\u64ad\n        outputs = model(images)\n        # \u8fd4\u56de\u6bcf\u4e00\u884c\u6700\u5927\u503c\u53ca\u5176\u7d22\u5f15\uff0c\u5373\u9884\u6d4b\u7ed3\u679c\n        predict, result = torch.max(outputs.data, 1)\n        # \u7d2f\u52a0\u6d4b\u8bd5\u6570\u636e\u6570\u91cf\n        total += labels.size(0) \n        # \u7d2f\u52a0\u9884\u6d4b\u6b63\u786e\u7684\u6570\u636e\u6570\u91cf\n        corret += (result == labels).sum().item()\n    # \u8f93\u51fa\u51c6\u786e\u7387\n    print('Test Accuracy: {:.2f}%'.format(100 * corret / total))\n</code></pre>"},{"location":"labs/cnn/#gpu","title":"GPU \u5360\u7528\u7387","text":"<p>\u4f7f\u7528 <code>nvidia-smi</code> \u67e5\u770b GPU \u5360\u7528\u7387\u5982\u56fe\u3002</p> <p></p>"},{"location":"labs/cnn/#tensorboard","title":"\u4f7f\u7528 Tensorboard","text":"<p>\u4f7f\u7528 Tensorboard \u8bb0\u5f55\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u635f\u5931\u548c\u51c6\u786e\u7387\u3002</p> <pre><code>from torch.utils.tensorboard import SummaryWriter\n\nwriter = SummaryWriter()\n...\nfor epoch in range(10):\n    ...\n    for batch_idx, (images, labels) in enumerate(train_loader):\n        ...\n        writer.add_scalar('Loss/Train', loss.item(),\n                    epoch * len(train_loader) + batch_idx)\n    writer.flush()\n    with torch.no_grad():\n        ...\n        for batch_idx, (images, labels) in enumerate(test_loader):\n            ...\n            writer.add_scalar('Accuracy/Test', \n                100 * (result == labels).sum().item() / labels.size(0), \n                epoch * len(test_loader) + batch_idx)\n    writer.flush()\n</code></pre> <p>\u8bad\u7ec3\u7ed3\u675f\u540e\uff0c\u6267\u884c</p> <pre><code>$ tensorboard --logdir=./path/to/the/folder\n</code></pre> <p>\u5176\u4e2d <code>./path/to/the/folder</code> \u4e3a Tensorboard \u751f\u6210\u7684\u6587\u4ef6\u8def\u5f84\u3002</p> <p>\u5f97\u5230\u635f\u5931\u66f2\u7ebf\uff1a</p> <p></p> <p>\u51c6\u786e\u7387\u66f2\u7ebf\uff1a</p> <p></p> <p>\u6700\u7ec8\u7684\u8bc6\u522b\u6b63\u786e\u7387\u7ea6\u4e3a 98.90 % \u3002</p>"},{"location":"labs/cnn/#_9","title":"\u81ea\u5b9a\u4e49\u7b97\u5b50","text":"\u8be5\u90e8\u5206\u5b8c\u6574\u4ee3\u7801\u4f4d\u4e8e <code>./code/mygelu.py</code> \uff1a\u81ea\u5b9a\u4e49 GELU \u7b97\u5b50\u53ca\u5176\u9a8c\u8bc1\u3002 <code>./code/mygelu.cpp</code> \uff1aC++ \u5b9e\u73b0 GELU \u7b97\u5b50\u3002 <code>./code/mygelu_cpp.py</code> \uff1apython \u8c03\u7528 C++ GELU \u7b97\u5b50\u9a8c\u8bc1\u6b63\u786e\u6027\u3002 <code>./code/letnet5_cpp.py</code> \uff1a\u4f7f\u7528\u81ea\u5b9a\u4e49 GELU \u7b97\u5b50\u8fdb\u884c LetNet-5 \u8bad\u7ec3\u3002"},{"location":"labs/cnn/#_10","title":"\u7b97\u5b50\u7f16\u5199","text":"<p>GELU \u7b97\u5b50\u516c\u5f0f\u4e3a\uff1a</p> \\[ \\begin{align}     \\mathrm{GELU}(x) &amp;= x \\cdot \\Phi(x) \\\\                    &amp;= \\frac{1}{2} x (1 + \\mathrm{erf}(\\frac{x}{\\sqrt{2}})) \\end{align} \\] <p>\u6c42\u5bfc\u5f97\uff1a</p> \\[ \\frac{\\mathrm{d}}{\\mathrm{d} x}\\mathrm{GELU}(x) = \\frac{1}{2} + \\frac{1}{2} \\mathrm{erf}(\\frac{x}{\\sqrt{2}}) + \\frac{\\frac{\\sqrt{2}}{2} x \\mathrm{e}^{-x^2 / 2}}{\\sqrt{\\pi}} \\] <p>\u4f7f\u7528 torch \u63d0\u4f9b\u7684\u51fd\u6570 <code>torch.erf()</code> \u5b9e\u73b0 GELU \u51fd\u6570\u53ca\u5176\u5bfc\u6570\u7684\u8ba1\u7b97\u3002</p> <p>\u7ee7\u627f <code>torch.autograd.Function</code> \u5e76\u5b9e\u73b0 <code>forward</code> \u548c <code>backward</code> \u51fd\u6570\u3002</p> <pre><code>import math\nimport torch\n\ndef GELU(x):\n    return 0.5 * x * (1.0 + torch.erf(x / math.sqrt(2)))\n\ndef GELU_gard(x):\n    return 0.5 + 0.5 * torch.erf(x / math.sqrt(2)) + \\\n        (0.5 * x * torch.exp(- x * x / 2) * math.sqrt(2)) / math.sqrt(math.pi)\n\nclass my_gelu(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, input):\n        # \u4fdd\u5b58 input \u4f9b backward() \u4f7f\u7528\n        ctx.save_for_backward(input)\n        return GELU(input)\n\n    @staticmethod\n    def backward(ctx, gard_output):\n        input = ctx.saved_tensors\n        # \u8ba1\u7b97\u68af\u5ea6\n        gard_input = gard_output * GELU_gard(input)\n        return gard_input\n</code></pre> <p>\u5c06\u81ea\u5b9a\u4e49\u7b97\u5b50\u4e0e <code>F.gelu</code> \u6bd4\u8f83\uff1a</p> <pre><code>import torch.nn.functional as F\n\nloss_func = nn.MSELoss()\nA = torch.randn(100)\nB = A.clone()\nA.requires_grad = True\nB.requires_grad = True\nc = torch.randn(100)\na = F.gelu(A)\nb = my_gelu.apply(B)\nloss1 = loss_func(a, c)\nloss2 = loss_func(b, c)\nloss1.backward()\nloss2.backward()\ngradA = A.grad\ngradB = B.grad\nerr = loss_func(gradA, gradB)\nprint(err.item())\n</code></pre> <p>\u8f93\u51fa\u8bef\u5dee\u7ea6\u4e3a \\(10^{-17}\\) \uff0c\u53ef\u4ee5\u5ffd\u7565\u3002</p>"},{"location":"labs/cnn/#c","title":"\u4f7f\u7528 C++","text":"<p>\u5728 C++ \u4e2d\u5b9e\u73b0 GELU \u7b97\u5b50\uff1a</p> <pre><code>#include &lt;torch/extension.h&gt;\n#define _USE_MATH_DEFINES\n#include &lt;cmath&gt;\nusing namespace std;\n\ntorch::Tensor GELU(torch::Tensor x) {\n    return 0.5 * x * (1.0 + torch::erf(x / sqrt(2)));\n}\n\ntorch::Tensor GELU_gard(torch::Tensor x) {\n    return 0.5 + 0.5 * torch::erf(x / sqrt(2)) +\n             (0.5 * x * torch::exp(- x * x / 2) * sqrt(2)) / sqrt(M_PI);\n}\n\ntorch::Tensor gelu_forward(torch::Tensor input) {\n    return GELU(input);\n}\n\ntorch::Tensor gelu_backward(torch::Tensor grad_output, torch::Tensor input) {\n    return grad_output * GELU_gard(input);\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &amp;gelu_forward, \"GELU forward\");\n    m.def(\"backward\", &amp;gelu_backward, \"GELU backward\");\n}\n</code></pre> <p>\u4f7f\u7528 <code>torch.utils.cpp_extension.load</code> \u8c03\u7528 C++ \u5171\u4eab\u5e93\uff0c\u4f7f\u7528 python \u8c03\u7528\u7b97\u5b50\uff1a</p> <pre><code>from torch.utils.cpp_extension import load\n\ngelu_cpp = load(name=\"gelu_cpp\", sources=[\"mygelu.cpp\"])\n\nclass my_gelu(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, input):\n        ctx.save_for_backward(input)\n        output = gelu_cpp.forward(input)\n        return output\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        input, = ctx.saved_tensors\n        grad_input = gelu_cpp.backward(grad_output, input)\n        return grad_input\n</code></pre> <p>\u518d\u6b21\u5c06\u81ea\u5b9a\u4e49\u7b97\u5b50\u4e0e <code>F.gelu</code> \u6bd4\u8f83\uff0c\u8bef\u5dee\u7ea6\u4e3a \\(10^{-18}\\) \uff0c\u53ef\u4ee5\u5ffd\u7565\u3002</p> <p>\u5c06\u81ea\u5b9a\u4e49\u7b97\u5b50\u7528\u4e8e LetNet-5 \u8bad\u7ec3\uff1a</p> <pre><code>from torch.utils.cpp_extension import load\n\ngelu_cpp = load(name=\"gelu_cpp\", sources=[\"mygelu.cpp\"])\n\nclass my_gelu(torch.autograd.Function):\n    @staticmethod\n    def forward(ctx, input):\n        ctx.save_for_backward(input)\n        output = gelu_cpp.forward(input)\n        return output\n\n    @staticmethod\n    def backward(ctx, grad_output):\n        input, = ctx.saved_tensors\n        grad_input = gelu_cpp.backward(grad_output, input)\n        return grad_input\n\nclass LeNet_5(nn.Module):\n    ...\n    def forward(self, x):\n        x = my_gelu.apply(self.conv1(x))\n        x = my_gelu.apply(self.pool(x))\n        x = my_gelu.apply(self.conv2(x))\n        x = my_gelu.apply(self.pool(x))\n        x = x.view(-1, 16 * 4 * 4)\n        x = my_gelu.apply(self.full1(x))\n        x = my_gelu.apply(self.full2(x))\n        x = self.full3(x)\n        return x\n...\n</code></pre> <p></p> <p>\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\u3002</p>"},{"location":"labs/cnn/#reference","title":"Reference","text":"<ul> <li>CNN \u57fa\u7840\u77e5\u8bc6</li> <li>\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7ecf\u5178\u56de\u987e\u4e4bLeNet-5</li> <li>PYTORCH DOCUMENTATION</li> <li>PyTorch 74.\u81ea\u5b9a\u4e49\u64cd\u4f5ctorch.autograd.Function</li> </ul>"},{"location":"labs/cuda/","title":"lab3 GEMM \u901a\u7528\u77e9\u9635\u4e58\u6cd5","text":""},{"location":"labs/cuda/#_1","title":"\u5b9e\u9a8c\u6b65\u9aa4","text":""},{"location":"labs/cuda/#blocking-array-packing","title":"Blocking &amp; Array Packing","text":"<p>\u57fa\u51c6\u4ee3\u7801\u4e2d\uff0c\u6309\u5217\u8bbf\u95ee\u77e9\u9635\u5143\u7d20\u65f6\u5c40\u90e8\u6027\u4e0d\u9ad8\u3002\u901a\u8fc7\u5bf9\u77e9\u9635\u8fdb\u884c\u5206\u5757\uff0c\u8ba9\u6bcf\u4e2a\u5757\u4e2d\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u8fde\u7eed\u6392\u5217\uff0c\u53ef\u4ee5\u63d0\u9ad8\u5c40\u90e8\u6027\u3002</p> <p>\u4f7f\u7528\u6838\u51fd\u6570 <code>BlockCudaKernel</code> \u5bf9\u77e9\u9635 A \u548c\u77e9\u9635 B \u8fdb\u884c\u5206\u5757\u5e76\u5b58\u50a8\u5728 <code>_a</code> \u548c <code>_b</code> \u4e2d\u3002</p> <pre><code>#define _a(_i, _j, _x, _y)                               \\\n  _a[((_i) * grid_size + (_j)) * block_size * block_size + ((_x) * block_size + (_y))]\n#define _b(_i, _j, _x, _y)                               \\\n  _b[((_i) * grid_size + (_j)) * block_size * block_size + ((_x) * block_size + (_y))]\n\n__global__ void BlockCudaKernel(double *__restrict__ _a,\n                                  const double *__restrict__ a,\n                                  double *__restrict__ _b,\n                                  const double *__restrict__ b)\n{\n  int grid_size = (size + block_size - 1) / block_size;\n  const int i = blockIdx.x * block_size + threadIdx.x;\n  const int j = blockIdx.y * block_size + threadIdx.y;\n  double a_res = 0, b_res = 0;\n  if (i &lt; size &amp;&amp; j &lt; size) {\n    a_res = a(i, j);\n    b_res = b(i, j);\n  }\n  _a(blockIdx.x, blockIdx.y, threadIdx.x, threadIdx.y) = a_res;\n  _b(blockIdx.x, blockIdx.y, threadIdx.x, threadIdx.y) = b_res;\n}\n</code></pre> <p>Note</p> <p>\u6b64\u5904\u5c06\u77e9\u9635\u5927\u5c0f\u8865\u5168\u4e3a <code>block_size</code> \u7684\u6574\u6570\u500d\uff0c\u65b9\u4fbf\u540e\u7eed\u8ba1\u7b97\u3002</p> <p>\u76f8\u5e94\u5730\u5bf9 <code>MultipleCudaKernel</code> \u6838\u51fd\u6570\u8fdb\u884c\u4fee\u6539\uff0c\u4ece\u5206\u5757\u540e\u7684\u77e9\u9635\u62ff\u53d6\u5143\u7d20\u8fdb\u884c\u8ba1\u7b97\u3002</p> <pre><code>__global__ void MultipleCudaKernel(const double *__restrict__ _a, \n                                     const double *__restrict__ _b, \n                                     double *__restrict__ result) \n{\n  int grid_size = (size + block_size - 1) / block_size;\n  const int i = blockIdx.x * block_size + threadIdx.x;\n  const int j = blockIdx.y * block_size + threadIdx.y;\n  if (i &lt; size &amp;&amp; j &lt; size) {\n    double res = 0;\n    for (int idx = 0; idx &lt; gridDim.x; ++idx) {\n      for (int k = 0; k &lt; block_size &amp;&amp; \n                      k &lt; size - idx * block_size; ++k) {\n        res += _a(blockIdx.x, idx, threadIdx.x, k) * \n               _b(idx, blockIdx.y, k, threadIdx.y);\n      }\n    }\n    result(i, j) = res;\n  }\n}\n</code></pre> <p>\u6838\u51fd\u6570\u8c03\u7528\u90e8\u5206\u4fee\u6539\uff1a</p> <pre><code>AdderCudaKernel&lt;&lt;&lt;grid, block&gt;&gt;&gt;(copy_kernel, b_kernel);\nCUDA_CALL(cudaDeviceSynchronize());\ndouble *a_block, *copy_block;\nCUDA_CALL(cudaMalloc(&amp;a_block, grid_size * grid_size * \n                               block_size * block_size * sizeof(double)));\nCUDA_CALL(cudaMalloc(&amp;copy_block, grid_size * grid_size * \n                               block_size * block_size * sizeof(double)));\nBlockCudaKernel&lt;&lt;&lt;grid, block&gt;&gt;&gt;(a_block, a_kernel, copy_block, copy_kernel);\nCUDA_CALL(cudaDeviceSynchronize());\n// Perform A * B -&gt; Result.\nMultipleCudaKernel&lt;&lt;&lt;grid, block&gt;&gt;&gt;(a_block, copy_block, result_kernel);\nCUDA_CALL(cudaDeviceSynchronize());\n// Swap pointers between A and Result.\ndouble *tmp = a_kernel;\na_kernel = result_kernel;\nresult_kernel = tmp;\n\ncudaFree(a_block);\ncudaFree(copy_block);\n</code></pre> <p>\u901a\u8fc7\u591a\u6b21\u8c03\u8bd5\uff0c\u91c7\u7528 <code>block_size = 8</code> \u80fd\u591f\u8fbe\u5230\u8f83\u5feb\u7684\u901f\u5ea6\u3002</p> <p>\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a</p> <pre><code>Correct\nCustom: 13634.3 milliseconds\ncuBLAS: 11508.2 milliseconds\n</code></pre> <p>\u6b64\u5916\uff0c\u901a\u8fc7\u6570\u7ec4\u5c01\u88c5\uff0c\u8ba9\u77e9\u9635 B \u5728\u5217\u65b9\u5411\u7684\u5b50\u5757\u5728\u5185\u5b58\u4e2d\u8fde\u7eed\u6392\u5217\uff0c\u80fd\u591f\u8fdb\u4e00\u6b65\u63d0\u9ad8\u5c40\u90e8\u6027\u3002\u5728\u4ee3\u7801\u4e2d\u53ea\u9700\u4fee\u6539 <code>_b</code> \u6570\u7ec4\u7684\u5185\u5b58\u6392\u5e03\u3002</p> <pre><code>#define _b(_i, _j, _x, _y) \\\n  _b[((_j) * grid_size + (_i)) * block_size * block_size + ((_y) * block_size + (_x))]\n</code></pre>"},{"location":"labs/cuda/#shared-memory-cooperative-fetching","title":"Shared Memory &amp; Cooperative Fetching","text":"<p>\u8ba1\u7b97\u76ee\u6807\u77e9\u9635 C \u65f6\uff0c\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u5757\u8ba1\u7b97\u77e9\u9635 C \u7684\u4e00\u4e2a\u5b50\u5757\uff0c\u6709 \\(C_{ij}=\\sum _{k=0}^{N-1}A_{ik}B_{kj}\\) \u3002</p> <p>\u4e0a\u9762\u7684\u505a\u6cd5\u4e2d\uff0c\u6bcf\u6b21\u90fd\u9700\u8981\u4ece global memory \u4e2d\u62ff\u53d6\u77e9\u9635 A \u548c B \u4e2d\u7684\u5143\u7d20\uff0c\u901f\u5ea6\u8f83\u6162\u3002</p> <p>\u5728\u8ba1\u7b97\u4e4b\u524d\uff0c\u5c06 \\(A_{ik}\\) \u548c \\(B_{kj}\\) \u653e\u5165 shared memory \u4e2d\uff0c\u8ba1\u7b97\u65f6\u53ea\u9700\u4ece shared memory \u4e2d\u62ff\u53d6\u5143\u7d20\uff0c\u4ece\u800c\u964d\u4f4e\u8bbf\u5b58\u5ef6\u8fdf\u3002</p> <pre><code>#define a_shared(_x, _y) a_shared[(_x) * block_size + (_y)]\n#define b_shared(_x, _y) b_shared[(_x) * block_size + (_y)]\n\n/// \\brief Do Matrix Multiplication on GPU.\n__global__ void MultipleCudaKernel(const double *__restrict__ _a, \n                                     const double *__restrict__ _b, \n                                     double *__restrict__ result) \n{\n  int grid_size = (size + block_size - 1) / block_size;\n\n  __shared__ double a_shared[block_size * block_size];\n  __shared__ double b_shared[block_size * block_size];\n\n  const int i = blockIdx.x * block_size + threadIdx.x;\n  const int j = blockIdx.y * block_size + threadIdx.y;\n  const int x = threadIdx.x;\n  const int y = threadIdx.y;\n\n  double res = 0;\n  for (int idx = 0; idx &lt; gridDim.x; ++idx) {\n    // Load matrix to shared memory\n    a_shared(x, y) = _a(blockIdx.x, idx, x, y);\n    b_shared(x, y) = _b(idx, blockIdx.y, x, y);\n    __syncthreads();\n\n    for (int k = 0; k &lt; block_size; ++k) {\n      res += a_shared(x, k) * b_shared(k, y);\n    }\n    __syncthreads();\n  }\n  if (i &lt; size &amp;&amp; j &lt; size) {\n    result(i, j) = res;\n  }\n}\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a</p> <pre><code>Correct\nCustom: 17235.6 milliseconds\ncuBLAS: 11489.1 milliseconds\n</code></pre> <p>\u6027\u80fd\u6709\u6240\u4e0b\u6ed1\uff0c\u63a8\u6d4b\u662f\u56e0\u4e3a bank conflict \u8f83\u591a\uff0c\u5bfc\u81f4\u8bbf\u5b58\u6548\u7387\u8f83\u4f4e\u3002</p>"},{"location":"labs/cuda/#bank-conflict","title":"Bank Conflict","text":"<p>\u5047\u8bbe\u5b58\u50a8\u5668\u6709 16 \u4e2a bank \uff0c\u4e14\u8fde\u7eed\u7684 16 \u4e2a\u77e9\u9635\u5143\u7d20\u88ab\u5206\u522b\u5b58\u50a8\u5230 16 \u4e2a bank \u4e2d\u3002</p> <p>\u5f53\u6bcf\u884c\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u8fde\u7eed\u65f6\uff0cbank \u7684\u5206\u914d\u5982\u4e0b\u56fe\uff08\u5176\u4e2d\u7eff\u8272\u6570\u5b57\u4e3a\u5143\u7d20\u6240\u5728 bank \u7f16\u53f7\uff09\uff0c</p> <p></p> <p>\u82e5 <code>a_shared</code> \u91c7\u7528\u5982\u4e0a\u7684\u6570\u636e\u6392\u5e03\uff0c\u5219\u6bcf\u4e2a\u7ebf\u7a0b\u5757\u5bf9 <code>a_shared</code> \u7684\u8bbf\u95ee\u5982\u4e0b\u56fe\u3002</p> <p></p> <p>\u7531\u4e8e\u8ba1\u7b97 c(x, 0~7) \u65f6\u5404\u4e2a\u7ebf\u7a0b\u5747\u8bbf\u95ee\u76f8\u540c\u7684\u5730\u5740\uff0c\u901a\u8fc7\u5e7f\u64ad\u5219\u4e0d\u4f1a\u4ea7\u751f bank conflict \u3002\u6545\u4e3b\u8981\u4ea7\u751f bank conflict \u7684\u539f\u56e0\u662f\u4e0d\u540c\u884c\u7684\u7ebf\u7a0b\u8bbf\u95ee\u4e86\u540c\u4e00 bank \u7684\u4e0d\u540c\u4f4d\u7f6e\u3002</p> <p>\u901a\u8fc7\u5bf9\u5185\u5b58\u8fdb\u884c\u91cd\u65b0\u914d\u5e03\uff0c\u4f7f\u5f97\u6bcf\u4e00\u5217\u7684\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u8fde\u7eed\u3002\u5982\u56fe\uff0c\u6b64\u65f6\u4e0d\u540c\u884c\u7684\u7ebf\u7a0b\u4e0d\u4f1a\u4ea7\u751f bank conflict \u3002</p> <p></p> <p>\u5bf9\u4e8e <code>b_shared</code> \u77e9\u9635\uff0c\u540c\u7406\u53ef\u77e5\u8ba9\u5176\u6bcf\u884c\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u8fde\u7eed\uff0c\u5373\u53ef\u907f\u514d bank conflict \u3002</p> <p>\u4ee3\u7801\u4e2d\u53ea\u9700\u6539\u52a8 <code>a_shared</code> \u6570\u7ec4\u7684\u5185\u5b58\u5206\u5e03\uff1a</p> <pre><code>#define a_shared(_x, _y) a_shared[(_y) * block_size + (_x)]\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\uff1a</p> <pre><code>Correct\nCustom: 11333.5 milliseconds\ncuBLAS: 11484.9 milliseconds\n</code></pre> <p>\u4ee5\u4e0a\u90e8\u5206\u7684\u4ee3\u7801\u5728 <code>/code/baseline.cu</code> \u4e2d\uff0c\u7f16\u8bd1\u53c2\u6570\u4f4d\u4e8e <code>/code/Makefile</code> \uff0c\u8fd0\u884c\u53c2\u6570\u4e3a</p> <pre><code>srun -p 2080Ti -N 1 -n 1 --cpus-per-task=8 --gpus=1 gemm\n</code></pre>"},{"location":"labs/cuda/#tensor-core","title":"Tensor Core","text":"<p>\u4f7f\u7528 <code>nvcuda::wmma</code> \u4e2d\u7684 Tensor Core API \u8c03\u7528 Tensor Core \u8fdb\u884c\u77e9\u9635\u4e58\u6cd5\u3002</p> <p>\u7531\u4e8e\u5bf9\u4e8e\u6570\u636e\u7c7b\u578b <code>double</code> \uff0c\u53ea\u63d0\u4f9b\u4e86 8x8x4 \u7684 Matrix Size \uff0c\u6545\u5206\u5757\u8ba1\u7b97\u65f6\uff0c\u5c06 8x8x8 \u7684\u77e9\u9635\u4e58\u6cd5\u62c6\u5206\u6210\u4e24\u6b21 8x8x4 \u7684\u77e9\u9635\u4e58\u6cd5\uff0c\u8c03\u7528 Tensor Core \u8fdb\u884c\u8ba1\u7b97\u3002</p> <pre><code>#define a_shared(_x, _y) a_shared[(_y) * block_size + (_x)]\n#define b_shared(_x, _y) b_shared[(_x) * block_size + (_y)]\n#define c_shared(_x, _y) c_shared[(_x) * block_size + (_y)]\n\n/// \\brief Do Matrix Multiplication on GPU.\n__global__ void MultipleCudaKernel(const double *__restrict__ _a, \n                                     const double *__restrict__ _b, \n                                     double *__restrict__ result) \n{\n  int grid_size = (size + block_size - 1) / block_size;\n\n  __shared__ double a_shared[block_size * block_size];\n  __shared__ double b_shared[block_size * block_size];\n  __shared__ double c_shared[block_size * block_size];\n\n  wmma::fragment&lt;wmma::matrix_a, block_size, block_size, \n                block_size / 2, double, wmma::col_major&gt; a_frag;\n  wmma::fragment&lt;wmma::matrix_b, block_size, block_size, \n                block_size / 2, double, wmma::row_major&gt; b_frag;\n  wmma::fragment&lt;wmma::accumulator, block_size, block_size, \n                block_size / 2, double&gt; c_frag;\n\n  const int i = blockIdx.x * block_size + threadIdx.x;\n  const int j = blockIdx.y * block_size + threadIdx.y;\n  const int x = threadIdx.x;\n  const int y = threadIdx.y;\n\n  wmma::fill_fragment(c_frag, 0.0f);\n\n  for (int idx = 0; idx &lt; gridDim.x; ++idx) {\n    a_shared(x, y) = _a(blockIdx.x, idx, x, y);\n    b_shared(x, y) = _b(idx, blockIdx.y, x, y);\n    __syncthreads();\n\n    wmma::load_matrix_sync(a_frag, a_shared, block_size);\n    wmma::load_matrix_sync(b_frag, b_shared, block_size);\n    wmma::mma_sync(c_frag, a_frag, b_frag, c_frag);\n\n    wmma::load_matrix_sync(a_frag, \n            a_shared + block_size * block_size / 2, block_size);\n    wmma::load_matrix_sync(b_frag, \n            b_shared + block_size * block_size / 2, block_size);\n    wmma::mma_sync(c_frag, a_frag, b_frag, c_frag);\n    __syncthreads();\n  }\n\n  wmma::store_matrix_sync(c_shared, c_frag, \n                          block_size, wmma::mem_row_major);\n  __syncthreads();\n\n  if (i &lt; size &amp;&amp; j &lt; size) {\n    result(i, j) = c_shared(x, y);\n  }\n}\n</code></pre> <p>\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a</p> <pre><code>Correct\nCustom: 2127.59 milliseconds\ncuBLAS: 899.045 milliseconds\n</code></pre> <p>Bonus \u90e8\u5206\u4ee3\u7801\u4f4d\u4e8e <code>/code_tensor/baseline.cu</code> \u4e2d\uff0c\u7f16\u8bd1\u53c2\u6570\u4f4d\u4e8e <code>/code_tensor/Makefile</code> \u4e2d\uff0c\u8fd0\u884c\u53c2\u6570\u4e3a\uff1a</p> <pre><code>srun -p A100 -N 1 -n 1 --cpus-per-task=8 --gpus=1 ./gemm\n</code></pre>"},{"location":"labs/cuda/#reference","title":"Reference","text":"<ul> <li>How to optimize GEMM on CPU</li> <li>\u6df1\u5165\u6d45\u51faGPU\u4f18\u5316\u7cfb\u5217\uff1aGEMM\u4f18\u5316\uff08\u4e00\uff09</li> <li>\u4f20\u7edf CUDA GEMM \u4e0d\u5b8c\u5168\u6307\u5317</li> <li>\u94f6\u6cb3\u7cfbCUDA\u7f16\u7a0b\u6307\u5357(3)\u2014\u2014\u77e9\u9635\u4e58\u6cd5\u7684\u5206\u5757\u5b9e\u73b0</li> <li>CUDA C++ Programming Guide # Warp Matrix Functions</li> </ul>"},{"location":"labs/numpy/","title":"lab2 \u5411\u91cf\u5316\u8ba1\u7b97","text":""},{"location":"labs/numpy/#_1","title":"\u601d\u8def","text":""},{"location":"labs/numpy/#step-1","title":"Step 1","text":"<p>\u5148\u8003\u8651\u8ba1\u7b97\u5355\u5f20\u56fe\u7247\u7684\u60c5\u5f62\uff08 <code>N = 1</code> \uff09\u3002</p> <p>\u4e0b\u8bbe\u65b0\u7684 \\(H_2 \\times W_2\\) \u7684\u56fe\u4e2d \\((i,j)\\) \u5904\u50cf\u7d20\u6240\u60f3\u8981\u91c7\u6837\u7684 <code>a</code> \u56fe\u4e2d\u5bf9\u5e94\u70b9\u5750\u6807\u4e3a \\((x_{(i,j)}, y_{(i,j)})\\) \uff0c\u5373 <code>b[n, i, j]</code> \u5904\u6240\u5b58\u5750\u6807\u3002</p> <p>\u9605\u8bfb <code>baseline.py</code> \uff0c\u53ef\u77e5\u57fa\u51c6\u4ee3\u7801\u91c7\u7528\u4e86\u5982\u4e0b\u7b49\u5f0f\u8ba1\u7b97\u6bcf\u4e2a\u91c7\u6837\u70b9 <code>(x, y)</code> \u7684\u91c7\u6837\u7ed3\u679c\uff1a</p> \\[ \\begin{aligned}     f(x,y) \\approx     {\\frac {1}{(x_{2}-x_{1})(y_{2}-y_{1})}}      {\\big (}     &amp;f(Q_{11})(x_{2}-x)(y_{2}-y) + f(Q_{21})(x-x_{1})(y_{2}-y)\\\\     +&amp;f(Q_{12})(x_{2}-x)(y-y_{1}) + f(Q_{22})(x-x_{1})(y-y_{1})     {\\big )} \\end{aligned} \\] <p>\u5728\u672c\u6b21\u5b9e\u9a8c\u7ed9\u51fa\u7684\u60c5\u666f\u4e2d\uff0c \\(x_2 - x_1 = y_2 - y_1 = 1, x_1 = \\lfloor x \\rfloor, y_1 = \\lfloor y \\rfloor\\)  \uff0c\u8bb0  \\(x' = x - \\lfloor x \\rfloor\uff0c y' = y - \\lfloor y \\rfloor\\)  \uff0c\u4e0a\u8ff0\u7b49\u5f0f\u53ef\u7b80\u5316\u4e3a\uff1a</p> \\[ \\displaystyle \\begin{aligned}     f(x,y) \\approx      \\ &amp; f(Q_{11})(1 - x')(1 - y')+f(Q_{21})(x')(1 - y') \\\\     + \\ &amp; f(Q_{12})(1 - x')(y')+f(Q_{22})(x')(y') \\\\ \\end{aligned} \\] <p>\u7531\u4e8e\u6bcf\u4e2a\u91c7\u6837\u70b9\u7684\u8ba1\u7b97\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u51e0\u4e2a\u77e9\u9635\uff0c</p> \\[ \\mathbf{F} = \\big( f(x_{(i,j)}, y_{(i,j)})\\big)_{H2 \\times W2}  \\] \\[ \\begin{aligned}     \\mathbf{F_{00}} = \\big( f(Q_{11})\\big)_{H2 \\times W2} \\quad     \\mathbf{F_{01}} = \\big( f(Q_{12})\\big)_{H2 \\times W2} \\\\     \\mathbf{F_{10}} = \\big( f(Q_{21})\\big)_{H2 \\times W2} \\quad     \\mathbf{F_{11}} = \\big( f(Q_{22})\\big)_{H2 \\times W2} \\\\ \\end{aligned} \\] \\[ \\begin{aligned}     \\mathbf{X'} = \\big( x'_{(i, j)} \\big)_{H2 \\times W2} \\\\     \\mathbf{Y'} = \\big( y'_{(i, j)} \\big)_{H2 \\times W2} \\end{aligned} \\] <p>\u4f7f\u7528\u9010\u5143\u7d20\u4e58\u6cd5\uff08 <code>*</code> \uff09\u548c\u77e9\u9635\u52a0\u6cd5\u5373\u53ef\u5b9e\u73b0\u5411\u91cf\u5316\u8ba1\u7b97\u77e9\u9635 \\(\\mathbf{F}\\) \u4e2d\u7684\u91c7\u6837\u4fe1\u606f\uff1a</p> \\[ \\begin{aligned}     \\mathbf{F}     &amp; = \\mathbf{F_{00}} * (1 - \\mathbf{X'}) * (1 - \\mathbf{Y'}) + \\mathbf{F_{10}} * \\mathbf{X'} * (1 - \\mathbf{Y'}) \\\\     &amp; + \\mathbf{F_{01}} * (1 - \\mathbf{X'}) * \\mathbf{Y'} + \\mathbf{F_{11}} * \\mathbf{X'} * \\mathbf{Y'}  \\end{aligned} \\] <p>\u636e\u6b64\u5373\u53ef\u4f7f\u7528\u5411\u91cf\u5316\u53bb\u6389\u5185\u5c42\u4e24\u5c42 <code>for</code> \u5faa\u73af\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a</p> vectorize1.py<pre><code>def bilinear_interp_vectorized(a: np.ndarray, b: np.ndarray) -&gt; np.ndarray:\n    \"\"\"\n    This is the vectorized implementation of bilinear interpolation.\n    - a is a ND array with shape [N, H1, W1, C], dtype = int64\n    - b is a ND array with shape [N, H2, W2, 2], dtype = float64\n    - return a ND array with shape [N, H2, W2, C], dtype = int64\n    \"\"\"\n    # get axis size from ndarray shape\n    N, H1, W1, C = a.shape\n    N1, H2, W2, _ = b.shape\n    assert N == N1\n\n    # Do iteration\n    b = b.transpose(0, 3, 1, 2)\n    res = np.empty((N, H2, W2, C), dtype=int64)\n\n    for n in range(N):\n        X, Y = b[n]\n        X_idx , Y_idx = np.floor(X).astype(int64), np.floor(Y).astype(int64)\n        _X, _Y = X - X_idx, Y - Y_idx\n        A00 = a[n, X_idx, Y_idx].transpose(2, 0, 1)\n        A01 = a[n, X_idx, Y_idx + 1].transpose(2, 0, 1)\n        A10 = a[n, X_idx + 1, Y_idx].transpose(2, 0, 1)\n        A11 = a[n, X_idx + 1, Y_idx + 1].transpose(2, 0, 1)\n        res00 = A00 * (1 - _X) * (1 - _Y)\n        res10 = A10 * _X * (1 - _Y)\n        res01 = A01 * (1 - _X) * _Y\n        res11 = A11 * _X * _Y\n        res[n] = res00.transpose(1, 2, 0) + res01.transpose(1, 2, 0) + \\\n                 res10.transpose(1, 2, 0) + res11.transpose(1, 2, 0)\n    return res\n</code></pre> <p>Note</p> <p>\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86 <code>np.transpose</code> \u51fd\u6570\u8fdb\u884c\u77e9\u9635\u8f6c\u7f6e\uff0c\u4f7f\u5f97 <code>X, Y</code> \u80fd\u5bb9\u6613\u5730\u4ece <code>b</code> \u4e2d\u53d6\u51fa\uff0c\u5e76\u4e14\u4f7f\u5f97\u5728\u8fdb\u884c\u77e9\u9635\u9010\u5143\u7d20\u4e58\u6cd5\u65f6\u80fd\u6ee1\u8db3\u5e7f\u64ad\u89c4\u5219\uff0c\u540c\u65f6\u5bf9 <code>C</code> \u4e2a\u901a\u9053\u7684\u4fe1\u606f\u8fdb\u884c\u5904\u7406\u3002</p>"},{"location":"labs/numpy/#step-2","title":"Step 2","text":"<p>\u73b0\u5728\u8003\u8651\u540c\u65f6\u5bf9 <code>N</code> \u5f20\u56fe\u7247\u8fdb\u884c\u5904\u7406\u3002</p> <p>\u5bf9 <code>vectorize1.py</code> \u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u4fee\u6539\u3002</p> <p>\u6211\u4eec\u8981\u5c06 <code>N</code> \u5f20\u56fe\u7247\u7684\u4fe1\u606f\u8fdb\u884c\u6574\u5408\u5904\u7406\uff0c\u4e00\u4e2a\u53ef\u884c\u7684\u65b9\u6cd5\u4e3a\u5728 <code>X, Y</code> \u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e00\u4e2a\u4ee3\u8868\u56fe\u7247\u7d22\u5f15\u7684\u8f74\uff0c\u4f7f\u5176\u5f62\u72b6\u4ece <code>(H2, W2)</code> \u53d8\u4e3a <code>(N, H2, W2)</code> \u3002\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff08 <code>X_idx, Y_idx, _X, _Y</code> \u7684\u83b7\u53d6\u4e00\u5e76\u7ed9\u51fa\uff09\uff1a</p> <pre><code>X, Y = b.transpose(3, 0, 1, 2)\nX_idx , Y_idx = np.floor(X).astype(int64), np.floor(Y).astype(int64)\n_X, _Y = X - X_idx, Y - Y_idx\n</code></pre> <p>\u540c\u7406\uff0c<code>A00, A01, A10, A11</code> \u5747\u9700\u8981\u589e\u52a0\u4e00\u4e2a\u8f74\uff0c\u4e8e\u662f\u65b0\u589e\u4e00\u4e2a\u7d22\u5f15\u6570\u7ec4 <code>N_idx</code> \u5bf9 <code>a</code> \u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u8f74 \uff08 <code>axis = 0</code> \uff09 \u8fdb\u884c\u7d22\u5f15\u3002\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a</p> <pre><code>N_idx = np.arange(N).reshape(N, 1, 1)\n\nA00 = a[N_idx, X_idx, Y_idx].transpose(3, 0, 1, 2)\nA01 = a[N_idx, X_idx, Y_idx + 1].transpose(3, 0, 1, 2)\nA10 = a[N_idx, X_idx + 1, Y_idx].transpose(3, 0, 1, 2)\nA11 = a[N_idx, X_idx + 1, Y_idx + 1].transpose(3, 0, 1, 2)\n</code></pre> <p>Note</p> <p><code>N_idx</code> \u7684\u5f62\u72b6\u4e0e <code>X_idx, Y_idx</code> \u5e76\u4e0d\u5339\u914d\uff0c\u4e4b\u6240\u4ee5\u80fd\u591f\u50cf\u8fd9\u6837\u5bf9 <code>a</code> \u6570\u7ec4\u8fdb\u884c fancy indexing \uff0c\u662f\u56e0\u4e3a\u8fdb\u884c\u7d22\u5f15\u7684\u65f6\u5019\u5bf9 <code>N_idx</code> \u7684\u540e\u4e24\u4e2a\u8f74\uff08 <code>axis=1, axis=2</code> \uff09\u8fdb\u884c\u4e86 broadcast \u3002</p> <p>\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a</p> vectorize.py<pre><code>def bilinear_interp_vectorized(a: np.ndarray, b: np.ndarray) -&gt; np.ndarray:\n    \"\"\"\n    This is the vectorized implementation of bilinear interpolation.\n    - a is a ND array with shape [N, H1, W1, C], dtype = int64\n    - b is a ND array with shape [N, H2, W2, 2], dtype = float64\n    - return a ND array with shape [N, H2, W2, C], dtype = int64\n    \"\"\"\n    # get axis size from ndarray shape\n    N, _, _, C = a.shape\n    N1, H2, W2, _ = b.shape\n    assert N == N1\n\n    # Do iteration\n    res = np.empty((N, H2, W2, C), dtype=int64)\n\n    # Get the matrices of coordinates\n    X, Y = b.transpose(3, 0, 1, 2)\n    X_idx , Y_idx = np.floor(X).astype(int64), np.floor(Y).astype(int64)\n    _X, _Y = X - X_idx, Y - Y_idx\n\n    # Generate the indices array\n    N_idx = np.arange(N).reshape(N, 1, 1)\n\n    A00 = a[N_idx, X_idx, Y_idx].transpose(3, 0, 1, 2)\n    A01 = a[N_idx, X_idx, Y_idx + 1].transpose(3, 0, 1, 2)\n    A10 = a[N_idx, X_idx + 1, Y_idx].transpose(3, 0, 1, 2)\n    A11 = a[N_idx, X_idx + 1, Y_idx + 1].transpose(3, 0, 1, 2)\n    res = A00 * (1 - _X) * (1 - _Y) + A01 * (1 - _X) * _Y + \\\n          A10 * _X * (1 - _Y) + A11 * _X * _Y\n    return res.transpose(1, 2, 3, 0).astype(int64)\n</code></pre>"},{"location":"labs/numpy/#_2","title":"\u6b63\u786e\u6027\u4e0e\u52a0\u901f\u6bd4","text":"<p>\u8fd0\u884c <code>main.py</code> \uff0c\u67e5\u770b\u8f93\u51fa\uff1a</p> <pre><code>Generating Data...\nExecuting Baseline Implementation...\nFinished in 99.58129525184631s\nExecuting Vectorized Implementation...\nFinished in 3.138871192932129s\n[PASSED] Results are identical.\nSpeed Up 31.725193272051396x\n</code></pre> <p>\u53ef\u89c1\u8fd0\u884c\u7ed3\u679c\u6b63\u786e\uff0c\u52a0\u901f\u6bd4\u4e3a 31.725193272051396 \u3002</p>"},{"location":"labs/numpy/#reference","title":"Reference","text":"<ul> <li>\u521d\u63a2Numpy\u4e2d\u7684\u82b1\u5f0f\u7d22\u5f15\uff1ahttps://zhuanlan.zhihu.com/p/123858781</li> <li>Numpy\u4e2dtranspose()\u51fd\u6570\u7684\u53ef\u89c6\u5316\u7406\u89e3\uff1ahttps://zhuanlan.zhihu.com/p/61203757</li> <li>NumPy \u4e2d\u6587\u6587\u6863\uff0c\u5e7f\u64ad\uff08Broadcasting\uff09\uff1ahttps://numpy.org.cn/user/basics/broadcasting.html</li> </ul>"},{"location":"labs/pcg/","title":"lab4 PCG Solver","text":""},{"location":"labs/pcg/#_1","title":"\u5b9e\u9a8c\u6b65\u9aa4","text":""},{"location":"labs/pcg/#_2","title":"\u8bbf\u5b58\u4f18\u5316","text":"<p>\u57fa\u51c6\u4ee3\u7801\u4e2d\uff0c\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u8bbf\u95ee\u5b58\u5728\u4e8e\u5bf9\u77e9\u9635 A \u5bf9\u89d2\u7ebf\u5143\u7d20\u7684\u8bbf\u95ee\u4e2d\uff0c\u901a\u8fc7\u5c06 A \u5bf9\u89d2\u7ebf\u5143\u7d20\u9884\u5148\u53d6\u51fa\u5b58\u653e\u5230\u8fde\u7eed\u7684\u5185\u5b58\u4e2d\uff0c\u63d0\u9ad8\u8bbf\u5b58\u6548\u7387\u3002</p>"},{"location":"labs/pcg/#openmp","title":"\u7ebf\u7a0b\u7ea7\u5e76\u884c\uff08OpenMP\uff09","text":"<p>\u4f7f\u7528 OpenMP \u5c06\u5faa\u73af\u5e76\u884c\u5316\u3002</p> <p>\u5bf9\u4e8e\u5faa\u73af\u4f53\u4e4b\u95f4\u65e0\u4f9d\u8d56\u7684\u8fed\u4ee3\uff0c\u5728\u5faa\u73af\u524d\u6dfb\u52a0\u5982\u4e0b\u6307\u4ee4\u4f7f\u5176\u5e76\u884c\u5316\uff1a</p> <pre><code>#pragma omp parallel for schedule(static)\n</code></pre> <p>\u5bf9\u4e8e\u8fdb\u884c\u7d2f\u52a0\u64cd\u4f5c\u7684\u8fed\u4ee3\uff0c\u4f7f\u7528\u5f52\u7ea6 (reduction) \u4f7f\u5176\u5e76\u884c\u5316\uff08\u5bf9 <code>sum</code> \u8fdb\u884c\u7d2f\u52a0\uff09\uff1a</p> <pre><code>#pragma omp parallel for reduction(+:sum) schedule(static)\n</code></pre> <p>\u5e76\u4e14\u4f7f\u7528 <code>static</code> \u8c03\u5ea6\u65b9\u5f0f\uff0c\u4f7f\u5404\u4e2a\u5757\u5305\u542b\u7684\u8fed\u4ee3\u6b21\u6570\u5e73\u5747\u3002</p>"},{"location":"labs/pcg/#mpi","title":"\u8fdb\u7a0b\u7ea7\u5e76\u884c\uff08MPI\uff09","text":"<p>\u4f7f\u7528 MPI \u5f00\u542f\u4e0d\u540c\u8fdb\u7a0b\u8fdb\u884c\u5e76\u884c\u8ba1\u7b97\u3002</p> <p>\u6574\u4f53\u601d\u8def\u4e3a\uff1a\u6839\u8fdb\u7a0b\u5728\u8ba1\u7b97\u5f00\u59cb\u524d\u5c06\u77e9\u9635 A \u548c\u6570\u7ec4 b \u5e7f\u64ad\u7ed9\u5404\u4e2a\u8fdb\u7a0b\uff0c\u5c06 <code>MatrixMulVec</code> \u51fd\u6570\u4e2d\u7684\u77e9\u9635\u4e0e\u5411\u91cf\u76f8\u4e58\u8fd0\u7b97\u5206\u53d1\u7ed9\u5404\u4e2a\u8fdb\u7a0b\u8fdb\u884c\u8ba1\u7b97\uff0c\u8ba1\u7b97\u5b8c\u6bd5\u4e4b\u540e\u5c06\u5404\u4e2a\u8fdb\u7a0b\u7ed3\u679c\u8fdb\u884c\u5408\u5e76\u5e76\u4e14\u5e7f\u64ad\uff0c\u5176\u4f59\u90e8\u5206\u5404\u4e2a\u8fdb\u7a0b\u72ec\u7acb\u8ba1\u7b97\u3002</p> <p>\u91c7\u7528\u4e0a\u8ff0\u65b9\u5f0f\uff0c\u5c3d\u91cf\u907f\u514d\u901a\u4fe1\u5e26\u6765\u8fc7\u5927\u7684\u5f00\u9500\uff0c\u5e76\u4e14\u5c3d\u91cf\u52a0\u901f\u65f6\u95f4\u6d88\u8017\u6700\u5927\u7684\u77e9\u9635\u4e0e\u5411\u91cf\u76f8\u4e58\u8fd0\u7b97\u3002</p> <p>\u6e90\u4ee3\u7801\u53ca <code>Makefile</code> \u6587\u4ef6\u4f4d\u4e8e\u5f53\u524d\u76ee\u5f55\u4e0b <code>pcg_c</code> \u6587\u4ef6\u5939\u5185\u3002</p> <p>Note</p> <p>\u5176\u4e2d <code>Makefile</code> \u6587\u4ef6\u8fdb\u884c\u4e86\u4e24\u5904\u66f4\u6539\uff1a</p> Makefile<pre><code>CC = mpiicc\nCFLAGS = -qopenmp -O3\n</code></pre> <p>\u4f7f\u7528 Intel \u63d0\u4f9b\u7684\u7f16\u8bd1\u5668 <code>mpiicc</code> \u3002</p> <p>\u6839\u636e\u5b98\u65b9\u6587\u6863\uff0c\u6dfb\u52a0 <code>-qopenmp</code> \u7f16\u8bd1\u9009\u9879\u542f\u7528 OpenMP \u3002</p> <p>\u4f7f\u7528 4 \u8282\u70b9 8 \u4efb\u52a1\u5bf9\u4e09\u7ec4\u8f93\u5165\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4f7f\u7528 <code>sbatch</code> \u63d0\u4ea4\u5982\u4e0b\u811a\u672c\uff1a</p> job.sh<pre><code>#!/bin/bash\n#SBATCH -o out.txt\n#SBATCH -N 4\n#SBATCH -n 8\n#SBATCH --exclusive\n#SBATCH --cpus-per-task 12\nsource /opt/intel/oneapi/setvars.sh\nulimit -s unlimited\nmpirun ./pcg input_2.bin | grep -v 'mpool' | grep -v 'ib_md'\n</code></pre> <p>\u7ed3\u679c\u5206\u522b\u7528\u65f6 3.97 s \u300117.48 s\u300191.90 s \u3002</p>"},{"location":"labs/pcg/#profile","title":"Profile","text":"<p>\u4ee5\u8f93\u5165 <code>input_2.bin</code> \u4e3a\u4f8b\uff0c\u4f7f\u7528 <code>Intel Trace Analyzer and Collector</code> \u8fdb\u884c\u6027\u80fd\u5206\u6790\u3002</p> <p></p> <p>\u7531\u56fe\u53ef\u5f97\uff0c\u8017\u65f6\u6700\u591a\u7684\u4e09\u4e2a <code>MPI</code> \u51fd\u6570\u5206\u522b\u4e3a <code>MPI_Allgather</code> \u3001 <code>MPI_Bcast</code> \u3001 <code>MPI_Comm_rank</code> \u3002</p> <p></p> <p>\u53ef\u5f97\u7a0b\u5e8f\u6d88\u8017\u7684\u603b\u65f6\u95f4\u4e3a 103 s \uff0c\u5176\u4e2d\u6d88\u8017\u5728 <code>MPI</code> \u4e0a\u7684\u603b\u65f6\u95f4\u4e3a 37.9 s \u3002</p> <p>\u6253\u5f00\u4e8b\u4ef6\u65f6\u95f4\u8f74 (Event Timeline) \u53ef\u4ee5\u770b\u5230\u5404\u4e2a\u8fdb\u7a0b\u7684\u8fd0\u884c\u60c5\u51b5\uff1a</p> <p></p> <p>\u7531\u56fe\u53ef\u5f97\uff0c\u7a0b\u5e8f\u4e00\u5171\u5f00\u542f\u4e86 8 \u4e2a\u8fdb\u7a0b\uff0c\u8c03\u7528 <code>MPI</code> \u7684\u5f00\u9500\u4e3b\u8981\u7684\u4f4d\u4e8e\u6bcf\u6b21\u8fdb\u5165 <code>PCG</code> \u51fd\u6570\u65f6\u8c03\u7528 <code>MPI_Bcast</code> \u51fd\u6570\u3002</p> <p>\u622a\u53d6\u4e00\u5c0f\u6bb5\u65f6\u95f4\u8f74\u8fdb\u884c\u653e\u5927\uff0c\u53ef\u4ee5\u5f97\u77e5\u5728\u4e00\u6b21 <code>PCG</code> \u51fd\u6570\u7684\u8c03\u7528\u4e2d\uff0c<code>MPI_Allgather</code> \u51fd\u6570\u88ab\u8c03\u7528\u4e86\u591a\u6b21\uff1a</p> <p></p> <p>\u6b64\u5916\uff0c\u53f3\u952e\u4e0b\u65b9\u7684 <code>Group MPI</code> \u9009\u62e9 <code>Ungroup MPI</code> \uff0c\u53ef\u4ee5\u770b\u5230\u5404\u4e2a <code>MPI</code> \u51fd\u6570\u7684\u8c03\u7528\u6b21\u6570\u53ca\u65f6\u95f4\u6d88\u8017\uff1a</p> <p></p>"},{"location":"labs/pcg/#bonus","title":"Bonus","text":"<p>\u4f7f\u7528 Fortran \u5b8c\u6210\u5b9e\u9a8c\u3002</p> <p>\u6e90\u4ee3\u7801\u53ca <code>Makefile</code> \u6587\u4ef6\u4f4d\u4e8e\u5f53\u524d\u76ee\u5f55\u4e0b <code>pcg_fortran</code> \u6587\u4ef6\u5939\u5185\u3002</p> <p>Note</p> <p><code>Makefile</code> \u6587\u4ef6\u5982\u4e0b\uff1a</p> Makefile<pre><code>CC = mpiicc\nCF = mpiifort\nCFLAGS = -qopenmp -O3\n\n.PHONY = pcg\n\npcg: main.o judge.o pcg.o\n    $(CF) $(CFLAGS) $^ -o $@\n\njudge.o: judge.c judge.h\n    $(CC) $(CFLAGS) -c judge.c -o judge.o\n\nmain.o: main.f90\n    $(CF) $(CFLAGS) -c main.f90 -o main.o\n\npcg.o: pcg.f90\n    $(CF) $(CFLAGS) -c pcg.f90 -o pcg.o\n\nclean:\n    rm -f judge.o main.o pcg.o pcg\n</code></pre> <p>\u4f7f\u7528\u7684 Fortran \u7f16\u8bd1\u5668\u4e3a Intel \u63d0\u4f9b\u7684 <code>mpiifort</code> \u3002</p> <p>\u5c06 <code>pcg.f90</code> \u3001 <code>main.f90</code> \u3001 <code>judge.c</code> \u5206\u522b\u7f16\u8bd1\u6c47\u7f16\u4e3a <code>.o</code> \u6587\u4ef6\u540e\uff0c\u518d\u8fdb\u884c\u94fe\u63a5\u5f62\u6210\u53ef\u6267\u884c\u6587\u4ef6 <code>pcg</code> \u3002</p> <p>\u4ee5\u4f7f\u7528 4 \u8282\u70b9 8 \u4efb\u52a1\u5bf9\u4e09\u7ec4\u8f93\u5165\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4f7f\u7528 <code>sbatch</code> \u63d0\u4ea4\u5982\u4e0b\u811a\u672c\uff1a</p> job.sh<pre><code>#!/bin/bash\n#SBATCH -o out.txt\n#SBATCH -N 4\n#SBATCH -n 8\n#SBATCH --exclusive\n#SBATCH --cpus-per-task 12\nsource /opt/intel/oneapi/setvars.sh\nulimit -s unlimited\nmpirun ./pcg input_2.bin | grep -v 'mpool' | grep -v 'ib_md'\n</code></pre> <p>\u4ee5 <code>input_2.bin</code> \u4e3a\u4f8b\uff0cFortran \u7528\u65f6 45.75 s \uff0cC \u7528\u65f6 17.48 s \u3002\uff08\u8fd8\u6ca1\u5f04\u6e05\u695a\u4e3a\u4ec0\u4e48\u76f8\u5dee\u8fd9\u4e48\u591a\uff09</p> <p>\u4f7f\u7528 C \u5b9e\u73b0\u53c2\u4e0e\u6392\u540d\u8ba1\u7b97\u5206\u6570\u3002</p>"},{"location":"labs/pcg/#reference","title":"Reference","text":"<ul> <li>MPI Tutorials</li> <li>Open MPI Documentation</li> <li>Get Started with Intel\u00ae Trace Analyzer and Collector</li> <li>Fortran \u5feb\u901f\u5165\u95e8\u6559\u7a0b</li> <li>Fortran \u7528\u6237\u6307\u5357</li> <li>Using OpenMP with Fortran</li> </ul>"},{"location":"labs/simd/","title":"lab2.5 \u624b\u5199 SIMD \u5411\u91cf\u5316","text":""},{"location":"labs/simd/#_1","title":"\u601d\u8def","text":"<p>\u9996\u5148\u5206\u6790\u9700\u8981\u5411\u91cf\u5316\u7684\u90e8\u5206\uff1a</p> <pre><code>for (int i = 0; i &lt; MAXN; ++i)\n{\n    c[i] += a[i] * b[i];\n}\n</code></pre> <p>\u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff1a</p> <ul> <li>\u9700\u8981\u8ba1\u7b97\u7684\u6570\u636e\uff1a <code>a[i], b[i], c[i]</code> \u3002</li> <li>\u8ba1\u7b97\u64cd\u4f5c\uff1a <code>tmp = a[i] * b[i]</code> \u548c <code>c[i] = c[i] + tmp</code> \u3002</li> </ul> <p>\u4e8e\u662f\u6839\u636e\u5411\u91cf\u5316\u7684\u57fa\u672c\u6d41\u7a0b\uff0c\u5927\u81f4\u9700\u8981\u51e0\u4e2a\u64cd\u4f5c\uff1a</p> <ul> <li>Load <code>a, b, c</code> \u5230 <code>__m256</code> \u7c7b\u578b\u53d8\u91cf <code>A, B, C</code> \u3002</li> <li>\u4ee4 <code>C = C + A * B</code> \u3002\uff08\u6b64\u5904\u8fd0\u7b97\u7b26\u53ea\u4ee3\u8868\u64cd\u4f5c\u7684\u542b\u4e49\uff09</li> <li>\u5c06 <code>C</code> \u7684\u6570\u636e\u5b58\u56de <code>float</code> \u6570\u7ec4 <code>c</code> \u4e2d \u3002</li> </ul> <p>\u5982\u4f55\u5b9e\u73b0\uff1f</p> <p>Load \u64cd\u4f5c\uff1a</p> <code>__m256 _mm256_loadu_ps (float const * mem_addr)</code> <p>\u4ece <code>mem_addr</code> \u6307\u5411\u7684\u5185\u5b58\u5730\u5740\u4e2d load 256 \u4f4d\uff088 \u4e2a <code>float</code> \u5143\u7d20\uff09\u7684\u6570\u636e\u5230\u5411\u91cf\u5bc4\u5b58\u5668\u3002</p> <p>\u8ba1\u7b97\u64cd\u4f5c\uff1a</p> <code>__m256 _mm256_mul_ps (__m256 a, __m256 b)</code> <p>\u8ba1\u7b97 <code>a</code> \u548c <code>b</code> \u4e2d <code>float</code> \u5143\u7d20\u9010\u4f4d\u76f8\u4e58\u7684\u7ed3\u679c\u3002</p> <code>__m256 _mm256_add_ps (__m256 a, __m256 b)</code> <p>\u8ba1\u7b97 <code>a</code> \u548c <code>b</code> \u4e2d <code>float</code> \u5143\u7d20\u9010\u4f4d\u76f8\u52a0\u7684\u7ed3\u679c\u3002</p> <p>Store \u64cd\u4f5c\uff1a</p> <code>void _mm256_storeu_ps (float * mem_addr, __m256 a)</code> <p>\u5c06 <code>a</code> \u4e2d\u7684 256 \u4f4d\uff088 \u4e2a <code>float</code> \u5143\u7d20\uff09\u7684\u6570\u636e store \u5230 <code>mem_addr</code> \u6307\u5411\u7684\u5185\u5b58\u5730\u5740\u4e2d\u3002</p> <p>\u4e8e\u662f\u5c31\u53ef\u4ee5\u5199\u51fa\u5411\u91cf\u5316\u7684\u4ee3\u7801\u4e86\uff1a</p> <pre><code>#define LEN (MAXN / 8)\nfor (int i = 0; i &lt; LEN; ++i) {\n    __m256 A, B, C;\n\n    // Load data\n    A = _mm256_loadu_ps(a + i * 8);\n    B = _mm256_loadu_ps(b + i * 8);\n    C = _mm256_loadu_ps(c + i * 8);\n\n    // Calculate\n    C = _mm256_add_ps(C, _mm256_mul_ps(A, B));\n\n    // Store data\n    _mm256_storeu_ps(c + i * 8, C);\n}\n</code></pre> <p>Note</p> <p>\u7531\u4e8e <code>__m256</code> \u7c7b\u578b\u53d8\u91cf\u53ea\u80fd\u540c\u65f6\u64cd\u4f5c 256 \u4f4d\u6570\u636e\uff0c\u5373 8 \u4e2a <code>float</code> \uff0c\u5411\u91cf\u5316\u65f6\u9700\u5bf9\u6bcf 8 \u4e2a\u6570\u636e\u8fdb\u884c\u4e00\u6b21\u5411\u91cf\u5316</p>"},{"location":"labs/simd/#_2","title":"\u6b63\u786e\u6027\u548c\u52a0\u901f\u6bd4","text":"<p>\u7f16\u8bd1\u8fd0\u884c <code>add.cpp</code> \uff0c\u7a0b\u5e8f\u8f93\u51fa\uff1a</p> <pre><code>time=1.916000\nCheck Passed\n</code></pre> <p>\u5411\u91cf\u5316\u540e\u8ba1\u7b97\u7ed3\u679c\u6b63\u786e\uff0c\u52a0\u901f\u6bd4\u4e3a 1.916 \u3002</p>"},{"location":"labs/simd/#_3","title":"\u6c47\u7f16\u4ee3\u7801\u5206\u6790","text":"<p>\u5229\u7528 godbolt \u8fdb\u884c\u6c47\u7f16\u4ee3\u7801\u5206\u6790\u3002</p> <p>\u5411\u91cf\u5316\u524d\uff0c\u9700\u8981\u5411\u91cf\u5316\u7684\u4ee3\u7801\u90e8\u5206\u7684\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>...\n        mov     DWORD PTR [rbp-20], 0\n        jmp     .L11\n.L12:\n        mov     eax, DWORD PTR [rbp-20]\n        cdqe\n        vmovss  xmm1, DWORD PTR c[0+rax*4]\n        mov     eax, DWORD PTR [rbp-20]\n        cdqe\n        vmovss  xmm2, DWORD PTR a[0+rax*4]\n        mov     eax, DWORD PTR [rbp-20]\n        cdqe\n        vmovss  xmm0, DWORD PTR b[0+rax*4]\n        vmulss  xmm0, xmm2, xmm0\n        vaddss  xmm0, xmm1, xmm0\n        mov     eax, DWORD PTR [rbp-20]\n        cdqe\n        vmovss  DWORD PTR c[0+rax*4], xmm0\n        add     DWORD PTR [rbp-20], 1\n.L11:\n        cmp     DWORD PTR [rbp-20], 99999999\n        jle     .L12\n...\n</code></pre> <p>\u53ef\u77e5\uff0c<code>for</code> \u5faa\u73af\u5185\u90e8\u7684\u4ee3\u7801\u88ab\u987a\u6b21\u6267\u884c\u4e86 <code>MAXN</code> \u6b21\uff0c\u6bcf\u6b21\u53ea\u5bf9 1 \u7ec4\u6570\u636e\uff08 <code>a[i], b[i], c[i]</code> \uff09 \u8fdb\u884c\u64cd\u4f5c\u3002</p> <p>\u5411\u91cf\u5316\u540e\uff0c\u88ab\u5411\u91cf\u5316\u7684\u4ee3\u7801\u90e8\u5206\u7684\u6c47\u7f16\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>...\n        mov     DWORD PTR [rbp-36], 0\n        jmp     .L11\n.L17:\n        mov     eax, DWORD PTR [rbp-36]\n        sal     eax, 3\n        cdqe\n        sal     rax, 2\n        add     rax, OFFSET FLAT:a\n        mov     QWORD PTR [rbp-392], rax\n        mov     rax, QWORD PTR [rbp-392]\n        vmovups ymm0, YMMWORD PTR [rax]\n        vmovaps YMMWORD PTR [rbp-112], ymm0\n        mov     eax, DWORD PTR [rbp-36]\n        sal     eax, 3\n        cdqe\n        sal     rax, 2\n        add     rax, OFFSET FLAT:b\n        mov     QWORD PTR [rbp-384], rax\n        mov     rax, QWORD PTR [rbp-384]\n        vmovups ymm0, YMMWORD PTR [rax]\n        vmovaps YMMWORD PTR [rbp-144], ymm0\n        mov     eax, DWORD PTR [rbp-36]\n        sal     eax, 3\n        cdqe\n        sal     rax, 2\n        add     rax, OFFSET FLAT:c\n        mov     QWORD PTR [rbp-376], rax\n        mov     rax, QWORD PTR [rbp-376]\n        vmovups ymm0, YMMWORD PTR [rax]\n        vmovaps YMMWORD PTR [rbp-176], ymm0\n        vmovaps ymm0, YMMWORD PTR [rbp-112]\n        vmovaps YMMWORD PTR [rbp-336], ymm0\n        vmovaps ymm0, YMMWORD PTR [rbp-144]\n        vmovaps YMMWORD PTR [rbp-368], ymm0\n        vmovaps ymm0, YMMWORD PTR [rbp-336]\n        vmulps  ymm0, ymm0, YMMWORD PTR [rbp-368]\n        vmovaps ymm1, YMMWORD PTR [rbp-176]\n        vmovaps YMMWORD PTR [rbp-272], ymm1\n        vmovaps YMMWORD PTR [rbp-304], ymm0\n        vmovaps ymm0, YMMWORD PTR [rbp-272]\n        vaddps  ymm0, ymm0, YMMWORD PTR [rbp-304]\n        vmovaps YMMWORD PTR [rbp-176], ymm0\n        mov     eax, DWORD PTR [rbp-36]\n        sal     eax, 3\n        cdqe\n        sal     rax, 2\n        add     rax, OFFSET FLAT:c\n        mov     QWORD PTR [rbp-184], rax\n        vmovaps ymm0, YMMWORD PTR [rbp-176]\n        vmovaps YMMWORD PTR [rbp-240], ymm0\n        vmovaps ymm0, YMMWORD PTR [rbp-240]\n        mov     rax, QWORD PTR [rbp-184]\n        vmovups YMMWORD PTR [rax], ymm0\n        nop\n        add     DWORD PTR [rbp-36], 1\n.L11:\n        cmp     DWORD PTR [rbp-36], 12499999\n        jle     .L17\n...\n</code></pre> <p>\u53ef\u77e5\u7a0b\u5e8f\u4f7f\u7528\u4e86 <code>vmoups</code> \u7b49\u6c47\u7f16\u6307\u4ee4\u548c 256 \u4f4d\u5bc4\u5b58\u5668 <code>ymm0, ymm1</code> \uff0c\u540c\u65f6\u5bf9 8 \u7ec4 <code>float</code> \u7c7b\u578b\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\uff0c\u5faa\u73af\u6b21\u6570\u51cf\u5c11\u5230 <code>MAXN / 8</code> \u6b21\u3002</p>"},{"location":"labs/simd/#reference","title":"Reference","text":"<ul> <li>Intel\u00ae Intrinsics Guide\uff1ahttps://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html</li> <li>n\u65b9\u8fc7\u767e\u4e07 \u66b4\u529b\u78be\u6807\u7b97\u2014\u2014\u6307\u4ee4\u96c6\u4f18\u5316\u7684\u57fa\u7840\u4f7f\u7528\uff1ahttps://www.luogu.com.cn/blog/ouuan/avx-optimize</li> <li>\u6c47\u7f16\u8bed\u8a00\u7b14\u8bb0\uff08\u516d\uff09\u2014\u2014SIMD\u6307\u4ee4\uff1ahttps://zhuanlan.zhihu.com/p/424475308</li> </ul>"},{"location":"math/prob_theory/chapter1/","title":"\u4e8b\u4ef6\u53ca\u5176\u6982\u7387","text":""},{"location":"math/prob_theory/chapter1/#_2","title":"\u968f\u673a\u4e8b\u4ef6\u548c\u6982\u7387","text":""},{"location":"math/prob_theory/chapter1/#_3","title":"\u968f\u673a\u73b0\u8c61","text":"<p>\u968f\u673a\u73b0\u8c61\uff1a\u786e\u5b9a\u6027\u73b0\u8c61\u3001\u968f\u673a\u73b0\u8c61\uff08\u4e0d\u786e\u5b9a\u6027\u73b0\u8c61\uff09\u3002</p> <p>\u968f\u673a\u73b0\u8c61\u57fa\u672c\u5c5e\u6027\uff1a - \u53ef\u91cd\u590d\u8fdb\u884c\u6216\u91cd\u590d\u89c2\u5bdf\uff08\u5b9a\u6027\uff09 - \u8bd5\u9a8c\u4e4b\u524d\u4e0d\u77e5\u9053\u4f1a\u51fa\u73b0\u4f55\u79cd\u7ed3\u679c\uff08\u5b9a\u6027\uff09 - \u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u662f\u5df2\u77e5\u7684\uff08\u5b9a\u91cf\uff09</p>"},{"location":"math/prob_theory/chapter1/#_4","title":"\u6837\u672c\u7a7a\u95f4","text":"<p>\u6837\u672c\u7a7a\u95f4\uff1a\u968f\u673a\u73b0\u8c61\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c \\(\\Omega\\).</p> <p>\u6837\u672c\u70b9\uff1a\u6bcf\u4e00\u4e2a\u7ed3\u679c \\(\\omega \\in \\Omega\\).</p>"},{"location":"math/prob_theory/chapter1/#_5","title":"\u4e8b\u4ef6","text":"<p>\u4e8b\u4ef6\uff1a\u5177\u6709\u67d0\u79cd\u5c5e\u6027\u7684\u57fa\u672c\u7ed3\u679c\u6784\u6210\u4e8b\u4ef6\uff0c\u901a\u5e38\u7528 \\(A, B, C\\) \u8868\u793a.</p> <p>\u4e8b\u4ef6\u7684\u53d1\u751f\uff1a\u67d0\u6b21\u8bd5\u9a8c\u7684\u7ed3\u679c \\(\\omega \\in A\\) \u5219 \\(A\\) \u53d1\u751f\uff0c\u5426\u5219\u4e0d\u53d1\u751f.</p>"},{"location":"math/prob_theory/chapter1/#_6","title":"\u6982\u7387","text":"<p>\u6982\u7387\uff1a\u4e8b\u4ef6 \\(A\\) \u53d1\u751f\u7684\u6982\u7387 \\(P(A)\\).</p> <p>\u6982\u7387\u7684\u8ba1\u7b97\uff1a</p> <ul> <li>\u7269\u7406\u65b9\u6cd5</li> <li>\u7edf\u8ba1\u65b9\u6cd5\uff1a\u9891\u7387\u4f30\u8ba1\u6982\u7387.</li> </ul> <p>\u6982\u7387\u7684\u5b9a\u4e49\u548c\u91cf\u5316\uff1a</p> <ul> <li>\u4e3b\u89c2\u6982\u7387\uff1a\u57fa\u4e8e\u5df2\u6709\u77e5\u8bc6\u548c\u4fe1\u606f\u7684\u4e00\u79cd\u4fe1\u4ef0\u6216\u5224\u65ad</li> <li>\u7ecf\u9a8c\u6982\u7387\uff08\u7edf\u8ba1\uff09\uff1a\u901a\u8fc7\u968f\u673a\u6d4b\u8bd5\uff08\u4f8b\uff1a\u629b\u63b7\u786c\u5e01\uff0c\u9891\u7387\u63a8\u7b97\u6982\u7387\uff09</li> <li>\u516c\u7406\u5316\u4f53\u7cfb\uff1a\u4e25\u683c\u903b\u8f91\u63a8\u7406</li> </ul> <p>\u5173\u4e8e\u7edf\u8ba1\u65b9\u6cd5</p> <ul> <li>\u7edf\u8ba1\u65b9\u6cd5\u5177\u4f53\u3001\u53ef\u8ba1\u7b97</li> <li>\u7edf\u8ba1\u65b9\u6cd5\u7684\u57fa\u672c\u51fa\u53d1\u70b9\uff1a\u9891\u7387\u6781\u9650\u5b58\u5728\u4e14\u4e0d\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u8bd5\u9a8c\u73af\u5883</li> <li>\u9891\u7387\u7684\u6781\u9650\u662f\u6982\u7387\uff1aBernoulli \u548c Borel \u6570\u5b66\u8bc1\u660e</li> </ul> <p>\u6982\u7387\u8bba\u4e3b\u8981\u76ee\u7684\uff1a\u8ba1\u7b97\u968f\u673a\u4e8b\u4ef6\u7684\u6982\u7387.</p> <p>\u4e8b\u4ef6\u7684\u8fd0\u7b97</p> <p>\u548c\u96c6\u5408\u8fd0\u7b97\u7c7b\u4f3c\uff0c\u6ce8\u610f\u672f\u8bed\u4f7f\u7528\u3002</p> <ul> <li>\\(\\emptyset\\) \uff0c\u4e0d\u53ef\u80fd\u4e8b\u4ef6.</li> <li>\\(\\Omega\\) \uff0c\u5fc5\u7136\u4e8b\u4ef6.</li> <li>\\(A \\subseteq B\\) \uff0c\\(A\\) \u53d1\u751f\u5219 \\(B\\) \u4e00\u5b9a\u53d1\u751f.</li> <li>\\(A \\cap B \\ \\text{or} \\ AB\\) \uff0c\\(A\\) \u548c \\(B\\) \u540c\u65f6\u53d1\u751f.</li> <li>\\(A \\cup B\\) \uff0c\\(A\\) \u6216\u8005 \\(B\\) \u53d1\u751f.</li> <li>\\(\\bar A\\) \uff0c\\(A\\) \u7684\u5bf9\u7acb\u4e8b\u4ef6.</li> <li>\\(A \\setminus B\\) \uff0c\\(A\\) \u53d1\u751f\u4f46 \\(B\\) \u4e0d\u53d1\u751f.</li> <li>\\(A \\cap B = \\emptyset\\) \uff0c\\(A, B\\) \u4e92\u4e0d\u76f8\u4ea4\uff0c\u5199\u4f5c \\(A \\cup B = A + B\\).</li> <li>\\(\\text{De Morgan}\\) \u5bf9\u5076\u8fd0\u7b97\u539f\u7406\uff1a\\(\\overline{(\\cap A_n)} = \\cup \\bar A_n, \\overline{(\\cup A_n)} = \\cap\\bar A_n\\).</li> </ul>"},{"location":"math/prob_theory/chapter1/#_7","title":"\u6982\u7387\u8fd0\u7b97\u7684\u57fa\u672c\u6027\u8d28","text":"<ul> <li>\\(P(\\emptyset) = 0, P(\\Omega) = 1\\)</li> <li>\\(P(\\bar A) = 1 - P(A)\\)</li> <li>\\(A \\cap B = \\emptyset\\)\uff0c\u5219</li> </ul> \\[ P(A + B) = P(A) + P(B) \\] <ul> <li>\u82e5 \\(A_1, \\cdots, A_m\\) \u4e92\u4e0d\u76f8\u4ea4\uff0c\u5219</li> </ul> \\[ P(\\sum_{k=1}^{m}A_k) = \\sum_{k=1}^{m}P(A_k) \\]"},{"location":"math/prob_theory/chapter1/#_8","title":"\u57fa\u672c\u6982\u7387\u6a21\u578b","text":"<p>\u6982\u7387\u6a21\u578b\uff1a\u968f\u673a\u73b0\u8c61\u7684\u6570\u5b66\u63cf\u8ff0\uff0c\u5305\u62ec\u6837\u672c\u7a7a\u95f4\u3001\u4e8b\u4ef6\u3001\u6bcf\u4e2a\u4e8b\u4ef6\u7684\u6982\u7387\u5927\u5c0f\u3002</p>"},{"location":"math/prob_theory/chapter1/#_9","title":"\u53e4\u5178\u6982\u7387\u6a21\u578b","text":"<p>\u6a21\u578b\u7279\u5f81\uff1a</p> <ul> <li>\u6709\u9650\u4e2a\u57fa\u672c\u7ed3\u679c</li> <li>\u6bcf\u4e2a\u7ed3\u679c\u7b49\u53ef\u80fd\u53d1\u751f</li> </ul> <p>\u6570\u5b66\u63cf\u8ff0\uff1a</p> \\[ \\begin{align}     \\Omega = \\{\\omega_1, \\dots, \\omega_N\\}, \\quad N &lt; \\infty \\\\     P(\\{\\omega_i\\}) = \\frac{1}{N}, \\quad i = 1, 2, \\dots, N \\end{align} \\] <p>\u4e8b\u4ef6 A \u7684\u6982\u7387\uff1a \\(P(A) = \\displaystyle\\frac{|A|}{N}\\) \uff0c\u5176\u4e2d \\(|A|\\) \u4e3a\u4e8b\u4ef6\u5305\u542b\u57fa\u672c\u7ed3\u679c\u6570\u3002</p> <p>\u5bf9\u4e8e\u53e4\u5178\u6982\u7387\u6a21\u578b\uff0c\u5173\u952e\u5728\u4e8e\u8ba1\u7b97 \\(N\\) \u548c \\(|A|\\) \u3002</p> <p>\u8ba1\u7b97\u6280\u5de7</p> <ul> <li>\u4e58\u6cd5\u539f\u7406</li> <li>\u6392\u5217\u7ec4\u5408</li> </ul> <p>\u5e38\u7528\u5173\u7cfb\u5f0f\uff1a</p> \\[ \\begin{array}{ccc}     \\displaystyle P_{N}^{k} = N(N-1)\\dots (N-k+1) = \\frac{N!}{k!} \\\\     \\displaystyle {N \\choose k} = \\frac{P_N^k}{k!} \\\\     \\displaystyle {N \\choose k} + {N \\choose k-1} = {N+1 \\choose k} \\\\     \\displaystyle N! \\sim \\sqrt{2\\pi N} e^{-N} N^N, \\quad N \\rightarrow \\infty \\end{array} \\]"},{"location":"math/prob_theory/chapter1/#_10","title":"\u51e0\u4f55\u6982\u7387\u6a21\u578b","text":"<p>\u6a21\u578b\u7279\u5f81\uff1a\u6837\u672c\u7a7a\u95f4\u662f\u4e00\u4e2a\u533a\u57df\uff0c\u6240\u6709\u57fa\u672c\u7ed3\u679c\u7b49\u53ef\u80fd\u53d1\u751f\u3002</p> <ul> <li>\u57fa\u672c\u7ed3\u679c\u4e0d\u53ef\u6570\uff0c\u4e14 \\(\\Omega\\) \u662f \\(\\mathbb{R}, \\mathbb{R}^2, \\dots, \\mathbb{R}^k\\) \u4e0a\u7684\u53ef\u6d4b\u533a\u57df</li> <li>\u4e8b\u4ef6 \\(A\\) \u662f \\(\\Omega\\) \u7684\u53ef\u6d4b\u5b50\u96c6</li> <li>\u4e8b\u4ef6 \\(A\\) \u7684\u6982\u7387 \\(\\displaystyle P(A) = \\frac{|A|}{|\\Omega|}\\)</li> </ul> <p>\u5173\u952e\u5728\u4e8e\u8ba1\u7b97 \\(|A|, |\\Omega|\\)</p> Buffon's Needle Problem <p>\u82e5\u4e00\u6839\u957f\u5ea6\u4e3a \\(l\\) \u7684\u77ed\u9488\uff0c\u629b\u5728\u6a2a\u7ebf\u95f4\u95f4\u8ddd\u4e3a \\(d\\) \u7684\u5747\u5300\u6a2a\u7eb9\u7eb8\u4e0a\uff0c\u6c42\u9488\u843d\u5728\u4e00\u4e2a\u4e0e\u67d0\u6761\u6a2a\u7ebf\u76f8\u4ea4\u7684\u4f4d\u7f6e\u7684\u6982\u7387\u3002\u5047\u8bbe \\(l \\leq d\\) \u3002</p> <p>\u8bb0\u9488\u7684\u4e2d\u5fc3\u8ddd\u79bb\u6700\u8fd1\u7684\u5e73\u884c\u7ebf\u7684\u8ddd\u79bb\u4e3a \\(a &lt; d/2\\) \uff0c\u9488\u4e0e\u5e73\u884c\u7ebf\u7684\u5939\u89d2\u4e3a \\(\\theta \\leq \\pi /2\\) \u3002</p> <p>\u5219\u6837\u672c\u7a7a\u95f4 \\(\\Omega = [0, d / 2] \\times [0, \\pi / 2]\\)</p> <p>\u8bb0\u4e8b\u4ef6 \\(A\\) \u4e3a\u9488\u843d\u5728\u4e00\u4e2a\u4e0e\u67d0\u6761\u6a2a\u7ebf\u76f8\u4ea4\u7684\u4f4d\u7f6e\uff0c\u5219</p> \\[ A \\ \\text{\u53d1\u751f} \\iff a \\leq \\frac{l}{2}\\sin\\theta \\] \\[ \\begin{align}     P(A) &amp;= \\frac{|A|}{|\\Omega|} \\\\          &amp;= \\frac{\\int_{0}^{\\pi / 2}\\frac{l}{2} \\sin\\theta \\text{d}\\theta}{\\frac{d}{2}\\frac{\\pi}{2}} \\\\          &amp;= \\frac{2l}{\\pi d} \\end{align} \\]"},{"location":"math/prob_theory/chapter1/#_11","title":"\u5176\u4ed6\u6982\u7387\u6a21\u578b","text":"<p>\u4f8b\uff1a</p> <ul> <li>\u629b\u63b7\u4e0d\u5747\u5300\u786c\u5e01</li> <li>\u5f69\u7968</li> </ul>"},{"location":"math/prob_theory/chapter1/#_12","title":"\u6982\u7387\u7a7a\u95f4\u516c\u7406\u5316\u4f53\u7cfb","text":"<p>\u63cf\u8ff0\u6982\u7387\u7a7a\u95f4\u7684\u4e09\u8981\u7d20\uff1a</p> <ul> <li>\u6837\u672c\u7a7a\u95f4 \\(\\Omega\\)</li> <li>\u4e8b\u4ef6\u7c7b \\(\\sigma\\) -\u57df \\(\\mathcal{A}\\)</li> <li>\u6982\u7387 \\(P\\)</li> </ul> <p>\\((\\Omega, \\mathcal{A}, P)\\) \u6784\u6210\u6982\u7387\u7a7a\u95f4\uff0c\u662f\u968f\u673a\u73b0\u8c61\u7684\u6570\u5b66\u63cf\u8ff0\uff08\u6982\u7387\u6a21\u578b\uff09\uff0c\u5176\u4e2d\uff1a</p> <ul> <li>\\(\\mathcal{A}\\) \u6ee1\u8db3<ul> <li>\\(\\emptyset, \\Omega \\in \\mathcal{A}\\)</li> <li>\\(A \\in \\mathcal{A} \\rightarrow \\bar A \\in \\mathcal{A}\\)</li> <li>\\(A_n \\in \\mathcal{A}, n \\geq 1 \\rightarrow \\bigcup_{n=1}^{\\infty}A_n \\in \\mathcal{A}\\)</li> </ul> </li> <li>\\(P\\) \u6ee1\u8db3<ul> <li>\\(P(\\emptyset) = 0, P(\\Omega) = 1\\)</li> <li>\\(\\forall A \\in \\mathcal{A}, P(A) \\geq 0\\)</li> <li> <p>\\(A_n \\in \\mathcal{A}\\) \u4e92\u4e0d\u76f8\u4ea4\uff0c\u5219</p> \\[ P(\\sum_{n=1}^{\\infty}A_n) = \\sum_{n=1}^{\\infty}P(A_n) \\] </li> </ul> </li> </ul> \u4efb\u4f55\u6ee1\u8db3\u4e0a\u8ff0\u6027\u8d28\u7684 \\(P\\) \u90fd\u79f0\u4e3a\u7a7a\u95f4 \\((\\Omega, \\mathcal{A})\\) \u4e0a\u7684\u6982\u7387\u3002 <p>\u6982\u7387 \\(P\\) \u7684\u8fd0\u7b97\u6027\u8d28</p> <ul> <li>\u5355\u8c03\u6027\uff1a \\(A \\subseteq B\\) \uff0c\u5219 \\(P(A) \\leq P(B)\\)</li> <li>\\(P(\\bar A) = 1 - P(A)\\)</li> <li> <p>\u5bf9\u4efb\u610f \\(A_N \\in \\mathcal{A}, n \\geq 1\\),</p> \\[ P(\\bigcup_{n=1}^{\\infty}A_n) \\leq \\sum_{n=1}^{\\infty}P(A_n) \\] </li> <li> <p>\\(A, B \\in \\mathcal{A}\\) \uff0c\u5219\uff08\u5bb9\u65a5\u539f\u7406\uff09</p> \\[ P(A\\cup B) = P(A) + P(B) - P(AB) \\] </li> </ul>"},{"location":"math/prob_theory/chapter1/#_13","title":"\u6761\u4ef6\u6982\u7387","text":"<p>\u5047\u8bbe \\((\\Omega, \\mathcal{A}, P)\\) \u662f\u4e00\u4e2a\u6982\u7387\u7a7a\u95f4\uff0c \\(A, B\\) \u662f\u4e24\u4e2a\u4e8b\u4ef6\uff0c \\(P(B)&gt;0\\) \u3002\u4ee4</p> \\[ P(A|B) = \\frac{P(AB)}{P(B)} \\] <p>\u4e3a\u5728 \\(B\\) \u53d1\u751f\u7684\u6761\u4ef6\u4e0b\uff0c \\(A\\) \u53d1\u751f\u7684\u6761\u4ef6\u6982\u7387\u3002</p> <p>\\(P(B)&gt;0\\)</p> <ul> <li>\u5206\u6bcd\u4e0d\u80fd\u4e3a \\(0\\)</li> <li>\u96f6\u6982\u7387\u4e8b\u4ef6\u65e0\u6cd5\u89c2\u5bdf\u5230</li> </ul> <p>\u539f\u516c\u5f0f\u53ef\u4ee5\u6539\u5199\u6210\u4e58\u6cd5\u516c\u5f0f</p> \\[ P(AB) = P(A|B)P(B) \\] <p>\u63a8\u5e7f\u5230\u591a\u4e2a\u4e8b\u4ef6\uff1a\u94fe\u5f0f\u6cd5\u5219</p> \\[ \\begin{align}     P(ABC) &amp;= P(A|BC)P(BC) \\\\            &amp;= P(A|BC)P(B|C)P(C) \\end{align} \\] Example <p>\\(n\\) \u5f20\u5f69\u7968\u6709\u4e00\u5f20\u4e2d\u5956\u5f69\u7968\uff0c\u6c42\u7b2c \\(k\\) \u4e2a\u4eba\u4e2d\u5956\u7684\u6982\u7387\u3002</p> <p>\u4ee4 \\(A_i\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a\u4eba\u4e2d\u5956</p> \\[ \\begin{align} P(A_k \\bar A_1 \\dots \\bar A_{k-1}) &amp;= P(\\bar A_1)P(\\bar A_2|\\bar A_1)\\dots P(A_k|\\bar A_1 \\dots \\bar A_{k-1}) \\\\ &amp;= \\frac{n-1}{n} \\cdot \\frac{n-2}{n-1} \\cdot \\dots \\cdot \\frac{1}{n - k + 1} \\\\ &amp;= \\frac{1}{n} \\end{align} \\]"},{"location":"math/prob_theory/chapter1/#_14","title":"\u5168\u6982\u7387\u516c\u5f0f","text":"<p>\u5047\u8bbe \\((\\Omega, \\mathcal{A}, P)\\) \u662f\u4e00\u4e2a\u6982\u7387\u7a7a\u95f4\uff0c \\(B_k, 1\\leq k \\leq N\\) \u662f \\(N\\) \u4e2a\u4e92\u4e0d\u76f8\u4ea4\u4e8b\u4ef6\uff0c\u4e14 \\(\\Omega = \\sum_{k=1}^NB_k\\) \u5219</p> \\[ P(A) = \\sum_{k=1}^N P(A|B_k)P(B_k), \\quad N \\leq \\infty \\]"},{"location":"math/prob_theory/chapter1/#_15","title":"\u8d1d\u53f6\u65af\u516c\u5f0f","text":"<p>\u5047\u8bbe \\((\\Omega, \\mathcal{A}, P)\\) \u662f\u4e00\u4e2a\u6982\u7387\u7a7a\u95f4\uff0c \\(B_k, 1\\leq k \\leq N\\) \u662f \\(N\\) \u4e2a\u4e92\u4e0d\u76f8\u4ea4\u4e8b\u4ef6\uff0c\u4e14 \\(\\Omega = \\sum_{k=1}^NB_k\\) \u5219</p> \\[ P(B_k|A) = \\frac{P(A|B_k)P(B_k)}{\\sum_{i=1}^{N}P(A|B_i)P(B_i)} = \\frac{P(A|B_k)P(B_k)}{P(A)} \\] <p>\\(P(B_k)\\) \u4e3a\u5148\u9a8c\u6982\u7387\uff0c \\(P(B_k|A)\\) \u4e3a\u540e\u9a8c\u6982\u7387</p>"},{"location":"math/prob_theory/chapter1/#_16","title":"\u72ec\u7acb\u6027","text":""},{"location":"math/prob_theory/chapter1/#_17","title":"\u4e24\u4e2a\u4e8b\u4ef6\u72ec\u7acb","text":"<p>\u5047\u8bbe \\((\\Omega, \\mathcal{A}, P)\\) \u662f\u4e00\u4e2a\u6982\u7387\u7a7a\u95f4\uff0c\\(A, B\\) \u662f\u4e24\u4e2a\u4e8b\u4ef6\u3002\u5982\u679c \\(P(B)&gt;0\\)\uff0c\u5e76\u4e14</p> \\[ P(A|B)=P(A) \\] <p>\u5219 \\(A\\) \u548c \\(B\\) \u72ec\u7acb\u3002\u5219\u7531\u6761\u4ef6\u6982\u7387\u5b9a\u4e49\uff0c\u4e0a\u5f0f\u53ef\u5199\u6210</p> \\[ P(AB) = P(A)P(B) \\] <p>Note</p> <ul> <li>\\(P(B)=0\\) \u65f6\u4e58\u79ef\u516c\u5f0f\u4ecd\u6709\u610f\u4e49\u3002</li> <li>\\(A, B\\) \u5173\u7cfb\u5bf9\u7b49\u3002</li> <li>\u82e5 \\(A, B\\) \u72ec\u7acb\uff0c\u5219 \\(A, \\bar B\\) \u72ec\u7acb\uff0c \\(\\bar A, B\\) \u72ec\u7acb\uff0c \\(\\bar A, \\bar B\\) \u72ec\u7acb</li> <li> <p>\u4e0e\u52a0\u6cd5\uff08\u5e76\uff09\u7684\u533a\u522b\uff1a</p> \\[ \\begin{align}     P(A+B) &amp;= P(A) + P(B) \\qquad &amp;&amp;A \\cap B = \\emptyset \\\\     P(AB) &amp;= P(A)P(B) \\qquad &amp;&amp;A, B \\text{\u72ec\u7acb} \\end{align} \\] </li> </ul>"},{"location":"math/prob_theory/chapter1/#_18","title":"\u4e09\u4e2a\u4e8b\u4ef6\u72ec\u7acb","text":"<p>\u82e5 \\(A, B, C\\) \u662f\u4e09\u4e2a\u4e8b\u4ef6\uff0c\u82e5 \\(A, B, C\\) \u4e24\u4e24\u76f8\u4e92\u72ec\u7acb \u4e14</p> \\[ P(ABC) = P(A)P(B)P(C) \\] <p>\u5219\u79f0 \\(A,B,C\\) \u76f8\u4e92\u72ec\u7acb\u3002</p> <p>Warning</p> <p>\u4e24\u4e24\u72ec\u7acb\u4e0d\u4e00\u5b9a\u76f8\u4e92\u72ec\u7acb\uff0c\u76f8\u4e92\u72ec\u7acb\u4e00\u5b9a\u4e24\u4e24\u72ec\u7acb\u3002</p> <p>Example</p> <p>\u4e00\u4e2a\u6b63\u56db\u9762\u4f53\u7684\u4e09\u9762\u5206\u522b\u6d82\u6210\u7ea2\u3001\u9ed1\u3001\u767d\u4e09\u8272\uff0c\u53e6\u4e00\u9762\u6d82\u4e0a\u4e09\u79cd\u989c\u8272\u3002\u73b0\u968f\u673a\u4e00\u6254\uff0c\u8bb0\u5e95\u9762\u6d82\u6709\u7ea2\u3001\u9ed1\u3001\u767d\u5206\u522b\u4e3a\u4e8b\u4ef6 \\(A,B,C\\)\u3002</p> <p>\u53ef\u5f97</p> \\[ P(A) = P(B) = P(C) = \\frac{1}{2} \\] <p>\u4e14</p> \\[ \\begin{align} P(AB) = \\frac{1}{4} = P(A)P(B) \\\\ P(AC) = \\frac{1}{4} = P(A)P(C) \\\\ P(BC) = \\frac{1}{4} = P(B)P(C) \\end{align} \\] <p>\u5219 \\(A,B,C\\) \u4e24\u4e24\u72ec\u7acb\u3002\u4f46</p> \\[ P(ABC) = \\frac{1}{4} \\not = P(A)P(B)P(C) \\] <p>\u6545 \\(A,B,C\\) \u4e0d\u76f8\u4e92\u72ec\u7acb\u3002\u539f\u56e0\u5728\u4e8e\u82e5 \\(AB\\) \u53d1\u751f\uff0c\u5219 \\(C\\) \u4e00\u5b9a\u53d1\u751f\uff0c\u5931\u53bb\u4e86\u72ec\u7acb\u6027\u3002</p> <p>Note</p> <p>\u82e5 \\(A,B,C\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u5219 \\(\\bar A,B,C\\) \u76f8\u4e92\u72ec\u7acb\uff0c\\(A+B, C\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u7b49\u7b49\u7c7b\u4f3c\u5173\u7cfb\u6210\u7acb\u3002</p>"},{"location":"math/prob_theory/chapter1/#m","title":"m \u4e2a\u4e8b\u4ef6\u76f8\u4e92\u72ec\u7acb","text":"<p>\u5047\u8bbe \\(A_k, 1\\leq k\\leq m\\) \u662f \\(m\\) \u4e2a\u4e8b\u4ef6\uff0c\u82e5 \\(A_k\\) \u4e2d\u4efb\u610f \\(r &lt; m\\) \u4e2a\u90fd\u76f8\u4e92\u72ec\u7acb\uff0c\u4e14</p> \\[ P(\\bigcap_{1\\leq k\\leq m}A_k) = \\prod_{1\\leq k\\leq m}P(A_k) \\] <p>\u5219 \\(A_k, 1\\leq k\\leq m\\) \u76f8\u4e92\u72ec\u7acb\u3002</p>"},{"location":"math/prob_theory/chapter1/#_19","title":"\u4e8c\u9879\u8bd5\u9a8c","text":"<p>\u53c8\u79f0 n-\u91cd Bernonlli \u8bd5\u9a8c\u3002</p> <ul> <li>\u8bd5\u9a8c \\(E\\) \u5305\u542b\u82e5\u5e72\u4e2a\u57fa\u672c\u7ed3\u679c\u3002</li> <li>\u4e8b\u4ef6 \\(A\\) \u4e3a\u5177\u6709\u67d0\u79cd\u5c5e\u6027\u7684\u57fa\u672c\u7ed3\u679c\u96c6\u5408\uff0c\u53d1\u751f\u7684\u6982\u7387\u4e3a \\(P(A) = p_A\\)</li> </ul> <p>\u72ec\u7acb\u91cd\u590d\u8fdb\u884c \\(n\\) \u6b21\u8bd5\u9a8c\uff0c\u5e76\u89c2\u5bdf\u8bb0\u5f55\u7ed3\u679c\u3002\u5224\u65ad \\(A\\) \u53d1\u751f\u4e0e\u5426\uff0c\u7edf\u8ba1 \\(A\\) \u53d1\u751f\u7684\u6b21\u6570 \\(n_A\\).</p> <p>\u6982\u7387\u6a21\u578b</p> <p>\u6bcf\u6b21\u8bd5\u9a8c \\(A\\) \u53d1\u751f\u8bb0\u4e3a \\(1\\)\uff0c\u4e0d\u53d1\u751f\u8bb0\u4e3a \\(0\\)\u3002</p> <p>\u72ec\u7acb\u91cd\u590d \\(n\\) \u6b21\u8bd5\u9a8c\uff0c\u6240\u5f97\u7ed3\u679c\u4e3a</p> \\[ \\omega = (\\omega _1, \\dots, \\omega _n) \\qquad \\omega_i =0, 1 \\] <p>\u7528 \\(\\Omega_n\\) \u8868\u793a\u6240\u6709 \\(\\omega\\) \u7684\u5168\u4f53</p> \\[ \\Omega_n = \\{\\omega = (\\omega _1, \\dots, \\omega _n), \\omega_i =0, 1\\} \\] <p>\u5176\u4e2d\u6bcf\u4e2a \\(\\omega\\) \u51fa\u73b0\u7684\u6982\u7387\u4e3a</p> \\[ P_n(\\{\\omega\\}) = p_A^{\\sum \\omega_i}(1 - p_A)^{n - \\sum \\omega_i} \\] <p>\u7531\u6b64\u5f97\u5230\u6982\u7387\u7a7a\u95f4 \\((\\Omega_n, P_n)\\)\uff0c\u5373\u4e3a n-\u91cd Bernonlli \u8bd5\u9a8c\u7684\u6982\u7387\u6a21\u578b\u3002</p> <p>\u8003\u8651\u4e8b\u4ef6 \\(B = \\{\\omega: n_A(\\omega) = k\\}\\)\uff0c\u5219</p> \\[ P_n(B) = {n \\choose k}p_A^k(1 - p_A)^{n - k} \\]"},{"location":"math/prob_theory/chapter1/#_20","title":"\u4e58\u79ef\u6982\u7387\u7a7a\u95f4","text":"<p>\u8003\u8651\u4e24\u4e2a\u8bd5\u9a8c \\(E_1, E_2\\)\uff0c\u5176\u6982\u7387\u7a7a\u95f4\u5206\u522b\u4e3a \\((\\Omega_1, P_1), (\\Omega_2, P_2)\\)</p> <p>\u73b0\u540c\u65f6\u72ec\u7acb\u505a\u4e24\u4e2a\u8bd5\u9a8c\uff0c\u8bb0\u5f55\u5176\u57fa\u672c\u7ed3\u679c \\(\\omega = (\\omega_1, \\omega_2)\\)</p> <p>\u8003\u8651 \\(E_1, E_2\\) \u6240\u6709\u57fa\u672c\u7ed3\u679c\u7684\u5168\u4f53</p> \\[ \\Omega = \\{\\omega = (\\omega_1, \\omega_2), \\quad \\omega_1 \\in \\Omega_1, \\omega_2 \\in \\Omega_2\\} \\] <p>\u8003\u8651\u4e8b\u4ef6</p> \\[ A = A_1 \\times A_2 = \\{\\omega = (\\omega_1, \\omega_2), \\quad \\omega_1 \\in A_1, \\omega_2 \\in A_2\\} \\] <p>\u5b9a\u4e49\u5176\u6982\u7387</p> \\[ P(A) = P(A_1)P(A_2) \\] <p>\u5f97\u5230\u65b0\u7684\u6982\u7387\u7a7a\u95f4\uff1a\u4e58\u79ef\u6982\u7387\u7a7a\u95f4 \\((\\Omega, P)\\)</p>"},{"location":"math/prob_theory/chapter1/#_21","title":"\u8865\u5145\u8bf4\u660e","text":""},{"location":"math/prob_theory/chapter1/#_22","title":"\u6982\u7387\u7684\u53ef\u52a0\u6027","text":"<p>\u5982\u679c \\(A_n, n \\geq 1\\) \u4e92\u4e0d\u76f8\u4ea4\uff0c\u5219</p> \\[ P(\\sum_{n = 1}^\\infty A_n) = \\sum_{n = 1}^\\infty P(A_n) \\]"},{"location":"math/prob_theory/chapter1/#_23","title":"\u6982\u7387\u7684\u8fde\u7eed\u6027","text":"<p>\u4e8b\u4ef6\u7684\u6781\u9650</p> <ul> <li> <p>\u5047\u8bbe \\(A_n\\) \u662f\u4e00\u5217\u589e\u52a0\u4e8b\u4ef6</p> \\[ A_1 \\subseteq \\dots \\subseteq A_n \\subseteq \\dots \\] <p>\u5b9a\u4e49</p> \\[ \\lim_{n \\to \\infty} A_n = \\bigcup_{n=1}^\\infty A_n \\] </li> <li> <p>\u5047\u8bbe \\(A_n\\) \u662f\u4e00\u5217\u9012\u51cf\u4e8b\u4ef6</p> \\[ A_1 \\supseteq \\dots \\supseteq A_n \\supseteq \\dots \\] <p>\u5b9a\u4e49</p> \\[ \\lim_{n \\to \\infty} A_n = \\bigcap_{n=1}^\\infty A_n \\] </li> </ul> <p>\u5047\u8bbe \\(A_n\\) \u662f\u4e00\u5217\u589e\u52a0\u4e8b\u4ef6\uff0c\u5219</p> \\[ P(\\lim_{n\\to \\infty} A_n) = \\lim_{n\\to \\infty}P(A_n) \\] <p>Proof</p> <p>\u8bb0 \\(B_1 = A_1, B_k = A_k - A_{k - 1}\\) \uff0c\u5219 \\(B_k\\) \u4e92\u4e0d\u76f8\u4ea4\uff0c\u5219</p> \\[ \\begin{align} P(\\lim_{n\\to\\infty}A_n) &amp;= P(\\sum_{n=1}^\\infty B_n) \\\\                         &amp;= \\sum_{n=1}^\\infty P(B_n) \\\\                         &amp;= \\sum_{n=1}^\\infty P(A_n) - P(A_{n - 1}) \\\\                         &amp;= \\lim_{n\\to\\infty} P(A_n) \\end{align} \\]"},{"location":"math/prob_theory/chapter1/#_24","title":"\u6761\u4ef6\u6982\u7387\u5177\u6709\u6982\u7387\u7684\u8fd0\u7b97\u6027\u8d28","text":"<p>\u5047\u8bbe \\((\\Omega, \\mathcal{A}, P)\\) \u662f\u6982\u7387\u7a7a\u95f4\uff0c \\(B\\) \u662f\u4e00\u4e2a\u4e8b\u4ef6\uff0c \\(P(B)&gt;0\\)</p> <p>\u5bf9\u4e8e\u4efb\u610f\u4e8b\u4ef6 \\(A \\in \\mathcal{A}\\) \uff0c\u6761\u4ef6\u6982\u7387 \\(P(A|B) = \\frac{P(AB)}{P(B)}\\)</p> <p>\u5c06</p> \\[ P(\\cdot | B) : \\mathcal{A} \\mapsto [0, 1] \\] <p>\u89c6\u4f5c\u4e00\u4e2a\u6982\u7387\u3002</p> <p>\u5219\u6709</p> \\[ \\begin{align} P(A_1+A_2|B) = P(A_1|B) + P(A_2|B) \\\\ P(A_1-A_2|B) = P(A_1|B) - P(A_2|B) \\end{align} \\] <p>\u7b49\u7b49\u7c7b\u4f3c\u6027\u8d28\u3002</p>"},{"location":"math/prob_theory/chapter2/","title":"\u968f\u673a\u53d8\u91cf\u4e0e\u5206\u5e03\u51fd\u6570","text":""},{"location":"math/prob_theory/chapter2/#_2","title":"\u968f\u673a\u53d8\u91cf\u4e0e\u5206\u5e03\u51fd\u6570","text":"<p>\u968f\u673a\u53d8\u91cf\u662f\u5b9a\u4e49\u5728\u6982\u7387\u7a7a\u95f4\u4e0a\u53d6\u5b9e\u6570\u503c\u7684\u53ef\u6d4b\u51fd\u6570</p> <p>\u968f\u673a\u53d8\u91cf</p> <ul> <li>\u63b7\u9ab0\u5b50\u51fa\u73b0\u7684\u70b9\u6570</li> <li>\u6d4b\u91cf\u706f\u6ce1\u7684\u5bff\u547d</li> <li>\u6d4b\u91cf\u7269\u4f53\u7684\u957f\u5ea6</li> </ul>"},{"location":"math/prob_theory/chapter2/#_3","title":"\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u4e0e\u5206\u5e03\u5217","text":"<p>\u53d6\u6709\u9650\u4e2a\u6216\u8005\u53ef\u5217\u4e2a\u503c\u7684\u968f\u673a\u53d8\u91cf</p> <p>\u5047\u8bbe \\((\\Omega, \\mathcal{A}, P)\\) \u662f\u6982\u7387\u7a7a\u95f4\uff0c\u5b9a\u4e49 \\(X:\\Omega \\mapsto \\mathbb{R}\\) .</p> <p>\u53d6\u503c \\(x_1, \\cdots, x_N, N\\leq\\infty\\)</p> <p>\u53d6\u6bcf\u4e2a\u503c\u7684\u6982\u7387\u5927\u5c0f</p> \\[ P(X=x_i)=p_i, \\quad i = 1, 2, \\cdots, N \\] <p>\u5206\u5e03\u5217\uff1a</p> \\[ X \\sim \\begin{pmatrix} x_1 &amp; x_2 &amp; \\cdots &amp; x_i &amp; \\cdots &amp; x_N\\\\ p_1 &amp; p_2 &amp; \\cdots &amp; p_i &amp; \\cdots &amp; p_N \\end{pmatrix} \\] <p>Note</p> <ul> <li> <p>\\(p_i\\)</p> \\[ p_i &gt; 0, \\sum_{i=1}^N p_i = 1 \\] </li> <li> <p>\u5bf9\u4e8e\u4efb\u610f Borel \u96c6 \\(B\\) \uff0c</p> \\[ P(X\\in B) = \\sum_{i:x_i\\in B}p_i \\] <p>\u7279\u522b\uff0c</p> \\[ \\begin{align}     P(X \\leq x) &amp;= \\sum_{i:x_i \\leq x}p_i \\\\     P(X &gt; x) &amp;= \\sum_{i:x_i &gt; x}p_i \\\\     P(a &lt; X \\leq b) &amp;= \\sum_{i:a&lt; x_i \\leq b}p_i \\end{align} \\] </li> </ul>"},{"location":"math/prob_theory/chapter2/#_4","title":"\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u7684\u5178\u578b\u4f8b\u5b50","text":"<p>\u9000\u5316\u5206\u5e03</p> \\[ X \\sim \\begin{pmatrix}     c \\\\     1 \\end{pmatrix} \\] <p>\u5e38\u6570\u53ef\u4ee5\u770b\u4f5c\u9000\u5316\u968f\u673a\u53d8\u91cf</p> <p>\u4e24\u70b9\u5206\u5e03</p> \\[ X \\sim \\begin{pmatrix}     1 &amp; 0\\\\     p &amp; 1 - p \\end{pmatrix} \\quad 0&lt;p&lt;1 \\] <p>\u9002\u7528\u4e8e\u63cf\u8ff0\u201c\u6b63\u9762\u3001\u53cd\u9762\u201d\u3001\u201c\u6210\u529f\u3001\u5931\u8d25\u201d\u7b49\u968f\u673a\u73b0\u8c61</p> <p>\u4e8c\u9879\u5206\u5e03</p> \\[ X \\sim \\begin{pmatrix}     0 &amp; 1 &amp; \\cdots &amp; k &amp; \\cdots &amp; n\\\\     (1-p)^n &amp; np(1-p)^{n-1} &amp; \\cdots &amp; {n \\choose k}p^k(1-p)^{n-k} &amp; \\cdots &amp; p^n \\end{pmatrix} \\quad 0&lt;p&lt;1 \\] <p>\u7b80\u8bb0 \\(X \\sim B(n, p)\\)</p> <ul> <li>\u4e8c\u9879\u5206\u5e03\u9002\u7528\u4e8e n \u91cd Bernoulli \u8bd5\u9a8c</li> <li> <p>\u4e8c\u9879\u5c55\u5f00\u7cfb\u6570</p> \\[ (p+q)^n = \\sum_{k = 0}^n{n \\choose k}p^kq^{n-k} \\] </li> <li> <p>\\(X\\) \u6700\u53ef\u80fd\u7684\u503c</p> \\[ \\begin{align} \\frac{p_k}{p_{k+1}} =&amp; \\frac{{n \\choose k}p^k(1-p)^{n-k}}{{n \\choose k + 1}p^{k+1}(1-p)^{n-k-1}} \\\\ =&amp; \\frac{(k+1)(1-p)}{(n-k)p} \\\\ &amp;\\begin{cases}     &lt;1, &amp;\\quad k+1 &lt; (n + 1)p \\\\     &gt;1, &amp;\\quad k+1 &gt; (n + 1)p \\end{cases} \\end{align} \\] </li> </ul> <p>Poisson \u5206\u5e03</p> \\[ X \\sim \\begin{pmatrix}     0 &amp; 1 &amp; \\cdots &amp; k &amp; \\cdots\\\\     e^{-\\lambda} &amp; \\lambda e^{-\\lambda} &amp; \\cdots &amp; \\frac{\\lambda^k}{k!}e^{-\\lambda} &amp; \\cdots \\end{pmatrix} \\quad \\lambda &gt; 0 \\] <p>\u7b80\u8bb0 \\(X \\sim \\mathcal{P}(\\lambda)\\)</p> <p>\\(X\\) \u53d6\u975e\u8d1f\u6574\u6570\u503c\uff0c</p> \\[ P(X=k) = \\frac{\\lambda^k}{k!}e^{-\\lambda}, \\quad k=0, 1, \\cdots \\] <p>Note</p> <ul> <li>\\(\\sum p_i = 1\\)</li> <li>Poisson \u5206\u5e03\u662f Poisson \u8fc7\u7a0b\u7684\u57fa\u7840\uff0c\u7528\u4e8e\u63cf\u8ff0\u968f\u673a\u670d\u52a1\u7cfb\u7edf</li> <li> <p>\u5f53 \\(k\\) \u8db3\u591f\u5927</p> \\[ P(X\\geq k) = \\sum_{l = k}^\\infty\\frac{\\lambda^l}{l!}e^{-\\lambda} \\asymp \\frac{\\lambda^k}{k!}e^{-\\lambda} \\] <p>\\(X\\) \u53ea\u96c6\u4e2d\u5728\u5c0f\u503c\u4e2d\u3002\u7a00\u6709\u4e8b\u4ef6\u3002</p> </li> </ul> <p>Poisson \u5206\u5e03\u548c\u4e8c\u9879\u5206\u5e03\u4e4b\u95f4\u7684\u5173\u7cfb(Poisson \u6781\u9650\u5b9a\u7406)</p> <p>\u5047\u8bbe \\(S_n \\sim B(n, p_n)\\)\u3002\u5f53 \\(n \\to \\infty, np_n \\to \\lambda &gt; 0\\)\u3002\u5bf9\u4e8e\u4efb\u610f \\(k \\leq 0\\)</p> \\[ P(S_n = k) \\to \\frac{\\lambda^k}{k!}e^{-\\lambda} = P(X = k), \\quad n \\to \\infty \\] Proof \\[ \\begin{align} P(S_n = k) =&amp; {n \\choose k}p_n^k(1-p_n)^{n-k} \\\\ =&amp; \\frac{1}{k!} \\cdot n(n-1)\\cdots(n-k+1)\\cdot \\frac{1}{n^k}\\cdot (np_k)^k \\cdot (1 - \\frac{\\lambda}{n} + o(\\frac{1}{n}))^{n-k} \\\\ =&amp; \\left[(1-\\frac{1}{n})(1-\\frac{2}{n})\\cdots(1-\\frac{k-1}{n})\\right] \\left[\\frac{\\lambda^k}{k!}\\right] \\left[(1-\\frac{\\lambda}{n})^{n-k}\\right] \\\\ \\to &amp; \\frac{\\lambda^k}{k!} e^{-\\lambda}, \\quad n\\to \\infty \\end{align} \\] <p>\u51e0\u4f55\u5206\u5e03</p> <p>\u968f\u673a\u8bd5\u9a8c \\(E\\) \u548c\u4e8b\u4ef6 \\(A\\) \uff0c\\(P(A) = p, 0&lt;p&lt;1\\)\u3002\u72ec\u7acb\u91cd\u590d \\(E\\) \u76f4\u5230 \\(A\\) \u53d1\u751f\uff0c\u8bb0\u6240\u505a\u7684\u8bd5\u9a8c\u6b21\u6570\u8bb0\u4e3a \\(X\\)</p> \\[ P(X=k) = p(1-p)^{k-1} \\] <p>\u5176\u4e2d</p> \\[ \\sum_{k=1}^{\\infty} p(1-p)^{k-1} = \\frac{p}{1-(1-p)} = 1 \\] <p>\u5206\u5e03\u5217\uff1a</p> \\[ X \\sim \\begin{pmatrix} 1 &amp; 2 &amp; \\cdots &amp; k &amp; \\cdots \\\\ p &amp; p(1-p) &amp; \\cdots &amp; p(1-p)^{k-1} &amp; \\cdots \\end{pmatrix} \\] <p>\u8d85\u51e0\u4f55\u5206\u5e03</p> <p>\\(N\\) \u4ef6\u4ea7\u54c1\u4e2d\u6709 \\(M\\) \u4ef6\u6b21\u54c1\uff0c\u968f\u673a\u62bd\u6837 \\(n&lt;N\\) \u4ef6\uff0c\u7528 \\(X\\) \u8868\u793a \\(n\\) \u4ef6\u4ea7\u54c1\u4e2d\u6b21\u54c1\u6570\u3002</p> <p>\\(0\\leq X \\leq \\min\\{M,n\\}\\)</p> \\[ P(X=k) = \\frac{{M \\choose k}{N - M \\choose n - k}}{{N \\choose n}} \\]"},{"location":"math/prob_theory/chapter2/#_5","title":"\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u4e0e\u5bc6\u5ea6\u51fd\u6570","text":"<p>\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u7279\u70b9\uff1a</p> <ul> <li>\u968f\u673a\u53d8\u91cf\u53d6\u503c\u662f\u4e00\u4e2a\u6216\u51e0\u4e2a\u533a\u95f4</li> <li> <p>\u5b58\u5728\u51fd\u6570 \\(p(x)\\)</p> \\[ p(x)\\geq 0, \\quad \\int_{-\\infty}^{\\infty}p(x)\\text{d}x = 1 \\] <p>\u4f7f\u5f97\u5bf9\u4efb\u4f55 Borel \u96c6 \\(B\\)\uff0c</p> \\[ P(X\\in B) = \\int_{B} p(x)\\text{d}x \\] <p>\u7b80\u8bb0 \\(X \\sim p(x)\\)</p> </li> </ul> <p>\u79f0 \\(p(x)\\) \u4e3a \\(X\\) \u7684\u5bc6\u5ea6\u51fd\u6570</p> <p>Note</p> <ul> <li>\\(P(X=x) = 0, \\quad x\\in \\mathbb{R}\\)</li> <li>\\(P(X\\in(a,b]) = \\int_{a}^{b} p(x)\\text{d}x\\)</li> </ul>"},{"location":"math/prob_theory/chapter2/#_6","title":"\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u7684\u4f8b\u5b50","text":"<p>\u5747\u5300\u5206\u5e03</p> <p>\u5411 \\((a,b)\\) \u4e0a\u968f\u673a\u6295\u70b9\uff0c\u8bb0\u843d\u70b9\u7684\u4f4d\u7f6e\u4e3a \\(X\\)</p> <ul> <li>\\(X\\) \u843d\u5728 \\((a,b)\\) \u4e0a\u6bcf\u4e00\u70b9\u7b49\u53ef\u80fd \\(P(X=x) = 0\\)</li> <li>\\(P(X\\in A) = \\frac{|A|}{b-a}\\)</li> </ul> <p>\u7b80\u8bb0 \\(X \\sim U(a,b)\\)</p> \\[ X \\sim p(x) =  \\begin{cases} \\frac{1}{b-a}, &amp; x\\in (a,b) \\\\ 0            , &amp; \\text{\u5176\u4ed6} \\end{cases} \\] <p>\u6307\u6570\u5206\u5e03</p> <p>\u5982\u679c \\(X\\) \u53d6\u975e\u8d1f\u5b9e\u6570\uff0c\u4e14</p> \\[ p(x) = \\begin{cases} \\lambda e^{-\\lambda x}, &amp; x\\geq 0 \\\\ 0                     , &amp; \\text{\u5176\u4ed6} \\end{cases} \\quad \\lambda &gt; 0 \\] <p>\u7b80\u8bb0 \\(X \\sim \\exp(\\lambda)\\)</p> <p>Note</p> <ul> <li>\u901a\u5e38\u63cf\u8ff0\u5bff\u547d</li> <li>\u548c Poisson \u5206\u5e03\u6709\u5bc6\u5207\u8054\u7cfb\uff1aPoisson \u8fc7\u7a0b</li> <li> <p>\\(X\\) \u53d6\u5927\u503c\u7684\u53ef\u80fd\u6027\u8fc5\u901f\u8870\u51cf</p> \\[ P(X&gt;x) = e^{\\lambda x}, \\quad x \\geq 0 \\] </li> <li> <p>\u65e0\u8bb0\u5fc6\u6027\u3002\u4f7f\u7528\u4e86 \\(y\\) \u5c0f\u65f6\u4e4b\u540e\u8fd8\u80fd\u4f7f\u7528 \\(x\\) \u7684\u6982\u7387</p> \\[ \\begin{align} P(X&gt;x+y | X&gt;y) =&amp; \\frac{P(X &gt; x+y)}{P(X &gt; y)} \\\\                =&amp; \\frac{e^{-\\lambda(x+y)}}{e^{-\\lambda y}} \\\\                =&amp; e^{-\\lambda x} \\\\                =&amp; P(X&gt;x) \\end{align} \\] </li> </ul> <p>\u6b63\u6001\u5206\u5e03</p> <p>\u968f\u673a\u53d8\u91cf \\(X\\) \u53d6\u6240\u6709\u5b9e\u6570\u503c\uff0c\u5bc6\u5ea6</p> \\[ p(x) = \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}, \\quad -\\infty &lt; x &lt; \\infty \\] <p>\u79f0 \\(X\\) \u662f\u670d\u4ece\u6b63\u6001\u5206\u5e03\u7684\u968f\u673a\u53d8\u91cf\uff0c\u7b80\u8bb0 \\(X \\sim N(\\mu,\\sigma^2)\\)</p> <p>Note</p> <ul> <li>\\(-\\infty &lt; \\mu &lt; \\infty, \\sigma &gt; 0\\)</li> <li>\u6807\u51c6\u6b63\u6001\u5206\u5e03 \\(\\mu = 0, \\sigma^2 = 1\\)\uff0c\u79f0 \\(X \\sim N(0,1)\\)</li> </ul> <p>\u9a8c\u8bc1</p> <p>\u9a8c\u8bc1</p> \\[ \\int_{-\\infty}^{\\infty}p(x)\\text{d}x = 1 \\] <p>\u4ee4 \\(t = \\frac{x-\\mu}{\\sigma}\\) \uff0c\u53ea\u9700\u8bc1\u660e</p> \\[ \\int_{-\\infty}^{\\infty}\\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^2}{2}}\\text{d}x = 1 \\] <p>\u8003\u8651</p> \\[ \\left(\\int_{-\\infty}^{\\infty}\\frac{1}{\\sqrt{2\\pi}}e^{-\\frac{x^2}{2}}\\text{d}x\\right)^2 = \\int_{-\\infty}^{\\infty}\\int_{-\\infty}^{\\infty}\\frac{1}{2\\pi}e^{-\\frac{x^2+y^2}{2}}\\text{d}x\\text{d}y \\] <p>\u6781\u5750\u6807\u53d8\u6362\uff1a</p> \\[ \\int_{-\\infty}^{\\infty}\\int_{-\\infty}^{\\infty}\\frac{1}{2\\pi}e^{-\\frac{x^2+y^2}{2}}\\text{d}x\\text{d}y = \\int_{0}^\\infty\\int_{0}{2\\pi}\\frac{1}{2\\pi}e^{-\\frac{\\rho^2}{2}}\\rho\\text{d}\\rho\\text{d}\\theta = 1 \\] <p>\u6b63\u6001\u5206\u5e03\u7684\u6027\u8d28</p> <ul> <li>\u5bf9\u79f0\u6027\uff1a\u5173\u4e8e \\(x = \\mu\\) \u5bf9\u79f0</li> <li>\u5149\u6ed1\u6027\uff1a\\(p(x)\\) \u4efb\u610f\u6b21\u53ef\u5fae</li> <li>\u5355\u8c03\u6027</li> <li>\u6e10\u8fd1\u7ebf \\(y = 0\\)</li> <li>\u6700\u5927\u503c\uff1a\\(P(x)\\) \u5728 \\(x=\\mu\\) \u521d\u53d6\u6700\u5927\u503c \\(\\frac{1}{\\sqrt{2\\pi}\\sigma}\\)</li> <li>\\(\\sigma\\) \u53d8\u5927\uff0c\u66f2\u7ebf\u53d8\u5e73\u5766\uff1b\\(\\sigma\\) \u53d8\u5c0f\uff0c\u66f2\u7ebf\u53d8\u9661\u5ced</li> <li> <p>\u7c7b\u4f3c\u79ef\u5206</p> \\[ \\begin{align} P(X &gt; \\mu + \\sigma x) =&amp; \\int_{\\mu + \\sigma x}^{\\infty} \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(u - \\mu)^2}{2\\sigma^2}}\\text{d}u \\\\ \\sim &amp; \\frac{1}{\\sqrt{2\\pi}x}e^{-\\frac{x^2}{2}}, \\quad x\\to \\infty \\end{align} \\] <p>\u540c\u7406</p> \\[ P(X &lt; \\mu - \\sigma x) \\sim \\frac{1}{\\sqrt{2\\pi}x}e^{-\\frac{x^2}{2}}, \\quad x\\to \\infty \\] </li> </ul>"},{"location":"math/prob_theory/chapter2/#_7","title":"\u4e00\u822c\u578b\u968f\u673a\u53d8\u91cf\u4e0e\u5206\u5e03\u51fd\u6570","text":"<ul> <li> <p>\u5206\u5e03\u51fd\u6570</p> \\[ F(x) = P(\\omega: X(\\omega) \\leq x), \\quad -\\infty &lt; x &lt; \\infty \\] </li> <li> <p>\u5206\u5e03\u51fd\u6570\u7684\u6027\u8d28</p> <ul> <li>\\(\\lim_{x\\to -\\infty}F(x) = 0, \\lim_{x\\to \\infty}F(x) = 1\\)</li> <li>\\(F(x_1) \\leq F(x_2), \\quad x_1 \\leq x_2\\)</li> <li> <p>\\(F(x)\\) \u5de6\u6781\u9650\u548c\u53f3\u6781\u9650\u5b58\u5728</p> \\[ \\lim_{x\\to x_0-0}F(x) = F(x_0-0), \\quad \\lim_{x\\to x_0+0}F(x) = F(x_0+0) \\] <p>Note</p> <ul> <li>\\(F(x_0-0) = P(X &lt; x_0)\\)</li> <li>\\(P(x = x_0) = F(x_0+0) - F(x_0-0)\\)</li> <li>\\(P(X \\in (x_1, x_2]) = F(x_2) - F(x_1)\\)</li> </ul> </li> </ul> </li> <li> <p>\u8fde\u7eed\u6027\u968f\u673a\u53d8\u91cf\u7684\u5206\u5e03\u51fd\u6570</p> \\[ \\begin{align*} F(x) =&amp; P(X \\leq x) \\\\      =&amp; \\int_{-\\infty}^{x}p(u)\\text{d}u \\end{align*} \\] <p>\\(F(x)\\) \u662f\u8fde\u7eed\u51fd\u6570\uff0c\u4e14 \\(F'(x) = p(x)\\)</p> <p>\u6b63\u6001\u5206\u5e03\u7684\u5206\u5e03\u51fd\u6570</p> <p>\u5047\u5b9a \\(X \\sim N(0, 1)\\)</p> \\[ F(x) = \\frac{1}{\\sqrt{2\\pi}}\\int_{-\\infty}^{x}e^{-\\frac{u^2}{2}}\\text{d}u \\] <p>\u6ca1\u6709\u663e\u6027\u8868\u8fbe\u5f0f\uff0c\u7528 \\(\\Phi(x)\\) \u8868\u793a\u5206\u5e03\u51fd\u6570\uff08Probit \u51fd\u6570\uff09</p> <p>\u8bef\u5dee\u51fd\u6570</p> \\[ erf(x) = \\frac{2}{\\sqrt{\\pi}}\\int_{0}^{x}e^{-u^2}\\text{d}u \\] <p>\u91c7\u7528\u8bef\u5dee\u51fd\u6570\u8868\u793a \\(\\Phi(x)\\)</p> \\[ \\Phi(x) = \\frac{1}{2}\\left[1 + \\frac{1}{\\sqrt{2}}erf(x)\\right] \\] <p>\\(\\Phi(x)\\) \u7684\u503c\uff1a\u67e5\u8868\u3002</p> </li> </ul>"},{"location":"math/prob_theory/chapter2/#_8","title":"\u968f\u673a\u53d8\u91cf\u7684\u51fd\u6570","text":"<p>\u8003\u8651</p> \\[ Y = f(X), Y(\\omega) = f(X(\\omega)) \\] <p>\\(Y\\) \u662f\u968f\u673a\u53d8\u91cf\u7684\u6761\u4ef6</p> <p>\\(X\\) \u662f\u968f\u673a\u53d8\u91cf\uff0c\\(f\\) \u662f\u53ef\u6d4b\u51fd\u6570</p> <ul> <li> <p>\u5f53 \\(X\\) \u662f\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf\u65f6\uff0c\\(Y\\) \u4e5f\u662f\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf</p> \\[ X \\sim \\begin{pmatrix} x_1 &amp; x_2 &amp; \\cdots &amp; x_i &amp; \\cdots &amp; x_N \\\\ p_1 &amp; p_2 &amp; \\cdots &amp; p_i &amp; \\cdots &amp; p_N \\end{pmatrix} \\] \\[ P(Y = y_i) = \\sum_{x_j: f(x_j) = y_i}p_j \\] </li> <li> <p>\u5f53 \\(X\\) \u662f\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u65f6\uff0c\\(Y\\) \u4e0d\u4e00\u5b9a\u662f\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\u3002\u65e0\u7edf\u4e00\u516c\u5f0f\u3002</p> <p>\u4e00\u822c\u5730\uff0c\u5047\u8bbe \\(X \\sim p_X(x)\\)\uff0c\\(f\\) \u5177\u6709\u53cd\u51fd\u6570 \\(f^{-1}\\)\uff0c\u4e14 \\(f^{-1}\\) \u53ef\u5bfc\u3002\u5219 \\(Y\\) \u662f\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf\uff0c\u5176\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[ Y \\sim p_Y(y) = p_X(f^{-1}(y))\\left|\\frac{\\text{d}f^{-1}(y)}{\\text{d}y}\\right| \\] <p>Example</p> <p>\u5047\u8bbe \\(X\\) \u5177\u6709\u8fde\u7eed\u7684\u5206\u5e03\u51fd\u6570 \\(F(x)\\)\uff0c\u6c42 \\(Y = F(X)\\) \u7684\u5206\u5e03</p> \\[ \\begin{align} P(Y \\leq y) =&amp; P(F(X) \\leq y) \\\\             =&amp; P(X \\leq F^{-1}(y)) \\\\             =&amp; F(F^{-1}(y)) \\\\             =&amp; y, \\quad 0 \\leq y \\leq 1 \\end{align} \\] <p>\u5219 \\(Y \\sim U(0,1)\\)</p> </li> </ul>"},{"location":"math/prob_theory/chapter2/#_9","title":"\u968f\u673a\u5411\u91cf\u4e0e\u8054\u5408\u5206\u5e03\u51fd\u6570","text":""},{"location":"math/prob_theory/chapter2/#_10","title":"\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf","text":"<p>\\((X,Y)\\) \u662f 2-\u968f\u673a\u5411\u91cf\u3002\\(X\\) \u53d6\u503c \\(x_1, x_2, \\cdots\\)\uff0c\\(Y\\) \u53d6\u503c \\(y_1, y_2, \\cdots\\)\u3002\u79f0 \\((X,Y)\\) \u4e3a\u79bb\u6563\u578b\u968f\u673a\u5411\u91cf\u3002</p> \\[ p_{ij} = P(X = x_i, Y = y_j), \\quad i,j = 1,2,\\cdots \\] <p>\u79f0</p> \\[ ((x_i, y_j), p_{ij})_{i,j=1}^{\\infty} \\] <p>\u4e3a \\((X,Y)\\) \u7684\u8054\u5408\u5206\u5e03\u3002</p> <ul> <li> <p>\u8fb9\u9645\u5206\u5e03</p> \\[ \\begin{align} P(X = x_i) =&amp; \\sum_{j=1}^{\\infty}p_{ij} \\\\ P(Y = y_j) =&amp; \\sum_{i=1}^{\\infty}p_{ij} \\end{align} \\] <p>Warning</p> <p>\u8fb9\u9645\u5206\u5e03\u7531\u8054\u5408\u5206\u5e03\u552f\u4e00\u786e\u5b9a\uff0c\u53cd\u4e4b\u4e0d\u6210\u7acb\u3002</p> </li> <li> <p>\u6761\u4ef6\u5206\u5e03</p> \\[ P(X = x_i | Y = y_j) = \\frac{P(X = x_i, Y = y_j)}{P(Y = y_j)} = \\frac{p_{ij}}{p_{\\cdot j}} \\] <p>\u6761\u4ef6\u5206\u5e03\u5217</p> \\[ X|Y = y_j \\sim \\begin{pmatrix} x_1 &amp; x_2 &amp; \\cdots &amp; x_i &amp; \\cdots \\\\ \\frac{p_{1j}}{p_{\\cdot j}} &amp; \\frac{p_{2j}}{p_{\\cdot j}} &amp; \\cdots &amp; \\frac{p_{ij}}{p_{\\cdot j}} &amp; \\cdots \\end{pmatrix} \\] </li> <li> <p>\u72ec\u7acb\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf</p> \\[ P(X = x_i, Y = y_j) = P(X = x_i)P(Y = y_j), \\forall i,j \\] <p>\u5373</p> \\[ p_{ij} = p_{i\\cdot}p_{\\cdot j}, \\quad \\forall i,j \\] </li> </ul>"},{"location":"math/prob_theory/chapter2/#_11","title":"\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf","text":"<p>\u8054\u5408\u5bc6\u5ea6\u51fd\u6570 \\(p(x,y)\\)</p> \\[ p(x,y) \\geq 0, \\quad \\int_{-\\infty}^{\\infty}\\int_{-\\infty}^{\\infty}p(x,y)\\text{d}x\\text{d}y = 1 \\] <p>\u5e76\u4e14</p> \\[ P(X \\in A, Y \\in B) = \\int_{A}\\int_{B}p(x,y)\\text{d}x\\text{d}y \\] <p>\u79f0 \\((X,Y)\\) \u4e3a\u8fde\u7eed\u578b\u968f\u673a\u5411\u91cf\u3002</p> <ul> <li> <p>\u8fb9\u9645\u5bc6\u5ea6</p> \\[ X \\sim p_X(x), \\quad Y \\sim p_Y(y) \\] \\[ p_X(x) = \\int_{-\\infty}^{\\infty}p(x,y)\\text{d}y, \\quad p_Y(y) = \\int_{-\\infty}^{\\infty}p(x,y)\\text{d}x \\] </li> </ul> <p>\u8054\u5408\u6b63\u6001\u5206\u5e03</p> \\[ p(x,y) = \\frac{1}{2\\pi\\sigma_1\\sigma_2\\sqrt{1-\\rho^2}}e^{-\\frac{1}{2(1-\\rho^2)}\\left[\\frac{(x-\\mu_1)^2}{\\sigma_1^2} - 2\\rho\\frac{(x-\\mu_1)(y-\\mu_2)}{\\sigma_1\\sigma_2} + \\frac{(y-\\mu_2)^2}{\\sigma_2^2}\\right]} \\] <p>\u79f0 \\((X,Y)\\) \u670d\u4ece\u4e8c\u5143\u6b63\u6001\u5206\u5e03\uff0c\u7b80\u8bb0 \\((X,Y) \\sim N(\\mu_1, \\mu_2, \\sigma_1^2, \\sigma_2^2, \\rho)\\)</p> <ul> <li> <p>\u8fb9\u9645\u5206\u5e03</p> \\[ X \\sim N(\\mu_1, \\sigma_1^2), \\quad Y \\sim N(\\mu_2, \\sigma_2^2) \\] </li> </ul> <ul> <li> <p>\u6761\u4ef6\u5206\u5e03</p> \\[ p_{Y|X}(y|x) = \\frac{p(x,y)}{p_X(x)} \\] \\[ P(Y \\leq y | X = x) = \\frac{\\int_{-\\infty}^{y}p(x,v)\\text{d}v}{p_X(x)} \\] </li> <li> <p>\u72ec\u7acb\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf</p> \\[ p(x,y) = p_X(x)p_Y(y), \\quad \\forall x,y \\] </li> </ul>"},{"location":"math/prob_theory/chapter2/#_12","title":"\u4e00\u822c\u578b\u968f\u673a\u53d8\u91cf","text":"<p>\u4e00\u822c\u5229\u7528\u5206\u5e03\u51fd\u6570</p> \\[ F(x,y) = P(X \\leq x, Y \\leq y) \\] <p>\\(F(x)\\) \u6027\u8d28</p> <ul> <li>\\(F(-\\infty, y) = F(x, -\\infty) = 0, F(+\\infty, +\\infty) = 1\\)</li> <li>\\(F(x, y)\\) \u5173\u4e8e \\(x\\) \u548c \\(y\\) \u90fd\u662f\u975e\u51cf\u51fd\u6570</li> <li>\\(F(x, y)\\) \u5173\u4e8e \\(x\\) \u548c \\(y\\) \u5de6\u6781\u9650\u5b58\u5728\uff0c\u53f3\u8fde\u7eed</li> <li>\\(P(a &lt; X \\leq b, c &lt; Y \\leq d) = F(b,d) - F(a,d) - F(b,c) + F(a,c)\\)</li> </ul> <ul> <li> <p>\u8fb9\u9645\u5206\u5e03</p> \\[ F_X(x) = F(x, +\\infty), \\quad F_Y(y) = F(+\\infty, y) \\] </li> <li> <p>\u6761\u4ef6\u5206\u5e03</p> \\[ \\begin{align} P(Y \\leq y | X = x) =&amp; \\lim_{\\epsilon \\to 0} P(Y \\leq y | x - \\epsilon &lt; X \\leq x + \\epsilon) \\\\                     =&amp; \\lim_{\\epsilon \\to 0} \\frac{F(x+\\epsilon, y) - F(x-\\epsilon, y)}{F_X(x+\\epsilon) - F_X(x-\\epsilon)} \\end{align} \\] </li> <li> <p>\u72ec\u7acb\u4e00\u822c\u578b\u968f\u673a\u53d8\u91cf</p> \\[ F(x,y) = F_X(x)F_Y(y), \\quad \\forall x,y \\] <p>\u5982\u679c \\(X, Y\\) \u76f8\u4e92\u72ec\u7acb\uff0c\u90a3\u4e48\u5bf9\u4e8e\u4efb\u610f Borel \u51fd\u6570 \\(f,g\\)\uff0c\\(f(X)\\) \u548c \\(g(Y)\\) \u4e5f\u76f8\u4e92\u72ec\u7acb\u3002</p> <p>Proof</p> \\[ \\begin{align} P(f(X) \\in A, g(Y) \\in B) =&amp; P(X \\in f^{-1}(A), Y \\in g^{-1}(B)) \\\\                            =&amp; P(X \\in f^{-1}(A))P(Y \\in g^{-1}(B)) \\\\                            =&amp; P(f(X) \\in A)P(g(Y) \\in B) \\end{align} \\] </li> </ul>"},{"location":"math/prob_theory/chapter2/#_13","title":"\u591a\u7ef4\u968f\u673a\u5411\u91cf","text":"<p>\\(\\mathbf{X} = (X_1, X_2, \\cdots, X_n)\\) \u662f \\(n\\)-\u7ef4\u968f\u673a\u5411\u91cf\u3002</p> <ul> <li> <p>\\(n\\)-\u5143\u8054\u5408\u5206\u5e03\u51fd\u6570</p> \\[ F_{\\mathbf{X}}(\\mathbf{x}) = P(X_1 \\leq x_1, X_2 \\leq x_2, \\cdots, X_n \\leq x_n) \\] </li> <li> <p>\u8fb9\u9645\u5206\u5e03</p> \\[ F_{X_i}(x_i) = F_{\\mathbf{X}}(\\infty, \\cdots, \\infty, x_i, \\infty, \\cdots, \\infty) = P(X_i \\leq x_i) \\] </li> <li> <p>\u72ec\u7acb\u968f\u673a\u53d8\u91cf</p> \\[ F_{\\mathbf{X}}(\\mathbf{x}) = \\prod_{i=1}^{n}F_{X_i}(x_i) \\] <p>\u5219 \\(X_1, X_2, \\cdots, X_n\\) \u76f8\u4e92\u72ec\u7acb\u3002</p> </li> </ul>"},{"location":"math/prob_theory/chapter2/#_14","title":"\u968f\u673a\u5411\u91cf\u7684\u8fd0\u7b97","text":""},{"location":"math/prob_theory/chapter2/#_15","title":"\u968f\u673a\u5411\u91cf\u7684\u52a0\u51cf","text":"<ul> <li> <p>\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf</p> <p>\u5206\u5e03\u4e3a</p> \\[ P(X = x_i, Y = y_j) = p_{ij} \\] <p>\u8bb0 \\(Z = X + Y\\)\uff0c\u5219</p> \\[ P(Z = z_k) = \\sum_{i,j: x_i + y_j = z_k}p_{ij} \\] </li> <li> <p>\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf</p> \\[ \\begin{align*} F_Z(z) = P(X + Y \\leq z) =&amp; \\int_{-\\infty}^{\\infty}\\int_{-\\infty}^{z-x}p(x,y)\\text{d}y\\text{d}x \\\\                          =&amp; \\int_{-\\infty}^{z}\\int_{-\\infty}^{\\infty}p(x, y - x)\\text{d}y\\text{d}x \\end{align*} \\] <p>\u5bc6\u5ea6\u51fd\u6570</p> \\[ p_Z(z) = \\int_{-\\infty}^{\\infty}p(x, z - x)\\text{d}x \\] <p>\u51cf\u6cd5\u7c7b\u4f3c\uff1a\\(Z = Y - X\\)</p> \\[ p_Z(z) = \\int_{-\\infty}^{\\infty}p(x, x + z)\\text{d}x \\] </li> </ul> <p>\\(\\Gamma(\\alpha, \\beta)\\) \u5206\u5e03</p> <p>\u4ee4 \\(\\alpha, \\beta &gt; 0\\)\uff0c\u5b9a\u4e49</p> \\[ \\Gamma(\\alpha) = \\int_{0}^{\\infty}x^{\\alpha - 1}e^{-x}\\text{d}x \\] <p>\\(\\Gamma(n) = (n - 1)!, \\Gamma(\\alpha + 1) = \\alpha\\Gamma(\\alpha)\\)</p> <p>\u5206\u5e03\u5bc6\u5ea6\u51fd\u6570</p> \\[ p(x; \\alpha, \\beta) = \\frac{\\beta^\\alpha}{\\Gamma(\\alpha)}x^{\\alpha - 1}e^{-\\beta x}, \\quad x &gt; 0 \\]"},{"location":"math/prob_theory/chapter2/#_16","title":"\u968f\u673a\u5411\u91cf\u7684\u4e58\u9664","text":"<ul> <li> <p>\u4e58\u6cd5</p> <p>\u5047\u8bbe \\((X,Y)\\) \u662f\u8fde\u7eed\u578b\u968f\u673a\u5411\u91cf\uff0c\\(Z = XY\\)\uff0c\u5219</p> \\[ \\begin{align*} F_Z(z) =&amp; P(XY \\leq z) \\\\     =&amp; \\int_{xy \\leq z}p(x, y)\\text{d}x\\text{d}y \\\\     =&amp; \\int_{-\\infty}^{0}\\text{d}x\\int_{z/x}^{\\infty}p(x, y)\\text{d}y + \\int_{0}^{\\infty}\\text{d}x\\int_{-\\infty}^{z/x}p(x, y)\\text{d}y \\\\     =&amp; -\\int_{-\\infty}^{0}\\text{d}x\\int_{-\\infty}^{z}\\frac{1}{x}p(x, \\frac{y}{x})\\text{d}y + \\int_{0}^{\\infty}\\text{d}x\\int_{-\\infty}^{z}\\frac{1}{x}p(x, \\frac{y}{x})\\text{d}y \\\\     =&amp; -\\int_{-\\infty}^{z}\\int_{-\\infty}^{0}\\frac{1}{x}p(x, \\frac{y}{x})\\text{d}x\\text{d}y + \\int_{-\\infty}^{z}\\int_{0}^{\\infty}\\frac{1}{x}p(x, \\frac{y}{x})\\text{d}x\\text{d}y \\end{align*} \\] <p>\u5bc6\u5ea6\u51fd\u6570</p> \\[ \\begin{align*} p_Z(z) =&amp; -\\int_{-\\infty}^{0}\\frac{1}{x}p(x, \\frac{z}{x})\\text{d}x + \\int_{0}^{\\infty}\\frac{1}{x}p(x, \\frac{z}{x})\\text{d}x \\\\     =&amp; \\int_{-\\infty}^{\\infty}\\frac{1}{|x|}p(x, \\frac{z}{x})\\text{d}x \\end{align*} \\] </li> <li> <p>\u9664\u6cd5</p> <p>\\(Z = \\frac{Y}{X}\\) \u7684\u5bc6\u5ea6\u51fd\u6570</p> \\[ p_Z(z) = \\int_{-\\infty}^{\\infty}|x|p(x, xz)\\text{d}x \\] </li> </ul> <p>Cauchy \u5206\u5e03</p> \\[ p(x; x_0, \\gamma) = \\frac{1}{\\pi}\\frac{\\gamma}{(x - x_0)^2 + \\gamma^2} \\]"},{"location":"math/prob_theory/chapter2/#_17","title":"\u968f\u673a\u5411\u91cf\u7684\u53d8\u6362","text":"<p>\\((X, Y)\\) \u4e3a\u8fde\u7eed\u578b\u968f\u673a\u5411\u91cf\uff0c\u6709\u8054\u5408\u5bc6\u5ea6\u51fd\u6570 \\(p_{XY}(x, y)\\)\uff0c\u53d8\u6362\u5982\u4e0b</p> \\[ \\begin{cases} U = f_1(X, Y) \\\\ V = f_2(X, Y) \\end{cases} \\] <ul> <li> <p>\u57fa\u672c\u65b9\u6cd5</p> \\[ \\begin{align*} P(U \\leq u, V \\leq v) =&amp; P(f_1(X, Y) \\leq u, f_2(X, Y) \\leq v) \\\\     =&amp; \\iint_{f_1(x, y) \\leq u, f_2(x, y) \\leq v}p_{XY}(x, y)\\text{d}x\\text{d}y \\end{align*} \\] </li> <li> <p>\u7279\u6b8a\u60c5\u5f62</p> <p>\u5047\u8bbe \\(f_1, f_2\\) \u5b58\u5728\u9006\u53d8\u6362\uff1a</p> \\[ \\begin{cases} X = g_1(u, v) \\\\ Y = g_2(u, v) \\end{cases} \\] <p>\u5047\u8bbe \\(g_1, g_2\\) \u53ef\u5fae\uff0c\u4e14\u96c5\u53ef\u6bd4\u5f0f</p> \\[ J = \\frac{\\partial(x, y)}{\\partial(u, v)} \\] <p>\u90a3\u4e48 \\((U, V)\\) \u7684\u4e3a\u8fde\u7eed\u578b\u968f\u673a\u5411\u91cf\uff0c\u5176\u5bc6\u5ea6\u51fd\u6570\u4e3a</p> \\[ p_{UV}(u, v) = p_{XY}(x, y)|J| \\] </li> </ul>"},{"location":"math/prob_theory/chapter2/#_18","title":"\u6781\u503c\u968f\u673a\u53d8\u91cf","text":"<p>\\(X_1, X_2, \\cdots, X_n\\) \u662f\u72ec\u7acb\u968f\u673a\u53d8\u91cf\uff0c\u6709\u76f8\u540c\u7684\u5206\u5e03\u51fd\u6570 \\(F(x)\\)\uff0c\u8bb0</p> \\[ X_{(1)} \\leq X_{(2)} \\leq \\cdots \\leq X_{(n)} \\] <p>\u5373 \\(X_{(k)}\\) \u4e3a\u7b2c k \u5c0f\u503c\u3002\\(X_{(1)} = \\min\\{X_1, X_2, \\cdots, X_n\\}\\)\uff0c\\(X_{(n)} = \\max\\{X_1, X_2, \\cdots, X_n\\}\\)\u3002</p> <ul> <li> <p>\\(X_{(n)}\\) \u7684\u5206\u5e03</p> \\[ \\begin{align*} F_{X_{(n)}}(x) =&amp; P(X_{(n)} \\leq x) \\\\     =&amp; P(X_1 \\leq x, X_2 \\leq x, \\cdots, X_n \\leq x) \\\\     =&amp; P(X_1 \\leq x)P(X_2 \\leq x)\\cdots P(X_n \\leq x) \\\\     =&amp; F^n(x) \\end{align*} \\] <p>\u5bc6\u5ea6\u51fd\u6570</p> \\[ p_{X_{(n)}}(x) = \\frac{\\text{d}F_{X_{(n)}}}{\\text{d}x} = nF^{n-1}(x)F'(x) \\] </li> <li> <p>\\(X_{(1)}\\) \u7684\u5206\u5e03</p> \\[ \\begin{align*} F_{X_{(1)}}(x) =&amp; P(X_{(1)} \\leq x) \\\\     =&amp; 1 - P(X_{(1)} &gt; x) \\\\     =&amp; 1 - P(X_1 &gt; x, X_2 &gt; x, \\cdots, X_n &gt; x) \\\\     =&amp; 1 - P(X_1 &gt; x)P(X_2 &gt; x)\\cdots P(X_n &gt; x) \\\\     =&amp; 1 - (1 - F(x))^n \\end{align*} \\] <p>\u5bc6\u5ea6\u51fd\u6570</p> \\[ p_{X_{(1)}}(x) = \\frac{\\text{d}F_{X_{(1)}}}{\\text{d}x} = n(1 - F(x))^{n-1}F'(x) \\] </li> <li> <p>\\(X_{(k)}\\) \u7684\u5206\u5e03</p> \\[ \\begin{align*} F_{X_{(k)}}(x) =&amp; P(X_{(k)} \\leq x) \\\\     =&amp; {n \\choose k} F^k(x)(1 - F(x))^{n-k} \\end{align*} \\] </li> </ul> <p>Example</p> <p>\u8bbe \\(X_1, X_2, \\cdots, X_n\\) \u76f8\u4e92\u72ec\u7acb\u4e14\u670d\u4ece \\([0, a]\\) \u4e0a\u7684\u5747\u5300\u5206\u5e03\uff0c\u6c42 \\(Y = \\max\\{X_1, X_2, \\cdots, X_n\\}, Z = \\min\\{X_1, X_2, \\cdots, X_n\\}\\) \u7684\u8054\u5408\u5206\u5e03\u3002</p> <p>\u89e3\uff1a</p> \\[ \\begin{align*} F_{YZ}(y, z) =&amp; P(Y \\leq y, Z \\leq z) \\\\     =&amp; P(Y \\leq y) - P(Y \\leq y, Z &gt; z) \\\\     =&amp; F_X^n(y) - \\prod_{i=1}^{n}P(z &lt; X_i \\leq y) \\\\     =&amp; F_X^n(y) - (F_X(y) - F_X(z))^n \\\\     =&amp; (\\frac{y}{a})^n - (\\frac{y-z}{a})^n, \\quad 0 \\leq z \\leq y \\leq a \\end{align*} \\]"},{"location":"math/prob_theory/chapter2/#_19","title":"\u603b\u7ed3","text":"<ul> <li> <p>\u4e8c\u9879 Bernoulli \u5206\u5e03</p> \\[ P(X = k) = {n \\choose k}p^k(1-p)^{n-k}, \\quad k = 0, 1, \\cdots, n \\] <p>Poisson \u5206\u5e03\uff1a</p> \\[ P(X = k) = \\frac{\\lambda^k}{k!}e^{-\\lambda}, \\quad k = 0, 1, \\cdots \\] <p>Poisson \u6781\u9650\u5b9a\u7406</p> <p>\\(S_n \\sim B(n, p), X \\sim \\mathcal{P}(\\lambda)\\)</p> \\[ P(S_n = k) = {n \\choose k}p^k(1-p)^{n-k} \\to \\frac{\\lambda^k}{k!}e^{-\\lambda} = P(X = k), \\quad n \\to \\infty \\] <p>\u51e0\u4f55\u5206\u5e03\uff1a\u4e0d\u65ad\u91cd\u590d\u76f4\u5230\u4e8b\u4ef6\u53d1\u751f</p> \\[ P(X = k) = p(1-p)^{k-1}, \\quad k = 1, 2, \\cdots \\] <p>\u8d85\u51e0\u4f55\u5206\u5e03\uff1a\\(N\\) \u4ef6\u4ea7\u54c1 \\(M\\) \u4ef6\u6b21\u54c1\uff0c\u968f\u673a\u62bd\u6837 \\(n\\) \u4ef6\uff0c\\(X\\) \u8868\u793a \\(n\\) \u4ef6\u4ea7\u54c1\u4e2d\u6b21\u54c1\u6570</p> \\[ P(X = k) = \\frac{{M \\choose k}{N - M \\choose n - k}}{{N \\choose n}}, \\quad k = 0, 1, \\cdots, \\min\\{M, n\\} \\] <p>\u6307\u6570\u5206\u5e03</p> \\[ p(x) = \\begin{cases} \\lambda e^{-\\lambda x}, &amp; x\\geq 0 \\\\ 0                     , &amp; \\text{\u5176\u4ed6} \\end{cases} \\quad \\lambda &gt; 0 \\] </li> <li> <p>\u8fde\u7eed\u578b\u968f\u673a\u53d8\u91cf</p> <p>\u5bc6\u5ea6\u51fd\u6570 \\(p(x)\\)\uff0c\u5206\u5e03\u51fd\u6570 \\(F(x)\\)</p> \\[ p(x) \\geq 0, \\int_{-\\infty}^{\\infty}p(x)\\text{d}x = 1 \\] \\[ F(x) = P(X \\leq x) = \\int_{-\\infty}^{x}p(u)\\text{d}u \\] </li> </ul>"},{"location":"math/prob_theory/chapter3/","title":"\u6570\u5b57\u7279\u5f81","text":""},{"location":"math/prob_theory/chapter3/#_2","title":"\u6570\u5b66\u671f\u671b","text":""},{"location":"math/prob_theory/chapter3/#_3","title":"\u79bb\u6563\u578b\u968f\u673a\u53d8\u91cf","text":"\\[ X \\sim \\begin{pmatrix}     x_1 &amp; x_2 &amp; \\cdots &amp; x_n \\\\     p_1 &amp; p_2 &amp; \\cdots &amp; p_n \\end{pmatrix} \\] <p>\u671f\u671b</p> \\[ E(X) = \\sum_{i=1}^n x_i p_i \\] <p>\u4e8c\u9879 Bernoulli \u5206\u5e03</p> \\[ X \\sim B(n, p), P(X = k) = C_n^k p^k (1-p)^{n-k} \\] \\[ E(X) = \\sum_{k=0}^n k C_n^k p^k (1-p)^{n-k} = np \\] <p>Poisson \u5206\u5e03</p> \\[ X \\sim P(\\lambda), P(X = k) = \\frac{\\lambda^k}{k!} e^{-\\lambda} \\] \\[ E(X) = \\sum_{k=0}^\\infty k \\frac{\\lambda^k}{k!} e^{-\\lambda} = \\lambda \\] <p>\u51e0\u4f55\u5206\u5e03</p> \\[ X \\sim G(p), P(X = k) = (1-p)^{k-1} p \\] \\[ E(X) = \\sum_{k=1}^\\infty k (1-p)^{k-1} p = \\frac{1}{p} \\]"},{"location":"math/prob_theory/chapter3/#_4","title":"\u8fd0\u7b97\u6027\u8d28","text":""},{"location":"math/prob_theory/chapter3/#_5","title":"\u65b9\u5dee","text":""},{"location":"math/prob_theory/chapter3/#_6","title":"\u534f\u65b9\u5dee","text":""},{"location":"math/prob_theory/chapter3/#_7","title":"\u77e9","text":""},{"location":"math/prob_theory/chapter3/#_8","title":"\u7279\u5f81\u51fd\u6570","text":""}]}